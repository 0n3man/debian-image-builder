diff -Naur a/scripts/package/builddeb b/scripts/package/builddeb
--- a/scripts/package/builddeb	2022-04-24 20:59:56.972724000 -0400
+++ b/scripts/package/builddeb	2022-04-27 17:50:07.162952992 -0400
@@ -92,6 +92,24 @@
 else
 	cp System.map "$tmpdir/boot/System.map-$version"
 	cp $KCONFIG_CONFIG "$tmpdir/boot/config-$version"
+	if [ -e arch/arm/boot/zImage ]; then
+		cp arch/arm/boot/zImage "$tmpdir/boot/Image";
+	fi
+	if [ -e arch/arm64/boot/Image ]; then
+		cp arch/arm64/boot/Image "$tmpdir/boot/Image";
+	fi
+	if [ -e firmware/fixup4.dat ]; then
+		install -m 0644 firmware/fixup4.dat "$tmpdir/boot";
+	fi
+	if [ -e firmware/start4.elf ]; then
+		install -m 0644 firmware/start4.elf "$tmpdir/boot";
+	fi
+	if [ -e firmware/LICENCE.broadcom ]; then
+		install -m 0644 firmware/LICENCE.broadcom "$tmpdir/boot";
+	fi
+	if [ -e firmware/COPYING.linux ]; then
+		install -m 0644 firmware/COPYING.linux "$tmpdir/boot";
+	fi
 fi
 cp "$($MAKE -s -f $srctree/Makefile image_name)" "$tmpdir/$installed_image_path"
 
@@ -139,6 +157,73 @@
 	mv $libc_headers_dir/usr/include/asm $libc_headers_dir/usr/include/$host_arch/
 fi
 
+# Allwinner
+if [ -e $tmpdir/usr/lib/sun8i-linux-image ]; then
+	mkdir -p "$tmpdir/boot/allwinner"
+	cp -r "$tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-nanopi-m1.dtb" "$tmpdir/boot/allwinner/sun8i-h3-nanopi-m1.dtb";
+	cp -r "$tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-nanopi-neo.dtb" "$tmpdir/boot/allwinner/sun8i-h3-nanopi-neo.dtb";
+	cp -r "$tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-orangepi-one.dtb" "$tmpdir/boot/allwinner/sun8i-h3-orangepi-one.dtb";
+	cp -r "$tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-orangepi-pc.dtb" "$tmpdir/boot/allwinner/sun8i-h3-orangepi-pc.dtb";
+fi
+if [ -e $tmpdir/usr/lib/sun50i-linux-image/allwinner ]; then
+	mkdir -p "$tmpdir/boot/allwinner"
+	cp -r "$tmpdir/usr/lib/sun50i-linux-image/allwinner/sun50i-h5-libretech-all-h3-cc.dtb" "$tmpdir/boot/allwinner/sun50i-h5-libretech-all-h3-cc.dtb";
+	cp -r "$tmpdir/usr/lib/sun50i-linux-image/allwinner/sun50i-a64-pine64-plus.dtb" "$tmpdir/boot/allwinner/sun50i-a64-pine64-plus.dtb";
+	cp -r "$tmpdir/usr/lib/sun50i-linux-image/allwinner/sun50i-h5-nanopi-neo-plus2.dtb" "$tmpdir/boot/allwinner/sun50i-h5-nanopi-neo-plus2.dtb";
+fi
+# Amlogic & Odroid
+if [ -e $tmpdir/usr/lib/meson64-linux-image/amlogic ]; then
+	mkdir -p "$tmpdir/boot/amlogic"
+	cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-gxl-s905x-libretech-cc.dtb" "$tmpdir/boot/amlogic/meson-gxl-s905x-libretech-cc.dtb";
+	cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-sm1-odroid-c4.dtb" "$tmpdir/boot/amlogic/meson-sm1-odroid-c4.dtb";
+	cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12b-odroid-n2.dtb" "$tmpdir/boot/amlogic/meson-g12b-odroid-n2.dtb";
+	cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12b-odroid-n2-plus.dtb" "$tmpdir/boot/amlogic/meson-g12b-odroid-n2-plus.dtb";
+	if [ -e $tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12a-radxa-zero.dtb ]; then
+		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12a-radxa-zero.dtb" "$tmpdir/boot/amlogic/meson-g12a-radxa-zero.dtb";
+	fi
+	if [ -e $tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidc4.dtb ]; then
+		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidc4.dtb" "$tmpdir/boot/amlogic/meson64_odroidc4.dtb";
+	fi
+	if [ -e $tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidn2.dtb ]; then
+		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidn2.dtb" "$tmpdir/boot/amlogic/meson64_odroidn2.dtb";
+	fi
+	if [ -e $tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidn2_plus.dtb ]; then
+		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidn2_plus.dtb" "$tmpdir/boot/amlogic/meson64_odroidn2_plus.dtb";
+	fi
+	if [ -e $tmpdir/usr/lib/meson64-linux-image/amlogic/overlays ]; then
+		mkdir -p "$tmpdir/boot/amlogic/overlays";
+		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/overlays/" "$tmpdir/boot/amlogic/";
+	fi
+fi
+# Broadcom
+if [ -e $tmpdir/usr/lib/raspberrypi-linux-image/broadcom ]; then
+	mkdir -p "$tmpdir/boot"
+	cp -r "$tmpdir/usr/lib/raspberrypi-linux-image/broadcom/bcm2711-rpi-4-b.dtb" "$tmpdir/boot/bcm2711-rpi-4-b.dtb";
+fi
+if [ -e "$tmpdir/usr/lib/raspberrypi-linux-image/broadcom/bcm2711-rpi-400.dtb" ]; then
+	cp -r "$tmpdir/usr/lib/raspberrypi-linux-image/broadcom/bcm2711-rpi-400.dtb" "$tmpdir/boot/bcm2711-rpi-400.dtb";
+fi
+# Rockchip
+if [ -e $tmpdir/usr/lib/rockchip64-linux-image/rockchip ]; then
+	mkdir -p "$tmpdir/boot/rockchip"
+	cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3328-roc-cc.dtb" "$tmpdir/boot/rockchip/rk3328-roc-cc.dtb";
+	cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3328-rock64.dtb" "$tmpdir/boot/rockchip/rk3328-rock64.dtb";
+	cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-nanopc-t4.dtb" "$tmpdir/boot/rockchip/rk3399-nanopc-t4.dtb";
+	if [ -e "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-rockpro64.dtb" ]; then
+		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-rockpro64.dtb" "$tmpdir/boot/rockchip/rk3399-rockpro64.dtb";
+	fi
+	if [ -e "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-rockpro64-v2.dtb" ]; then
+		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-rockpro64-v2.dtb" "$tmpdir/boot/rockchip/rk3399-rockpro64-v2.dtb";
+	fi
+	if [ -e "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-odroid-m1.dtb" ]; then
+		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-odroid-m1.dtb" "$tmpdir/boot/rockchip/rk3568-odroid-m1.dtb";
+	fi
+	if [ -e $tmpdir/usr/lib/rockchip64-linux-image/rockchip/overlays ]; then
+		mkdir -p "$tmpdir/boot/rockchip/overlays";
+		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/overlays/" "$tmpdir/boot/rockchip/";
+	fi
+fi
+
 # Install the maintainer scripts
 # Note: hook scripts under /etc/kernel are also executed by official Debian
 # kernel packages, as well as kernel packages built using make-kpkg.
@@ -164,6 +249,34 @@
 	chmod 755 "$tmpdir/DEBIAN/$script"
 done
 
+if [ -e $tmpdir/usr/lib/raspberrypi-linux-image/broadcom ]; then
+	cat > $tmpdir/DEBIAN/preinst <<EOT
+#!/bin/bash
+# purge kernel script
+
+set -e
+
+if [ -e /boot/Image ]; then
+	rm -f /boot/{Image,*.dtb,vmlinuz-*,System.map-*,config-*,initrd.img*,uInitrd,fixup4*.dat,start4*.elf,LICENCE.broadcom,COPYING.linux};
+else
+	echo -e "\e[1;37mInstalling new kernel\e[0m ...";
+fi
+exit 0
+EOT
+	chmod 755 $tmpdir/DEBIAN/preinst
+else
+	cat > $tmpdir/DEBIAN/preinst <<EOT
+#!/bin/bash
+# remove initrd
+
+set -e
+
+rm -f /boot/{initrd.img*,uInitrd} 2>/dev/null
+exit 0
+EOT
+        chmod 755 $tmpdir/DEBIAN/preinst
+fi
+
 # Build kernel header package
 (cd $srctree; find . -name Makefile\* -o -name Kconfig\* -o -name \*.pl) > "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find arch/*/include include scripts -type f -o -type l) >> "$objtree/debian/hdrsrcfiles"
@@ -183,6 +296,53 @@
 (cd $objtree; cp $KCONFIG_CONFIG $destdir/.config) # copy .config manually to be where it's expected to be
 ln -sf "/usr/src/linux-headers-$version" "$kernel_headers_dir/lib/modules/$version/build"
 rm -f "$objtree/debian/hdrsrcfiles" "$objtree/debian/hdrobjfiles"
+if [ -e headers-byteshift.patch ]; then
+	cp headers-byteshift.patch $destdir/
+	cp $srctree/scripts/module.lds $destdir/
+	mkdir -p $kernel_headers_dir/DEBIAN
+	cat > $kernel_headers_dir/DEBIAN/postinst <<EOT
+#!/bin/bash
+# compile headers
+
+set -e
+
+clean_headers(){
+find -type f -exec touch {} +
+if grep -w "Linux/arm" ".config"; then
+	echo 'y' | make ARCH=arm M=scripts clean;
+else
+	echo 'y' | make M=scripts clean;
+fi
+patch -p1 < headers-byteshift.patch
+if [ -e scripts/module.lds ]; then :; else install -m 0644 module.lds scripts/; fi
+rm -f {headers-byteshift.patch,module.lds}
+if grep -w "Linux/arm" ".config"; then
+	echo 'y' | make ARCH=arm -j\$(grep -c 'processor' /proc/cpuinfo) -s scripts;
+	echo 'y' | make ARCH=arm -j\$(grep -c 'processor' /proc/cpuinfo) -s M=scripts/mod/;
+else
+	echo 'y' | make -j\$(grep -c 'processor' /proc/cpuinfo) -s scripts;
+	echo 'y' | make -j\$(grep -c 'processor' /proc/cpuinfo) -s M=scripts/mod/;
+fi
+if [ -e .config.old ]; then rm -f .config.old; fi
+}
+
+cd /usr/src/linux-headers-$version
+echo -e "\e[1;37mCompiling headers\e[0m ..."
+clean_headers > /dev/null 2>&1;
+exit 0
+EOT
+	chmod 755 $kernel_headers_dir/DEBIAN/postinst
+fi
+	mkdir -p $kernel_headers_dir/DEBIAN; cat > $kernel_headers_dir/DEBIAN/preinst <<EOT
+#!/bin/sh
+# remove old linux headers
+
+set -e
+
+rm -fdr /usr/src/linux-headers-* > /dev/null 2>&1
+exit 0
+EOT
+        chmod 755 $kernel_headers_dir/DEBIAN/preinst
 
 if [ "$ARCH" != "um" ]; then
 	create_package "$kernel_headers_packagename" "$kernel_headers_dir"
