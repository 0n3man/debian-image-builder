diff -Naur a/scripts/package/builddeb b/scripts/package/builddeb
--- a/scripts/package/builddeb	2022-04-04 08:12:02.000000000 -0400
+++ b/scripts/package/builddeb	2022-04-23 11:17:40.518696562 -0400
@@ -31,7 +31,7 @@
 
 	# Create the package
 	dpkg-gencontrol -p$pname -P"$pdir"
-	dpkg --build "$pdir" ..
+	dpkg-deb -Zxz --build "$pdir" ..
 }
 
 version=$KERNELRELEASE
@@ -80,6 +80,9 @@
 else
 	cp System.map "$tmpdir/boot/System.map-$version"
 	cp $KCONFIG_CONFIG "$tmpdir/boot/config-$version"
+	if [ -e arch/arm64/boot/Image ]; then
+		cp arch/arm64/boot/Image "$tmpdir/boot/Image";
+	fi
 fi
 cp "$($MAKE -s -f $srctree/Makefile image_name)" "$tmpdir/$installed_image_path"
 
@@ -123,6 +126,17 @@
 	$MAKE headers_install KBUILD_SRC= INSTALL_HDR_PATH="$libc_headers_dir/usr"
 fi
 
+if [ -e "$tmpdir/usr/lib/rockchip64-linux-image/rockchip" ]; then
+	mkdir -p "$tmpdir/boot/rockchip"
+	if [ -e "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-odroid-m1.dtb" ]; then
+		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-odroid-m1.dtb" "$tmpdir/boot/rockchip/rk3568-odroid-m1.dtb"
+	fi
+fi
+if [ -e "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/overlays" ]; then
+	mkdir -p "$tmpdir/boot/rockchip/overlays";
+	cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/overlays/" "$tmpdir/boot/rockchip/";
+fi
+
 # Install the maintainer scripts
 # Note: hook scripts under /etc/kernel are also executed by official Debian
 # kernel packages, as well as kernel packages built using make-kpkg.
@@ -153,6 +167,17 @@
 	chmod 755 "$tmpdir/DEBIAN/$script"
 done
 
+	cat > $tmpdir/DEBIAN/preinst <<EOT
+#!/bin/bash
+# remove initrd
+
+set -e
+
+rm -f /boot/{initrd.img*,uInitrd} 2>/dev/null
+exit 0
+EOT
+        chmod 755 $tmpdir/DEBIAN/preinst
+
 # Build kernel header package
 (cd $srctree; find . -name Makefile\* -o -name Kconfig\* -o -name \*.pl) > "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find arch/*/include include scripts -type f -o -type l) >> "$objtree/debian/hdrsrcfiles"
@@ -172,6 +197,45 @@
 (cd $objtree; cp $KCONFIG_CONFIG $destdir/.config) # copy .config manually to be where it's expected to be
 ln -sf "/usr/src/linux-headers-$version" "$kernel_headers_dir/lib/modules/$version/build"
 rm -f "$objtree/debian/hdrsrcfiles" "$objtree/debian/hdrobjfiles"
+if [ -e headers-byteshift.patch ]; then
+	cp headers-byteshift.patch $destdir/
+	mkdir -p $kernel_headers_dir/DEBIAN
+	cat > $kernel_headers_dir/DEBIAN/postinst <<EOT
+#!/bin/bash
+# compile headers
+
+set -e
+
+clean_headers(){
+find -type f -exec touch {} +
+echo 'y' | make ARCH=arm64 M=scripts clean
+patch -p1 < headers-byteshift.patch
+rm -f headers-byteshift.patch
+echo 'y' | make ARCH=arm64 -j\$(grep -c 'processor' /proc/cpuinfo) -s scripts
+echo 'y' | make ARCH=arm64 -j\$(grep -c 'processor' /proc/cpuinfo) -s M=scripts/mod/
+if [ -e .config.old ]; then
+	rm -f .config.old;
+fi
+}
+
+cd /usr/src/linux-headers-$version
+echo -e "\e[1;37mCompiling headers\e[0m ..."
+clean_headers > /dev/null 2>&1;
+exit 0
+EOT
+	chmod 755 $kernel_headers_dir/DEBIAN/postinst
+fi
+	mkdir -p $kernel_headers_dir/DEBIAN
+	cat > $kernel_headers_dir/DEBIAN/preinst <<EOT
+#!/bin/sh
+# remove old linux headers
+
+set -e
+
+rm -fdr /usr/src/linux-headers-* > /dev/null 2>&1
+exit 0
+EOT
+        chmod 755 $kernel_headers_dir/DEBIAN/preinst
 
 if [ "$ARCH" != "um" ]; then
 	create_package "$kernel_headers_packagename" "$kernel_headers_dir"
