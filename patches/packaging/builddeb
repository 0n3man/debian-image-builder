#!/bin/sh

set -e

is_enabled() {
	grep -q "^$1=y" include/config/auto.conf
}

if_enabled_echo() {
	if is_enabled "$1"; then
		echo -n "$2"
	elif [ $# -ge 3 ]; then
		echo -n "$3"
	fi
}

create_package() {
	local pname="$1" pdir="$2"

	mkdir -m 755 -p "$pdir/DEBIAN"
	mkdir -p "$pdir/usr/share/doc/$pname"
	cp debian/copyright "$pdir/usr/share/doc/$pname/"
	cp debian/changelog "$pdir/usr/share/doc/$pname/changelog.Debian"
	gzip -9 "$pdir/usr/share/doc/$pname/changelog.Debian"
	sh -c "cd '$pdir'; find . -type f ! -path './DEBIAN/*' -printf '%P\0' \
		| xargs -r0 md5sum > DEBIAN/md5sums"

	# Fix ownership and permissions
	chown -R root:root "$pdir"
	chmod -R go-w "$pdir"
	# in case we are in a restrictive umask environment like 0077
	chmod -R a+rX "$pdir"

	# Create the package
	dpkg-gencontrol -p$pname -P"$pdir"
	dpkg-deb -Zxz --build "$pdir" ..
}

version=$KERNELRELEASE
tmpdir="$objtree/debian/tmp"
kernel_headers_dir="$objtree/debian/hdrtmp"
libc_headers_dir="$objtree/debian/headertmp"
dbg_dir="$objtree/debian/dbgtmp"
packagename=linux-image-$version
kernel_headers_packagename=linux-headers-$version
libc_headers_packagename=linux-libc-dev
dbg_packagename=$packagename-dbg

if [ "$ARCH" = "um" ] ; then
	packagename=user-mode-linux-$version
fi

# Not all arches have the same installed path in debian
# XXX: have each arch Makefile export a variable of the canonical image install
# path instead
case $ARCH in
um)
	installed_image_path="usr/bin/linux-$version"
	;;
parisc|mips|powerpc)
	installed_image_path="boot/vmlinux-$version"
	;;
*)
	installed_image_path="boot/vmlinuz-$version"
esac

BUILD_DEBUG=$(if_enabled_echo CONFIG_DEBUG_INFO Yes)

# Setup the directory structure
rm -rf "$tmpdir" "$kernel_headers_dir" "$libc_headers_dir" "$dbg_dir" $objtree/debian/files
mkdir -m 755 -p "$tmpdir/DEBIAN"
mkdir -p "$tmpdir/lib" "$tmpdir/boot"
mkdir -p "$kernel_headers_dir/lib/modules/$version/"

# Build and install the kernel
if [ "$ARCH" = "um" ] ; then
	mkdir -p "$tmpdir/usr/lib/uml/modules/$version" "$tmpdir/usr/bin" "$tmpdir/usr/share/doc/$packagename"
	$MAKE linux
	cp System.map "$tmpdir/usr/lib/uml/modules/$version/System.map"
	cp $KCONFIG_CONFIG "$tmpdir/usr/share/doc/$packagename/config"
	gzip "$tmpdir/usr/share/doc/$packagename/config"
else
	cp System.map "$tmpdir/boot/System.map-$version"
	cp $KCONFIG_CONFIG "$tmpdir/boot/config-$version"
	if [ -f arch/arm/boot/zImage ]; then
		cp arch/arm/boot/zImage "$tmpdir/boot/Image";
	fi
	if [ -f arch/arm64/boot/Image ]; then
		cp arch/arm64/boot/Image "$tmpdir/boot/Image";
	fi
	if [ -f firmware/fixup4.dat ]; then
		install -m 0644 firmware/fixup4*.dat "$tmpdir/boot";
	fi
	if [ -f firmware/start4.elf ]; then
		install -m 0644 firmware/start4*.elf "$tmpdir/boot";
	fi
	if [ -f firmware/LICENCE.broadcom ]; then
		install -m 0644 firmware/LICENCE.broadcom "$tmpdir/boot";
	fi
	if [ -f firmware/COPYING.linux ]; then
		install -m 0644 firmware/COPYING.linux "$tmpdir/boot";
	fi
fi
cp "$($MAKE -s -f $srctree/Makefile image_name)" "$tmpdir/$installed_image_path"

if is_enabled CONFIG_OF_EARLY_FLATTREE; then
	# Only some architectures with OF support have this target
	if [ -d "${srctree}/arch/$SRCARCH/boot/dts" ]; then
		$MAKE -f $srctree/Makefile INSTALL_DTBS_PATH="$tmpdir/usr/lib/$packagename" dtbs_install
	fi
fi

if is_enabled CONFIG_MODULES; then
	INSTALL_MOD_PATH="$tmpdir" $MAKE -f $srctree/Makefile modules_install
	rm -f "$tmpdir/lib/modules/$version/build"
	rm -f "$tmpdir/lib/modules/$version/source"
	if [ "$ARCH" = "um" ] ; then
		mv "$tmpdir/lib/modules/$version"/* "$tmpdir/usr/lib/uml/modules/$version/"
		rmdir "$tmpdir/lib/modules/$version"
	fi
	if [ -n "$BUILD_DEBUG" ] ; then
		for module in $(find $tmpdir/lib/modules/ -name *.ko -printf '%P\n'); do
			module=lib/modules/$module
			mkdir -p $(dirname $dbg_dir/usr/lib/debug/$module)
			# only keep debug symbols in the debug file
			$OBJCOPY --only-keep-debug $tmpdir/$module $dbg_dir/usr/lib/debug/$module
			# strip original module from debug symbols
			$OBJCOPY --strip-debug $tmpdir/$module
			# then add a link to those
			$OBJCOPY --add-gnu-debuglink=$dbg_dir/usr/lib/debug/$module $tmpdir/$module
		done

		# resign stripped modules
		if is_enabled CONFIG_MODULE_SIG_ALL; then
			INSTALL_MOD_PATH="$tmpdir" $MAKE -f $srctree/Makefile modules_sign
		fi
	fi
fi

if [ "$ARCH" != "um" ]; then
	$MAKE -f $srctree/Makefile headers
	$MAKE -f $srctree/Makefile headers_install INSTALL_HDR_PATH="$libc_headers_dir/usr"
	# move asm headers to /usr/include/<libc-machine>/asm to match the structure
	# used by Debian-based distros (to support multi-arch)
	host_arch=$(dpkg-architecture -a$(cat debian/arch) -qDEB_HOST_MULTIARCH)
	mkdir $libc_headers_dir/usr/include/$host_arch
	mv $libc_headers_dir/usr/include/asm $libc_headers_dir/usr/include/$host_arch/
fi

# Allwinner
if [ -e $tmpdir/usr/lib/sun8i-linux-image ]; then
	mkdir -p "$tmpdir/boot/allwinner"
	if [ -f $tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-nanopi-m1.dtb ]; then
		cp -r "$tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-nanopi-m1.dtb" "$tmpdir/boot/allwinner/sun8i-h3-nanopi-m1.dtb";
	fi
	if [ -f $tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-nanopi-neo.dtb ]; then
		cp -r "$tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-nanopi-neo.dtb" "$tmpdir/boot/allwinner/sun8i-h3-nanopi-neo.dtb";
	fi
	if [ -f $tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-orangepi-one.dtb ]; then
		cp -r "$tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-orangepi-one.dtb" "$tmpdir/boot/allwinner/sun8i-h3-orangepi-one.dtb";
	fi
	if [ -f $tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-orangepi-pc.dtb ]; then
		cp -r "$tmpdir/usr/lib/sun8i-linux-image/sun8i-h3-orangepi-pc.dtb" "$tmpdir/boot/allwinner/sun8i-h3-orangepi-pc.dtb";
	fi
fi
if [ -e $tmpdir/usr/lib/sun50i-linux-image/allwinner ]; then
	mkdir -p "$tmpdir/boot/allwinner"
	if [ -f $tmpdir/usr/lib/sun50i-linux-image/allwinner/sun50i-h5-libretech-all-h3-cc.dtb ]; then
		cp -r "$tmpdir/usr/lib/sun50i-linux-image/allwinner/sun50i-h5-libretech-all-h3-cc.dtb" "$tmpdir/boot/allwinner/sun50i-h5-libretech-all-h3-cc.dtb";
	fi
	if [ -f $tmpdir/usr/lib/sun50i-linux-image/allwinner/sun50i-a64-pine64-plus.dtb ]; then
		cp -r "$tmpdir/usr/lib/sun50i-linux-image/allwinner/sun50i-a64-pine64-plus.dtb" "$tmpdir/boot/allwinner/sun50i-a64-pine64-plus.dtb";
	fi
	if [ -f $tmpdir/usr/lib/sun50i-linux-image/allwinner/sun50i-h5-nanopi-neo-plus2.dtb ]; then
		cp -r "$tmpdir/usr/lib/sun50i-linux-image/allwinner/sun50i-h5-nanopi-neo-plus2.dtb" "$tmpdir/boot/allwinner/sun50i-h5-nanopi-neo-plus2.dtb";
	fi
fi
# Amlogic & Odroid
if [ -e $tmpdir/usr/lib/meson8b-linux-image ]; then
	mkdir -p "$tmpdir/boot/"
	if [ -f $tmpdir/usr/lib/meson8b-linux-image/meson8b-odroidc1.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson8b-linux-image/meson8b-odroidc1.dtb" "$tmpdir/boot/meson8b-odroidc1.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson8b-linux-image/meson8b_odroidc.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson8b-linux-image/meson8b_odroidc.dtb" "$tmpdir/boot/meson8b_odroidc.dtb";
	fi
	if [ -e $tmpdir/usr/lib/meson8b-linux-image/overlays ]; then
		mkdir -p "$tmpdir/boot/overlays";
		cp -r "$tmpdir/usr/lib/meson8b-linux-image/overlays/" "$tmpdir/boot/";
	fi
fi
if [ -e $tmpdir/usr/lib/meson64-linux-image/amlogic ]; then
	mkdir -p "$tmpdir/boot/amlogic"
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson-gxl-s905x-libretech-cc.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-gxl-s905x-libretech-cc.dtb" "$tmpdir/boot/amlogic/meson-gxl-s905x-libretech-cc.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson-sm1-bananapi-m5.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-sm1-bananapi-m5.dtb" "$tmpdir/boot/amlogic/meson-sm1-bananapi-m5.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson-sm1-odroid-c4.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-sm1-odroid-c4.dtb" "$tmpdir/boot/amlogic/meson-sm1-odroid-c4.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson-sm1-odroid-hc4.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-sm1-odroid-hc4.dtb" "$tmpdir/boot/amlogic/meson-sm1-odroid-hc4.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12b-odroid-n2.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12b-odroid-n2.dtb" "$tmpdir/boot/amlogic/meson-g12b-odroid-n2.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12b-odroid-n2-plus.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12b-odroid-n2-plus.dtb" "$tmpdir/boot/amlogic/meson-g12b-odroid-n2-plus.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12a-radxa-zero.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson-g12a-radxa-zero.dtb" "$tmpdir/boot/amlogic/meson-g12a-radxa-zero.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidc4.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidc4.dtb" "$tmpdir/boot/amlogic/meson64_odroidc4.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidhc4.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidhc4.dtb" "$tmpdir/boot/amlogic/meson64_odroidhc4.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidn2.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidn2.dtb" "$tmpdir/boot/amlogic/meson64_odroidn2.dtb";
	fi
	if [ -f $tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidn2_plus.dtb ]; then
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/meson64_odroidn2_plus.dtb" "$tmpdir/boot/amlogic/meson64_odroidn2_plus.dtb";
	fi
	if [ -e $tmpdir/usr/lib/meson64-linux-image/amlogic/overlays ]; then
		mkdir -p "$tmpdir/boot/amlogic/overlays";
		cp -r "$tmpdir/usr/lib/meson64-linux-image/amlogic/overlays/" "$tmpdir/boot/amlogic/";
	fi
fi
# Broadcom
if [ -e $tmpdir/usr/lib/raspberrypi-linux-image/broadcom ]; then
	mkdir -p "$tmpdir/boot"
	if [ -f $tmpdir/usr/lib/raspberrypi-linux-image/broadcom/bcm2711-rpi-4-b.dtb ]; then
		cp -r "$tmpdir/usr/lib/raspberrypi-linux-image/broadcom/bcm2711-rpi-4-b.dtb" "$tmpdir/boot/bcm2711-rpi-4-b.dtb";
	fi
	if [ -f $tmpdir/usr/lib/raspberrypi-linux-image/broadcom/bcm2711-rpi-400.dtb ]; then
		cp -r "$tmpdir/usr/lib/raspberrypi-linux-image/broadcom/bcm2711-rpi-400.dtb" "$tmpdir/boot/bcm2711-rpi-400.dtb";
	fi
	if [ -e $tmpdir/usr/lib/raspberrypi-linux-image/overlays ]; then
		mkdir -p "$tmpdir/boot/overlays";
		cp -r "$tmpdir/usr/lib/raspberrypi-linux-image/overlays/" "$tmpdir/boot/";
	fi
fi
# Rockchip
if [ -e $tmpdir/usr/lib/rockchip64-linux-image/rockchip ]; then
	mkdir -p "$tmpdir/boot/rockchip"
	if [ -f $tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3328-roc-cc.dtb ]; then
		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3328-roc-cc.dtb" "$tmpdir/boot/rockchip/rk3328-roc-cc.dtb";
	fi
	if [ -f $tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3328-rock64.dtb ]; then
		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3328-rock64.dtb" "$tmpdir/boot/rockchip/rk3328-rock64.dtb";
	fi
	if [ -f $tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-nanopc-t4.dtb ]; then
		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-nanopc-t4.dtb" "$tmpdir/boot/rockchip/rk3399-nanopc-t4.dtb";
	fi
	if [ -f $tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-rockpro64.dtb ]; then
		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-rockpro64.dtb" "$tmpdir/boot/rockchip/rk3399-rockpro64.dtb";
	fi
	if [ -f $tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-rockpro64-v2.dtb ]; then
		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3399-rockpro64-v2.dtb" "$tmpdir/boot/rockchip/rk3399-rockpro64-v2.dtb";
	fi
	if [ -f $tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-odroid-m1.dtb ]; then
		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-odroid-m1.dtb" "$tmpdir/boot/rockchip/rk3568-odroid-m1.dtb";
	fi
	if [ -f $tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-nanopi-r5s.dtb ]; then
		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-nanopi-r5s.dtb" "$tmpdir/boot/rockchip/rk3568-nanopi-r5s.dtb";
	fi
	if [ -f $tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-nanopi5-rev01.dtb ]; then
		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/rk3568-nanopi5-rev01.dtb" "$tmpdir/boot/rockchip/rk3568-nanopi5-rev01.dtb";
	fi
	if [ -e $tmpdir/usr/lib/rockchip64-linux-image/rockchip/overlays ]; then
		mkdir -p "$tmpdir/boot/rockchip/overlays";
		cp -r "$tmpdir/usr/lib/rockchip64-linux-image/rockchip/overlays/" "$tmpdir/boot/rockchip/";
	fi
fi
# Samsung
if [ -e $tmpdir/usr/lib/exynos-linux-image ]; then
	mkdir -p "$tmpdir/boot/samsung"
	if [ -f $tmpdir/usr/lib/exynos-linux-image/exynos5422-odroidxu4.dtb ]; then
		cp -r "$tmpdir/usr/lib/exynos-linux-image/exynos5422-odroidxu4.dtb" "$tmpdir/boot/samsung/exynos5422-odroidxu4.dtb";
	fi
	if [ -e $tmpdir/usr/lib/exynos-linux-image/overlays ]; then
		mkdir -p "$tmpdir/boot/samsung/overlays";
		cp -r "$tmpdir/usr/lib/exynos-linux-image/overlays/" "$tmpdir/boot/samsung/";
	fi
fi

# Install the maintainer scripts
debhookdir=${KDEB_HOOKDIR:-/etc/kernel}
for script in postinst postrm preinst prerm ; do
	mkdir -p "$tmpdir$debhookdir/$script.d"
	cat <<EOF > "$tmpdir/DEBIAN/$script"
#!/bin/sh

set -e

# Pass maintainer script parameters to hook scripts
export DEB_MAINT_PARAMS="\$*"

# Tell initramfs builder whether it's wanted
export INITRD=$(if_enabled_echo CONFIG_BLK_DEV_INITRD Yes No)

test -d $debhookdir/$script.d && run-parts --arg="$version" --arg="/$installed_image_path" $debhookdir/$script.d
exit 0
EOF
	chmod 755 "$tmpdir/DEBIAN/$script"
done

cat > $tmpdir/DEBIAN/preinst <<EOT
#!/bin/bash
set -e

# clean boot directory
if [ -f /boot/Image ]; then
	rm -f /boot/{Image,vmlinuz-*,System.map-*,config-*};
fi
if [ -f /boot/uInitrd ]; then
	rm -f /boot/{uInitrd,initrd.img-*};
fi
if [ -f /boot/initrd.gz ]; then
	rm -f /boot/{initrd.gz,initrd.img-*};
fi
if [ -e /boot/*.dtb ]; then
	rm -f /boot/{*.dtb,fixup4*.dat,start4*.elf,LICENCE.broadcom,COPYING.linux};
	if [ -e /boot/overlays ]; then
		rm -fdr /boot/overlays;
	fi
fi

exit 0
EOT
chmod 755 $tmpdir/DEBIAN/preinst

# Build kernel header package
(cd $srctree; find . -name Makefile\* -o -name Kconfig\* -o -name \*.pl) > "$objtree/debian/hdrsrcfiles"
(cd $srctree; find arch/*/include include scripts -type f -o -type l) >> "$objtree/debian/hdrsrcfiles"
(cd $srctree; find arch/$SRCARCH -name module.lds -o -name Kbuild.platforms -o -name Platform) >> "$objtree/debian/hdrsrcfiles"
(cd $srctree; find $(find arch/$SRCARCH -name include -o -name scripts -type d) -type f) >> "$objtree/debian/hdrsrcfiles"
if is_enabled CONFIG_STACK_VALIDATION; then
	(cd $objtree; find tools/objtool -type f -executable) >> "$objtree/debian/hdrobjfiles"
fi
(cd $objtree; find arch/$SRCARCH/include Module.symvers include scripts -type f) >> "$objtree/debian/hdrobjfiles"
if is_enabled CONFIG_GCC_PLUGINS; then
	(cd $objtree; find scripts/gcc-plugins -name \*.so -o -name gcc-common.h) >> "$objtree/debian/hdrobjfiles"
fi
destdir=$kernel_headers_dir/usr/src/linux-headers-$version
mkdir -p "$destdir"
(cd $srctree; tar -c -f - -T -) < "$objtree/debian/hdrsrcfiles" | (cd $destdir; tar -xf -)
(cd $objtree; tar -c -f - -T -) < "$objtree/debian/hdrobjfiles" | (cd $destdir; tar -xf -)
(cd $objtree; cp $KCONFIG_CONFIG $destdir/.config) # copy .config manually to be where it's expected to be
ln -sf "/usr/src/linux-headers-$version" "$kernel_headers_dir/lib/modules/$version/build"
rm -f "$objtree/debian/hdrsrcfiles" "$objtree/debian/hdrobjfiles"

# kernel headers postinst and preinst script
if [ -f headers-byteshift.patch ]; then
	cp -f "headers-byteshift.patch" "$destdir/"
	cp -f "$srctree/scripts/module.lds" "$destdir/"
	mkdir -p "$kernel_headers_dir/DEBIAN"
	cat > $kernel_headers_dir/DEBIAN/postinst <<EOT
#!/bin/bash
set -e

clean_headers(){
find -type f -exec touch {} +
if grep -w "Linux/arm" ".config"; then
	echo 'y' | make ARCH=arm M=scripts clean;
else
	echo 'y' | make M=scripts clean;
fi
patch -p1 < headers-byteshift.patch
if [ -f scripts/module.lds ]; then :; else install -m 0644 module.lds scripts/; fi
rm -f {headers-byteshift.patch,module.lds}
if grep -w "Linux/arm" ".config"; then
	echo 'y' | make ARCH=arm -j\$(grep -c 'processor' /proc/cpuinfo) -s scripts;
	echo 'y' | make ARCH=arm -j\$(grep -c 'processor' /proc/cpuinfo) -s M=scripts/mod/;
else
	echo 'y' | make -j\$(grep -c 'processor' /proc/cpuinfo) -s scripts;
	echo 'y' | make -j\$(grep -c 'processor' /proc/cpuinfo) -s M=scripts/mod/;
fi
if [ -f .config.old ]; then rm -f .config.old; fi
}

# compile headers
cd /usr/src/linux-headers-$version
echo -e "Compiling headers ..."
clean_headers > /dev/null 2>&1;

exit 0
EOT
	chmod 755 $kernel_headers_dir/DEBIAN/postinst
fi

mkdir -p $kernel_headers_dir/DEBIAN
cat > $kernel_headers_dir/DEBIAN/preinst <<EOT
#!/bin/sh
set -e

# remove old linux headers
rm -fdr /usr/src/linux-headers-* > /dev/null 2>&1

exit 0
EOT
chmod 755 $kernel_headers_dir/DEBIAN/preinst

if [ "$ARCH" != "um" ]; then
	create_package "$kernel_headers_packagename" "$kernel_headers_dir"
	create_package "$libc_headers_packagename" "$libc_headers_dir"
fi

create_package "$packagename" "$tmpdir"

if [ -n "$BUILD_DEBUG" ] ; then
	# Build debug package
	# Different tools want the image in different locations
	# perf
	mkdir -p $dbg_dir/usr/lib/debug/lib/modules/$version/
	cp vmlinux $dbg_dir/usr/lib/debug/lib/modules/$version/
	# systemtap
	mkdir -p $dbg_dir/usr/lib/debug/boot/
	ln -s ../lib/modules/$version/vmlinux $dbg_dir/usr/lib/debug/boot/vmlinux-$version
	# kdump-tools
	ln -s lib/modules/$version/vmlinux $dbg_dir/usr/lib/debug/vmlinux-$version
	create_package "$dbg_packagename" "$dbg_dir"
fi

exit 0
