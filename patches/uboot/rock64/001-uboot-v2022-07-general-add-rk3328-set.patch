diff -Naur a/arch/arm/dts/rk3328.dtsi b/arch/arm/dts/rk3328.dtsi
--- a/arch/arm/dts/rk3328.dtsi	2022-07-11 09:42:58.000000000 -0400
+++ b/arch/arm/dts/rk3328.dtsi	2022-07-28 21:57:34.561795912 -0400
@@ -856,6 +856,8 @@
 		clocks = <&cru HCLK_SDMMC>, <&cru SCLK_SDMMC>,
 			 <&cru SCLK_SDMMC_DRV>, <&cru SCLK_SDMMC_SAMPLE>;
 		clock-names = "biu", "ciu", "ciu-drive", "ciu-sample";
+		resets = <&cru SRST_MMC0>;
+		reset-names = "reset";
 		fifo-depth = <0x100>;
 		max-frequency = <150000000>;
 		status = "disabled";
@@ -868,6 +870,8 @@
 		clocks = <&cru HCLK_SDIO>, <&cru SCLK_SDIO>,
 			 <&cru SCLK_SDIO_DRV>, <&cru SCLK_SDIO_SAMPLE>;
 		clock-names = "biu", "ciu", "ciu-drive", "ciu-sample";
+		resets = <&cru SRST_SDIO>;
+		reset-names = "reset";
 		fifo-depth = <0x100>;
 		max-frequency = <150000000>;
 		status = "disabled";
@@ -880,8 +884,25 @@
 		clocks = <&cru HCLK_EMMC>, <&cru SCLK_EMMC>,
 			 <&cru SCLK_EMMC_DRV>, <&cru SCLK_EMMC_SAMPLE>;
 		clock-names = "biu", "ciu", "ciu-drive", "ciu-sample";
+		resets = <&cru SRST_EMMC>;
+		reset-names = "reset";
 		fifo-depth = <0x100>;
 		max-frequency = <150000000>;
+
+		status = "disabled";
+	};
+
+	sdmmc_ext: dwmmc@ff5f0000 {
+		compatible = "rockchip,rk3328-dw-mshc", "rockchip,rk3288-dw-mshc";
+		reg = <0x0 0xff5f0000 0x0 0x4000>;
+		interrupts = <GIC_SPI 4 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru HCLK_SDMMC_EXT>, <&cru SCLK_SDMMC_EXT>,
+			 <&cru SCLK_SDMMC_EXT_DRV>, <&cru SCLK_SDMMC_EXT_SAMPLE>;
+		clock-names = "biu", "ciu", "ciu-drive", "ciu-sample";
+		fifo-depth = <0x100>;
+		max-frequency = <150000000>;
+		resets = <&cru SRST_SDMMCEXT>;
+		reset-names = "reset";
 		status = "disabled";
 	};
 
diff -Naur a/arch/arm/mach-rockchip/boot_mode.c b/arch/arm/mach-rockchip/boot_mode.c
--- a/arch/arm/mach-rockchip/boot_mode.c	2022-07-11 09:42:58.000000000 -0400
+++ b/arch/arm/mach-rockchip/boot_mode.c	2022-07-28 21:57:34.552796038 -0400
@@ -7,7 +7,10 @@
 #include <adc.h>
 #include <command.h>
 #include <env.h>
+#include <led.h>
 #include <log.h>
+#include <mmc.h>
+#include <linux/delay.h>
 #include <asm/io.h>
 #include <asm/arch-rockchip/boot_mode.h>
 #include <dm/device.h>
@@ -70,13 +73,158 @@
 		return false;
 }
 
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY)
+#define RECOVERY_LED_BY_LABEL(dev) led_get_by_label(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_LED, dev)
+void rockchip_blink_recovery_led(int times)
+{
+	struct udevice *dev;
+	RECOVERY_LED_BY_LABEL(&dev);
+	for (int i = 0; i < times; ++i) {
+		led_set_state(dev, LEDST_ON);
+		mdelay(100);
+		led_set_state(dev, LEDST_OFF);
+		mdelay(100);
+	}
+}
+
+int rockchip_dnl_mode(int num_modes)
+{
+	int mode = 0;
+	const char *mode_names[5] = {
+		"none",
+		"ums",
+		"rockusb",
+		"fastboot",
+		"maskrom"
+	};
+
+	const int modes_enabled[5] = {
+		1,
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_UMS)
+		1,
+#else
+		0,
+#endif
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_ROCKUSB)
+		1,
+#else
+		0,
+#endif
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_FASTBOOT)
+		1,
+#else
+		0,
+#endif
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_MASKROM)
+		1,
+#else
+		0,
+#endif
+	};
+
+	while(mode < num_modes) {
+		++mode;
+
+		if (modes_enabled[mode]) {
+			printf("rockchip_dnl_mode = %s mode\n", mode_names[mode]);
+			rockchip_blink_recovery_led(mode);
+
+			// return early
+	 		if (mode == num_modes) {
+	 			goto end;
+	 		}
+
+			// wait 2 seconds
+			for (int i = 0; i < 100; ++i) {
+				if (!rockchip_dnl_key_pressed()) {
+					goto end;
+				}
+				mdelay(20);
+			}
+		}
+	}
+
+end:
+	return mode;
+}
+
+__weak void rockchip_prepare_download_mode(void)
+{
+}
+
+int rockchip_has_mmc_device(int devnum)
+{
+	struct mmc *mmc;
+	mmc = find_mmc_device(devnum);
+	if (!mmc || mmc_init(mmc))
+		return 0;
+	else
+		return 1;
+}
+#endif
+
 void rockchip_dnl_mode_check(void)
 {
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY)
+	int mmc_device = 0;
+	int ret = 0;
+	char cmd[32];
+
+	if (!rockchip_dnl_key_pressed()) {
+		return 0;
+	}
+
+	if (rockchip_has_mmc_device(0)) {
+		mmc_device = 0;
+	} else if (rockchip_has_mmc_device(1)) {
+		mmc_device = 1;
+	} else {
+		printf("no mmc device suitable for download mode!\n");
+		return 0;
+	}
+
+	printf("using mmc%d device for download mode\n", mmc_device);
+
+	switch(rockchip_dnl_mode(4)) {
+	case 0:
+		return;
+
+	case 1:
+		printf("entering ums mode...\n");
+		rockchip_prepare_download_mode();
+		sprintf(cmd, "ums 0 mmc %d", mmc_device);
+		cli_simple_run_command(cmd, 0);
+		break;
+
+	case 2:
+		printf("entering rockusb mode...\n");
+		rockchip_prepare_download_mode();
+		sprintf(cmd, "rockusb 0 mmc %d", mmc_device);
+		cli_simple_run_command(cmd, 0);
+		break;
+
+	case 3:
+		printf("entering fastboot mode...\n");
+		rockchip_prepare_download_mode();
+		sprintf(cmd, "mmc dev %d; fastboot usb 0", mmc_device);
+		cli_simple_run_command(cmd, 0);
+		break;
+
+	case 4:
+		printf("entering maskrom mode...\n");
+		rockchip_prepare_download_mode();
+		break;
+	}
+
+	set_back_to_bootrom_dnl_flag();
+	do_reset(NULL, 0, 0, NULL);
+#else
 	if (rockchip_dnl_key_pressed()) {
 		printf("download key pressed, entering download mode...");
 		set_back_to_bootrom_dnl_flag();
 		do_reset(NULL, 0, 0, NULL);
 	}
+#endif
 }
 
 int setup_boot_mode(void)
diff -Naur a/arch/arm/mach-rockchip/Kconfig b/arch/arm/mach-rockchip/Kconfig
--- a/arch/arm/mach-rockchip/Kconfig	2022-07-11 09:42:58.000000000 -0400
+++ b/arch/arm/mach-rockchip/Kconfig	2022-07-28 21:57:34.552796038 -0400
@@ -435,6 +435,31 @@
 config LNX_KRNL_IMG_TEXT_OFFSET_BASE
 	default SYS_TEXT_BASE
 
+config ROCKCHIP_ADVANCED_RECOVERY
+	bool "Advanced recovery button for Rockchip boards"
+	default n
+
+config ROCKCHIP_ADVANCED_RECOVERY_LED
+	string "Advanced recovery button for Rockchip boards - toggled led label"
+	depends on ROCKCHIP_ADVANCED_RECOVERY
+
+config ROCKCHIP_ADVANCED_RECOVERY_UMS
+	bool "Advanced recovery for Rockchip boards - UMS support"
+	depends on ROCKCHIP_ADVANCED_RECOVERY
+	depends on CMD_USB_MASS_STORAGE
+	default y if ROCKCHIP_ADVANCED_RECOVERY
+
+config ROCKCHIP_ADVANCED_RECOVERY_ROCKUSB
+	bool "Advanced recovery for Rockchip boards - ROCKUSB support"
+	depends on ROCKCHIP_ADVANCED_RECOVERY
+	depends on CMD_ROCKUSB
+	default y if ROCKCHIP_ADVANCED_RECOVERY
+
+config ROCKCHIP_ADVANCED_RECOVERY_MASKROM
+	bool "Advanced recovery for Rockchip boards - MASKROM support"
+	depends on ROCKCHIP_ADVANCED_RECOVERY
+	default y if ROCKCHIP_ADVANCED_RECOVERY
+
 source "arch/arm/mach-rockchip/px30/Kconfig"
 source "arch/arm/mach-rockchip/rk3036/Kconfig"
 source "arch/arm/mach-rockchip/rk3066/Kconfig"
diff -Naur a/drivers/misc/rockchip-efuse.c b/drivers/misc/rockchip-efuse.c
--- a/drivers/misc/rockchip-efuse.c	2022-07-11 09:42:58.000000000 -0400
+++ b/drivers/misc/rockchip-efuse.c	2022-07-28 21:57:34.555795996 -0400
@@ -13,8 +13,18 @@
 #include <dm.h>
 #include <linux/bitops.h>
 #include <linux/delay.h>
+#include <malloc.h>
 #include <misc.h>
 
+#define RK3328_INT_STATUS	0x0018
+#define RK3328_DOUT		0x0020
+#define RK3328_AUTO_CTRL	0x0024
+#define RK3328_INT_FINISH	BIT(0)
+#define RK3328_AUTO_ENB		BIT(0)
+#define RK3328_AUTO_RD		BIT(1)
+#define RK3328_NO_SECURE_BYTES	32
+#define RK3328_SECURE_BYTES	96
+
 #define RK3399_A_SHIFT          16
 #define RK3399_A_MASK           0x3ff
 #define RK3399_NFUSES           32
@@ -27,6 +37,9 @@
 #define RK3399_STROBE           BIT(1)
 #define RK3399_CSB              BIT(0)
 
+typedef int (*EFUSE_READ)(struct udevice *dev, int offset, void *buf,
+			  int size);
+
 struct rockchip_efuse_regs {
 	u32 ctrl;      /* 0x00  efuse control register */
 	u32 dout;      /* 0x04  efuse data out register */
@@ -35,6 +48,10 @@
 	u32 jtag_pass; /* 0x10  JTAG password */
 	u32 strobe_finish_ctrl;
 		       /* 0x14	efuse strobe finish control register */
+	u32 int_status;/* 0x18 */
+	u32 reserved;  /* 0x1c */
+	u32 dout2;     /* 0x20 */
+	u32 auto_ctrl; /* 0x24 */
 };
 
 struct rockchip_efuse_plat {
@@ -83,6 +100,57 @@
 );
 #endif
 
+static int rockchip_rk3328_efuse_read(struct udevice *dev, int offset,
+				      void *buf, int size)
+{
+	struct rockchip_efuse_plat *plat = dev_get_plat(dev);
+	struct rockchip_efuse_regs *efuse =
+		(struct rockchip_efuse_regs *)plat->base;
+	unsigned int addr_start, addr_end, addr_offset, addr_len;
+	u32 out_value, status;
+	u8 *buffer;
+	int ret = 0, i = 0, j = 0;
+
+	/* Max non-secure Byte */
+	if (size > RK3328_NO_SECURE_BYTES)
+		size = RK3328_NO_SECURE_BYTES;
+
+	/* 128 Byte efuse, 96 Byte for secure, 32 Byte for non-secure */
+	offset += RK3328_SECURE_BYTES;
+	addr_start = rounddown(offset, RK3399_BYTES_PER_FUSE) /
+			       RK3399_BYTES_PER_FUSE;
+	addr_end = roundup(offset + size, RK3399_BYTES_PER_FUSE) /
+			   RK3399_BYTES_PER_FUSE;
+	addr_offset = offset % RK3399_BYTES_PER_FUSE;
+	addr_len = addr_end - addr_start;
+
+	buffer = calloc(1, sizeof(*buffer) * addr_len * RK3399_BYTES_PER_FUSE);
+	if (!buffer)
+		return -ENOMEM;
+
+	for (j = 0; j < addr_len; j++) {
+		writel(RK3328_AUTO_RD | RK3328_AUTO_ENB |
+		       ((addr_start++ & RK3399_A_MASK) << RK3399_A_SHIFT),
+		       &efuse->auto_ctrl);
+		udelay(5);
+		status = readl(&efuse->int_status);
+		if (!(status & RK3328_INT_FINISH)) {
+			ret = -EIO;
+			goto err;
+		}
+		out_value = readl(&efuse->dout2);
+		writel(RK3328_INT_FINISH, &efuse->int_status);
+
+		memcpy(&buffer[i], &out_value, RK3399_BYTES_PER_FUSE);
+		i += RK3399_BYTES_PER_FUSE;
+	}
+	memcpy(buf, buffer + addr_offset, size);
+err:
+	free(buffer);
+
+	return ret;
+}
+
 static int rockchip_rk3399_efuse_read(struct udevice *dev, int offset,
 				      void *buf, int size)
 {
@@ -130,7 +198,13 @@
 static int rockchip_efuse_read(struct udevice *dev, int offset,
 			       void *buf, int size)
 {
-	return rockchip_rk3399_efuse_read(dev, offset, buf, size);
+	EFUSE_READ efuse_read = NULL;
+
+	efuse_read = (EFUSE_READ)dev_get_driver_data(dev);
+	if (!efuse_read)
+		return -EINVAL;
+
+	return (*efuse_read)(dev, offset, buf, size);
 }
 
 static const struct misc_ops rockchip_efuse_ops = {
@@ -146,7 +220,14 @@
 }
 
 static const struct udevice_id rockchip_efuse_ids[] = {
-	{ .compatible = "rockchip,rk3399-efuse" },
+	{
+		.compatible = "rockchip,rk3328-efuse",
+		.data = (ulong)&rockchip_rk3328_efuse_read,
+	},
+	{
+		.compatible = "rockchip,rk3399-efuse",
+		.data = (ulong)&rockchip_rk3399_efuse_read,
+	},
 	{}
 };
 
diff -Naur a/drivers/mmc/rockchip_dw_mmc.c b/drivers/mmc/rockchip_dw_mmc.c
--- a/drivers/mmc/rockchip_dw_mmc.c	2022-07-11 09:42:58.000000000 -0400
+++ b/drivers/mmc/rockchip_dw_mmc.c	2022-07-28 21:57:34.565795857 -0400
@@ -74,7 +74,11 @@
 
 	if (priv->fifo_depth < 0)
 		return -EINVAL;
+#ifdef CONFIG_SPL_BUILD
+	priv->fifo_mode = true; // always force fifo mode
+#else
 	priv->fifo_mode = dev_read_bool(dev, "fifo-mode");
+#endif
 
 #ifdef CONFIG_SPL_BUILD
 	if (!priv->fifo_mode)
diff -Naur a/drivers/mtd/spi/Kconfig b/drivers/mtd/spi/Kconfig
--- a/drivers/mtd/spi/Kconfig	2022-07-11 09:42:58.000000000 -0400
+++ b/drivers/mtd/spi/Kconfig	2022-07-28 21:57:34.549796079 -0400
@@ -202,6 +202,12 @@
 	  Add support for various XTX (XTX Technology Limited)
 	  SPI flash chips (XT25xxx).
 
+config SPI_FLASH_XTX
+	bool "XTX SPI flash support"
+	help
+	  Add support for various XTX (Shenzhen Xin Tian Xia Tech)
+	  SPI flash chips (XM25xxx)
+
 endif
 
 config SPI_FLASH_USE_4K_SECTORS
diff -Naur a/drivers/mtd/spi/spi-nor-ids.c b/drivers/mtd/spi/spi-nor-ids.c
--- a/drivers/mtd/spi/spi-nor-ids.c	2022-07-11 09:42:58.000000000 -0400
+++ b/drivers/mtd/spi/spi-nor-ids.c	2022-07-28 21:57:34.549796079 -0400
@@ -386,6 +386,11 @@
 	{ INFO("XM25QH128A", 0x207018, 0, 64 * 1024, 256, SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
 #endif
 #ifdef CONFIG_SPI_FLASH_XTX
+	/* XTX (Shenzhen Xin Tian Xia Tech) */
+	{ INFO("XT25F32B", 0x0b4016, 0, 64 * 1024, 64, SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+	{ INFO("XT25F128B", 0x0b4018, 0, 64 * 1024, 256, SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+#endif
+#ifdef CONFIG_SPI_FLASH_XTX
 	/* XTX Technology (Shenzhen) Limited */
 	{ INFO("xt25f128b", 0x0b4018, 0, 64 * 1024, 256, SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
 #endif
diff -Naur a/include/configs/rk3328_common.h b/include/configs/rk3328_common.h
--- a/include/configs/rk3328_common.h	2022-07-11 09:42:58.000000000 -0400
+++ b/include/configs/rk3328_common.h	2022-07-28 21:57:34.555795996 -0400
@@ -18,6 +18,10 @@
 #define CONFIG_SPL_BSS_START_ADDR	0x2000000
 #define CONFIG_SPL_BSS_MAX_SIZE		0x2000
 
+#define CONFIG_MISC 1
+#define CONFIG_MISC_INIT_R 1
+#define CONFIG_ROCKCHIP_EFUSE 1
+
 #define CONFIG_SYS_BOOTM_LEN	(64 << 20)	/* 64M */
 
 /* FAT sd card locations. */
