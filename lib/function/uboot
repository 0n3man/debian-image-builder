#!/bin/bash

sources_dir (){
mkdir -p ${SRC}
cd ${SRC}
if [[ -d "u-boot-${UBOOT_VERSION}" ]]; then
	rm -fdr u-boot-${UBOOT_VERSION}
fi
rm -fdr {imx-mkimage,u-boot}
}

report_error (){
echo "Something went wrong? Please report."
echo ""
exit 0
}

download_uboot (){
if [[ `wget -S --spider https://github.com/pyavitz/debian-image-builder/releases/download/u-boot/u-boot-${UBOOT_VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo -en "${WHT}u-boot-${UBOOT_VERSION}${FIN} "
	echo -en "${PNK}[${FIN}${WHT}downloading${FIN}${PNK}]${FIN} "
	aria2c -q https://github.com/pyavitz/debian-image-builder/releases/download/u-boot/u-boot-${UBOOT_VERSION}.tar.gz
	echo_bdone
else
	download_uboot_denx
fi
}

download_uboot_denx (){
if [[ `wget -S --spider https://source.denx.de/u-boot/u-boot/-/archive/${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo -en "${WHT}u-boot-${UBOOT_VERSION}${FIN} "
	echo -en "${PNK}[${FIN}${WHT}downloading${FIN}${PNK}]${FIN} "
	aria2c -q https://source.denx.de/u-boot/u-boot/-/archive/${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz
	echo_bdone
else
	echo ""
	echo -e "${WHT}Version selected is not available.${FIN}"
	exit 0
fi
}

download (){
if [[ -f "u-boot-${UBOOT_VERSION}.tar.gz" ]]; then
	echo -en "${WHT}u-boot-${UBOOT_VERSION}${FIN} "
	echo -e "${PNK}[${FIN}${YLW}found${FIN}${PNK}]${FIN}"
else
	download_uboot
fi
}

extract (){
echo ""
echo_extract
if [[ -f "u-boot-${UBOOT_VERSION}.tar.gz" ]]; then
	pv u-boot-${UBOOT_VERSION}.tar.gz | tar -xzf - -C .
	mv -f u-boot-${UBOOT_VERSION} u-boot
else
	echo -e "Missing u-boot-${UBOOT_VERSION} tarball."
	exit 0
fi
}

make_defconfig (){
export ARCH=${ARCH}
if [ $CROSSCOMPILE -eq 1 ]; then
	echo -e "${GRN}  CC${FIN}"
	make -j${CORES} CC="${CROSS}" CROSS_COMPILE=${CROSS_COMPILE} ${UBOOT_DEFCONFIG}
else
	echo -e "${GRN}  NC${FIN}"
	make -j${CORES} CC="${NATIVE}" ${UBOOT_DEFCONFIG}
fi
}

menuconfig (){
if [ $CROSSCOMPILE -eq 1 ]; then
	echo -e "${GRN}  CC${FIN}"
	make -j${CORES} CC="${CROSS}" CROSS_COMPILE=${CROSS_COMPILE} menuconfig
else
	echo -e "${GRN}  NC${FIN}"
	make -j${CORES} CC="${NATIVE}" menuconfig
fi
}

compile (){
echo ""
echo_cuboot
if [[ "$FAMILY_EXT" == "imx8" ]]; then
	export ATF_LOAD_ADDR=0x920000
fi
if [ $CROSSCOMPILE -eq 1 ]; then
	echo -e "${GRN}  CC${FIN}"
	echo -e "  GCC     ${CROSS_COMPILE}${COMPILER}"
	make -j${CORES} CC="${CROSS}" CROSS_COMPILE=${CROSS_COMPILE}
	if [[ "$FAMILY_EXT" == "imx8" ]]; then
		make -j${CORES} CC="${CROSS}" CROSS_COMPILE=${CROSS_COMPILE} flash.bin
	fi
else
	echo -e "${GRN}  NC${FIN}"
	echo -e "  GCC     ${COMPILER}"
	make -j${CORES} CC="${NATIVE}"
	if [[ "$FAMILY_EXT" == "imx8" ]]; then
		make -j${CORES} CC="${NATIVE}" flash.bin
	fi
fi
}

uboot_run (){
download
extract
if [[ -d "u-boot" ]]; then cd u-boot; else report_error; fi
# lib/function/atf
if [[ "$FAMILY" == "allwinner" || "$FAMILY_EXT" == "imx8" || "$FAMILY" == "rockchip" ]]; then
	atf_bl31
fi
# lib/function/patching
uboot_patching
# lib/function/modconfig
uboot_configs
# end
make_defconfig
if [ $MENUCONFIG -eq 1 ]; then
	menuconfig
fi
compile
}

# allwinner
allwinner_uboot_run (){
sources_dir
if [[ "$ARCH" == "arm64" ]]; then
	arm_trusted_firmware
fi
uboot_run
if [[ -f "u-boot-sunxi-with-spl.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f u-boot-sunxi-with-spl.bin ../../${OUTPUT}/
	uboot_packaging
	echo ""
else
	report_error
fi
}

# amlogic
amlogic_uboot_run (){
sources_dir
download_fip
uboot_run
if [[ ! -z $RUN_FIP ]] && [[ -f "u-boot.bin" ]]; then
	if [[ "$BOARD" == "x96air" ]]; then
		mkdir -p ../../${OUTPUT}/
		cp -f u-boot.bin ../../${OUTPUT}/chainload.bin
	fi
	echo -en "Firmware Image Package ${PNK}[${FIN}${WHT}"${RUN_FIP}"${FIN}${PNK}]${FIN} "
	echo -e "${PNK}[${FIN}${WHT}"${BOARD_FIP}"${FIN}${PNK}]${FIN}"
	${RUN_FIP}
else
	report_error
fi
if [[ -f "fip/u-boot.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f fip/u-boot.bin ../../${OUTPUT}
	cp -f fip/u-boot.bin.sd.bin ../../${OUTPUT}
	uboot_packaging
	echo ""
else
	report_error
fi
}

# broadcom
broadcom_uboot_run (){
sources_dir
uboot_run
if [[ -f "u-boot.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f u-boot.bin ../../${OUTPUT}/
	uboot_packaging
	echo ""
else
	report_error
fi
}

# freescale
freescale_uboot_run (){
sources_dir
if [[ "$ARCH" == "arm64" ]]; then
	arm_trusted_firmware
	if [[ -f "firmware-imx-8.17.bin" ]] && [[ -d "firmware-imx-8.17" ]]; then
		echo -en "${WHT}firmware-imx${FIN} "
		echo -e "${PNK}[${FIN}${YLW}found${FIN}${PNK}]${FIN}"
	else
		rm -fdr firmware-imx-8.17*
		cp -f ../files/firmware/imx8/u-boot-firmware-imx-8.17.bin firmware-imx-8.17.bin
		chmod +x firmware-imx-8.17.bin
		bash firmware-imx-8.17.bin --auto-accept
	fi
fi
uboot_run
if [[ "$ARCH" == "arm" ]]; then
	if [[ -f "u-boot.img" ]]; then
		mkdir -p ../../${OUTPUT}
		cp -f SPL ../../${OUTPUT}/sploader.bin
		cp -f u-boot.img ../../${OUTPUT}/u-boot.bin
		uboot_packaging
		echo ""
	else
		report_error
	fi
fi
if [[ "$ARCH" == "arm64" ]]; then
	if [[ -f "flash.bin" ]]; then
		mkdir -p ../../${OUTPUT}
		cp -f flash.bin u-boot.bin
		cp -f u-boot.bin ../../${OUTPUT}/
		uboot_packaging
		echo ""
	else
		report_error
	fi
fi
}

# rockchip
rockchip_uboot_run (){
sources_dir
if [[ "$FAMILY_EXT" == "rk3328" || "$FAMILY_EXT" == "rk3399" ]]; then
	arm_trusted_firmware
fi
uboot_run
if [[ -f "idbloader.img" ]]; then
	mkdir -p ../../${OUTPUT}
	if [[ "$ARCH" == "arm" ]]; then
		cp -f idbloader.img ../../${OUTPUT}/idbloader.bin
		cp -f u-boot.bin u-boot.itb
		cp -f u-boot.itb ../../${OUTPUT}/
		uboot_packaging
		echo ""
	else
		cp -f idbloader.img ../../${OUTPUT}/idbloader.bin
		cp -f u-boot.itb ../../${OUTPUT}/
		uboot_packaging
		echo ""
	fi
else
	report_error
fi
}

# samsung
samsung_uboot_run (){
sources_dir
uboot_run
if [[ -f "u-boot.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f u-boot.bin ../../${OUTPUT}/
	if [[ "$BOARD" == "odroidxu4" ]]; then
		cp -f ../../${PRECOMPILED_UBOOT_DIR}/bl1.bin ../../${OUTPUT}/
		cp -f ../../${PRECOMPILED_UBOOT_DIR}/bl2.bin ../../${OUTPUT}/
		cp -f ../../${PRECOMPILED_UBOOT_DIR}/tzsw.bin ../../${OUTPUT}/
	fi
	uboot_packaging
	echo ""
else
	report_error
fi
}
