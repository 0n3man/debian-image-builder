#!/bin/bash

uboot-source(){
mkdir -p ${SRC}
if [[ -f "board.txt" ]]; then
	# I don't think this is needed
	cp -f board.txt ${SRC}/
fi
cd ${SRC}
if [[ -d "u-boot-${UBOOT_VERSION}" ]]; then
	rm -fdr u-boot-${UBOOT_VERSION}
fi
rm -fdr {amlogic-boot-fip-master,imx-mkimage,rkbin-master,blobs/amlogic-u-boot,u-boot}
}

uboot_search(){
if [[ `wget -S --spider https://github.com/pyavitz/debian-image-builder/releases/download/u-boot/u-boot-${UBOOT_VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo -en "${WHT}u-boot-${UBOOT_VERSION}${FIN} "
	echo -en "${PNK}[${FIN}${WHT}downloading${FIN}${PNK}]${FIN} "
	aria2c -q https://github.com/pyavitz/debian-image-builder/releases/download/u-boot/u-boot-${UBOOT_VERSION}.tar.gz
	echo_bdone
else
	uboot_searching
fi
}

uboot_searching(){
if [[ `wget -S --spider https://source.denx.de/u-boot/u-boot/-/archive/${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo -en "${WHT}u-boot-${UBOOT_VERSION}${FIN} "
	echo -en "${PNK}[${FIN}${WHT}downloading${FIN}${PNK}]${FIN} "
	aria2c -q https://source.denx.de/u-boot/u-boot/-/archive/${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz
	echo_bdone
else
	echo ""
	echo -e "${WHT}Version selected is not available.${FIN}"
	exit 0
fi
}

crust_firmware(){
# https://github.com/crust-firmware/crust
# apt install gcc-or1k-elf
# The package isn't currently available in the Debian Bullseye repo.
# For the time being we will use precompiled binaries.
if [[ "$SERIES" == "sun50i-a64" || "$SERIES" == "sun50i-h5" ]]; then
	cp ../../files/boot/crust/${SERIES}-scp.bin scp.bin
fi
}

report_atf_error (){
echo "Missing ${ATF_PLAT} bl31 blob. Please report build errors."
echo ""
exit 0
}

atf_function(){ # place bl31 file.
if [[ "$FAMILY" == "allwinner" ]] && [[ "$ARCH" == "arm64" ]]; then
	if [[ -f "../arm-trusted-firmware/build/${ATF_PLAT}/debug/bl31.bin" ]]; then
		cp ../arm-trusted-firmware/build/${ATF_PLAT}/debug/bl31.bin bl31.bin
	else
		report_atf_error
	fi
	crust_firmware
fi
if [[ "$FAMILY_EXT" == "imx8" ]]; then
	if [[ -f "../arm-trusted-firmware/build/${ATF_PLAT}/release/bl31.bin" ]]; then
		cp ../arm-trusted-firmware/build/${ATF_PLAT}/release/bl31.bin bl31.bin
	else
		report_atf_error
	fi
	cp ../firmware-imx-8.17/firmware/ddr/synopsys/lpddr4*.bin .
	cp ../firmware-imx-8.17/firmware/hdmi/cadence/signed_hdmi_imx8m.bin .
	cp ../firmware-imx-8.17/firmware/hdmi/cadence/signed_dp_imx8m.bin .
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	if [[ "$FAMILY_EXT" == "rk3328" || "$FAMILY_EXT" == "rk3399" ]]; then
		if [[ -f "../arm-trusted-firmware/build/${ATF_PLAT}/release/bl31/bl31.elf" ]]; then
			cp ../arm-trusted-firmware/build/${ATF_PLAT}/release/bl31/bl31.elf bl31.elf
			cp ../arm-trusted-firmware/build/${ATF_PLAT}/release/bl31/bl31.elf atf-bl31
		else
			report_atf_error
		fi
	fi
	if [[ "$FAMILY_EXT" == "rk356x" ]]; then
		RK35="../../files/boot/rk35"
		if [[ -f "${RK35}/${RKBIN_ELF}" ]] && [[ -f "${RK35}/${RKBIN_RAM}" ]]; then
			cp -f ${RK35}/${RKBIN_ELF} bl31.elf
			cp -f ${RK35}/${RKBIN_ELF} atf-bl31
			cp -f ${RK35}/${RKBIN_RAM} .
			cp -f ${RKBIN_RAM} ram_init.bin
		else
			report_atf_error
		fi
		if [[ "$UBOOT_VERSION" == "v2023.07.02" ]]; then
			#export BL31="bl31.elf"
			export ROCKCHIP_TPL="${RKBIN_RAM}"
		fi
	fi
fi
}

u-boot(){
if [[ -f "u-boot-${UBOOT_VERSION}.tar.gz" ]]; then
	echo -en "${WHT}u-boot-${UBOOT_VERSION}${FIN} "
	echo -e "${PNK}[${FIN}${YLW}found${FIN}${PNK}]${FIN}"
else
	uboot_search
fi
# extract
echo ""
echo_extract
if [[ -f "u-boot-${UBOOT_VERSION}.tar.gz" ]]; then
	pv u-boot-${UBOOT_VERSION}.tar.gz | tar -xzf - -C .
	mv -f u-boot-${UBOOT_VERSION} u-boot
else
	echo -e "Missing u-boot-${UBOOT_VERSION} tarball."
	exit 0
fi
cp board.txt u-boot/
cd u-boot
# arm trusted firmware
atf_function
# patching
uboot_patching
# make defconfig
export ARCH=${ARCH}
uboot_configs
if [ $CROSSCOMPILE -eq 1 ]; then
	echo -e "${GRN}  CC${FIN}"
	make -j${CORES} CC=${CROSS} CROSS_COMPILE=${CROSS_COMPILE} ${UBOOT_DEFCONFIG}
else
	echo -e "${GRN}  NC${FIN}"
	make -j${CORES} CC=${NATIVE} ${UBOOT_DEFCONFIG}
fi
# menuconfig
if [ $MENUCONFIG -eq 1 ]; then
	if [ $CROSSCOMPILE -eq 1 ]; then
		echo -e "${GRN}  CC${FIN}"
		make -j${CORES} CC=${CROSS} CROSS_COMPILE=${CROSS_COMPILE} menuconfig
	else
		echo -e "${GRN}  NC${FIN}"
		make -j${CORES} CC=${NATIVE} menuconfig
	fi
fi
# compile
echo ""
echo_cuboot
if [[ "$FAMILY_EXT" == "imx8" ]]; then
	export ATF_LOAD_ADDR=0x920000
fi
if [ $CROSSCOMPILE -eq 1 ]; then
	echo -e "${GRN}  CC${FIN}"
	echo -e "  GCC     ${DEST}/${COMPILER}"
	make -j${CORES} CC=${CROSS} CROSS_COMPILE=${CROSS_COMPILE}
	if [[ "$FAMILY_EXT" == "imx8" ]]; then
		make -j${CORES} CC=${CROSS} CROSS_COMPILE=${CROSS_COMPILE} flash.bin
	fi
else
	echo -e "${GRN}  NC${FIN}"
	echo -e "  GCC     ${DEST}/${COMPILER}"
	make -j${CORES} CC=${NATIVE}
	if [[ "$FAMILY_EXT" == "imx8" ]]; then
		make -j${CORES} CC=${NATIVE} flash.bin
	fi
fi
}

report_error (){
echo "Something went wrong? Please report."
echo ""
exit 0
}

# allwinner
allwinner-uboot-string(){
uboot-source
if [[ "$ARCH" == "arm64" ]]; then
	arm-trusted-firmware
fi
u-boot
if [[ -f "u-boot-sunxi-with-spl.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f u-boot-sunxi-with-spl.bin ../../${OUTPUT}/
	uboot_packaging
	echo ""
else
	report_error
fi
}

# amlogic
amlogic-uboot-string(){
uboot-source
amlogic-boot-fips
u-boot
if [[ ! -z $RUN_FIP ]] && [[ -f "u-boot.bin" ]]; then
	if [[ "$BOARD" == "x96air" ]]; then
		cp -f u-boot.bin ../../${OUTPUT}/chainload.bin
	fi
	echo "$DEFAULT_MOTD : Firmware Image Package" | sed 's/ :/:/g'
	${RUN_FIP}
else
	report_error
fi
if [[ -f "fip/u-boot.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f fip/u-boot.bin ../../${OUTPUT}
	cp -f fip/u-boot.bin.sd.bin ../../${OUTPUT}
	uboot_packaging
	echo ""
else
	report_error
fi
}

# broadcom
broadcom-uboot-string(){
uboot-source
u-boot
if [[ -f "u-boot.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f u-boot.bin ../../${OUTPUT}/
	uboot_packaging
	echo ""
else
	report_error
fi
}

# freescale
freescale-uboot-string(){
uboot-source
if [[ "$ARCH" == "arm64" ]]; then
	arm-trusted-firmware
	if [[ -f "firmware-imx-8.17.bin" ]] && [[ -d "firmware-imx-8.17" ]]; then
		echo -en "${WHT}firmware-imx${FIN} "
		echo -e "${PNK}[${FIN}${YLW}found${FIN}${PNK}]${FIN}"
	else
		rm -fdr firmware-imx-8.17*
		cp -f ../files/firmware/imx8/u-boot-firmware-imx-8.17.bin firmware-imx-8.17.bin
		chmod +x firmware-imx-8.17.bin
		bash firmware-imx-8.17.bin --auto-accept
	fi
fi
u-boot
if [[ "$ARCH" == "arm" ]]; then
	if [[ -f "u-boot.img" ]]; then
		mkdir -p ../../${OUTPUT}
		cp -f SPL ../../${OUTPUT}/sploader.bin
		cp -f u-boot.img ../../${OUTPUT}/u-boot.bin
		uboot_packaging
		echo ""
	else
		report_error
	fi
fi
if [[ "$ARCH" == "arm64" ]]; then
	if [[ -f "flash.bin" ]]; then
		mkdir -p ../../${OUTPUT}
		cp -f flash.bin u-boot.bin
		cp -f u-boot.bin ../../${OUTPUT}/
		uboot_packaging
		echo ""
	else
		report_error
	fi
fi
}

# rockchip
rockchip-uboot-string(){
uboot-source
if [[ "$FAMILY_EXT" == "rk3328" || "$FAMILY_EXT" == "rk3399" ]]; then
	arm-trusted-firmware
fi
u-boot
if [[ -f "idbloader.img" ]]; then
	mkdir -p ../../${OUTPUT}
	if [[ "$ARCH" == "arm" ]]; then
		cp -f idbloader.img ../../${OUTPUT}/idbloader.bin
		cp -f u-boot.bin u-boot.itb
		cp -f u-boot.itb ../../${OUTPUT}/
		uboot_packaging
		echo ""
	else
		cp -f idbloader.img ../../${OUTPUT}/idbloader.bin
		cp -f u-boot.itb ../../${OUTPUT}/
		uboot_packaging
		echo ""
	fi
else
	report_error
fi
}

# samsung
samsung-uboot-string(){
uboot-source
u-boot
if [[ -f "u-boot.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f u-boot.bin ../../${OUTPUT}/
	if [[ "$BOARD" == "odroidxu4" ]]; then
		cp -f ../../${PRECOMPILED_UBOOT_DIR}/bl1.bin ../../${OUTPUT}/
		cp -f ../../${PRECOMPILED_UBOOT_DIR}/bl2.bin ../../${OUTPUT}/
		cp -f ../../${PRECOMPILED_UBOOT_DIR}/tzsw.bin ../../${OUTPUT}/
	fi
	uboot_packaging
	echo ""
else
	report_error
fi
}
