# UBOOT
bcm_source(){
mkdir -p ${BCMSRC}
cp -f board.txt ${BCMSRC}/
cd ${BCMSRC}
rm -fdr u-boot
}

bcm2711_uboot(){
echo_duboot
if ls u-boot-${UBOOT_VERSION}.tar.gz > /dev/null 2>&1
	then echo -e "${YLW}u-boot-${UBOOT_VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/u-boot-${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz && echo_bdone;
fi
bcmbuild_uboot
}

bcmbuild_uboot(){
echo
echo_extract
tar -xf u-boot-${UBOOT_VERSION}.tar.gz
echo_done
mv -f u-boot-${UBOOT_VERSION} u-boot
cp -f board.txt u-boot/
cd u-boot
echo
export ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-
bcm2711_uboot_defconfig
make -j${CORES} rpi_4_defconfig
if `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null;`
    then make menuconfig;
fi
echo
echo_cuboot
make -j${CORES}
}

bcm2711_uboot_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/rpi_4_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/rpi_4_defconfig
}

bcm2711_binary(){
mkdir -p ../${BINRPI4}
cp -f u-boot.bin ../${BINRPI4}/
echo_done
echo
}

bcm2711_uboot_string(){
bcm_source
bcm2711_uboot
bcm2711_binary
}

## KERNEL
bcm_kernel(){
mkdir -p ${BCMSRC}
cp -f board.txt ${BCMSRC}/
cd ${BCMSRC}
}

# RASPBERRY PI 4B
raspberrypi_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/raspberrypi-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/raspberrypi-nc-packaging.patch ;
fi
for i in ../${BROADCOM}/*.patch; do patch -p1 < $i; done
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

broadcom_output(){
if `grep -Fx "bcm2711" "../board.txt" >/dev/null;`
	then mkdir -p ../output/raspi4 && mv -f *.deb ../output/raspi4/;
fi
}

# STAGE1
### STAGE 1
partitions(){
image_size2
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
2048
524287
a
c
t
b
n
p
2
524288

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_BOOT="${IMAGE_LOOP_DEV}p1"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p2"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.vfat -n BOOT "${IMAGE_LOOP_DEV_BOOT}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1 p2
mount "${IMAGE_LOOP_DEV_BOOT}" p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p2
sync
umount p2
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p2
}

partition_uuid(){
BOOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_BOOT}" | sed -ne 's/^UUID=//p')
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
ROOT_PARTUUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^PARTUUID=//p')

echo BOOT_UUID='"'$BOOT_UUID'"' > part-uuid.txt
echo ROOT_UUID='"'$ROOT_UUID'"' >> part-uuid.txt
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' >> part-uuid.txt

source part-uuid.txt
}

extlinux(){
mkdir -p p1/extlinux
tee p1/extlinux/extlinux.conf <<EOF
label kernel
    kernel /Image
    append earlyprintk initrd=/uInitrd console=serial0,115200 console=tty1 rw root=PARTUUID=${ROOT_PARTUUID} rootfstype=ext4 fsck.repair=yes logo.nologo rootwait
EOF
}

create_extlinux(){
extlinux > /dev/null 2>&1
if ls p1/extlinux/extlinux.conf > /dev/null 2>&1
	then echo && echo -n "extlinux.conf " && sleep 1s && echo_nok;
	else echo && echo -n "extlinux.conf " && sleep 1s && echo_fail && exit;
fi
}

bcm2711_config(){
tee p1/config.txt <<EOF
arm_64bit=1
kernel=u-boot.bin

disable_overscan=1
gpu_mem=128
#dtparam=i2c_arm=on
#dtparam=i2s=on
#dtparam=spi=on
dtparam=audio=on
enable_uart=1
disable_splash=1
max_framebuffers=1
arm_freq=1750
gpu_freq=750
over_voltage=2
EOF
}

bcm2711_boot(){
mkdir -p firmware/boot
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4.dat
if ls firmware/boot/fixup4.dat > /dev/null 2>&1
	then echo -n "fixup4.dat " && echo_nok;
	else echo -n "fixup4.dat " && echo_fail && exit;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4.elf
if ls firmware/boot/start4.elf > /dev/null 2>&1
	then echo -n "start4.elf " && echo_nok;
	else echo -n "start4.elf " && echo_fail && exit;
fi
echo
if ls output/raspi4/u-boot.bin > /dev/null 2>&1
	then echo -n "u-boot.bin " && echo_nok;
	else echo -n "u-boot.bin " && echo_fail && exit;
fi
echo
install -v -m 0644 firmware/boot/fixup4.dat p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/start4.elf p1/ > /dev/null 2>&1
install -v -m 0644 output/raspi4/u-boot.bin p1/ > /dev/null 2>&1
if ls p1/{fixup4.dat,start4.elf,u-boot.bin} > /dev/null 2>&1
	then echo -n "install " && echo_bdone;
	else echo -n "install " && echo_fail && exit;
fi
}

aarch64_extract(){
tar -xf debian-${DEBIAN_VERSION}-rootfs-aarch64.tar.xz -C p2/
}

aarch64_rootfs(){
if ls debian-${DEBIAN_VERSION}-rootfs-aarch64.tar.xz > /dev/null 2>&1
	then echo -n "Extracting rootfs " && aarch64_extract && echo_bdone;
	else echo -e "${YLW}Missing rootfs tarball${FIN}!" && exit;
fi
echo
}

rpi-firmware(){
aria2c -c --download-result=hide --console-log-level=error \
--disable-ipv6=true --summary-interval=0 --show-files=false \
https://github.com/RPi-Distro/firmware-nonfree/archive/master.tar.gz
mv -f firmware-nonfree-master.tar.gz firmware/
}

### STAGE 2

# USER CONFIG
bcm2711_user(){
echo -n "${HOSTNAME}" > /etc/hostname
sed -i "1 a 127.0.1.1	${HOSTNAME}" /etc/hosts
adduser ${user} --gecos "${HOSTNAME}" --disabled-password
}

user_config(){
if `grep -Fx "bcm2711" "/root/board.txt" >/dev/null;`
	then bcm2711_user
fi

echo "${user}:${passwd}" | chpasswd
adduser ${user} sudo
adduser ${user} audio
adduser ${user} dialout
adduser ${user} video
adduser ${user} disk
groupadd spi
groupadd i2c
groupadd gpio
adduser ${user} spi
adduser ${user} i2c
adduser ${user} gpio
adduser ${user} plugdev
adduser ${user} netdev
adduser ${user} bluetooth
adduser ${user} input
adduser ${user} tty

echo
echo Adding mc skins.
sleep 1s
mkdir -p /usr/share/mc/skins
mv -f darkgreen.ini /usr/share/mc/skins/darkgreen.ini
mv -f darkred.ini /usr/share/mc/skins/darkred.ini
echo Done.
echo
echo Adding mc ini and nanorc
sleep 1s
mkdir -p /root/.config/mc
mv -f root-ini /root/.config/mc/ini
mv -f nanorc-root /root/.nanorc
mkdir -p /home/${user}/.config/mc
mv -f user-ini /home/${user}/.config/mc/ini
mv -f nanorc-user /home/${user}/.nanorc
chown -R root:root /root
chown -R ${user}:${user} /home/${user}
echo Done.

echo
echo Creating sudoers file.
sleep 1s
rm -f /etc/sudoers.d/010_pi-nopasswd
tee /etc/sudoers.d/010_${user}-nopasswd <<EOF
${user} ALL=(ALL) NOPASSWD: ALL
EOF
echo Done.
chown -R ${user}:${user} /home/${user}
}

bcm_sdio_3-b-plus(){
wget -cq --show-progress https://raw.githubusercontent.com/openwrt/cypress-nvram/master/brcmfmac43455-sdio.raspberrypi%2C3-model-b-plus.txt
}

bcm_sdio_4-b(){
wget -cq --show-progress https://raw.githubusercontent.com/openwrt/cypress-nvram/master/brcmfmac43455-sdio.raspberrypi%2C4-model-b.txt
}

bluez_stable(){
BLUEZ_VERSION="5.55"
echo
echo Upgrading bluetooth.
sleep 1s
wget -cq --show-progress https://github.com/pyavitz/binary/releases/download/060420/bluez-${BLUEZ_VERSION}-debian-arm64.tar.xz
tar xf bluez-${BLUEZ_VERSION}-debian-arm64.tar.xz
rm -f bluez-${BLUEZ_VERSION}-debian-arm64.tar.xz
cd bluez-${BLUEZ_VERSION}-debian-arm64
rm -f *dbgsym_${BLUEZ_VERSION}*
rm -f *cups_${BLUEZ_VERSION}*
rm -f *source_${BLUEZ_VERSION}*
dpkg -i *.deb
cd ..
rm -fdR bluez-${BLUEZ_VERSION}-debian-arm64
apt-mark hold bluez
echo Done.
}

bluez_unstable(){
BLUEZ_UNSTABLE_VERSION="5.55"
echo
echo Upgrading bluetooth.
sleep 1s
wget -cq --show-progress https://github.com/pyavitz/binary/releases/download/060420/bluez-${BLUEZ_UNSTABLE_VERSION}-debian-unstable-arm64.tar.xz
tar xf bluez-${BLUEZ_UNSTABLE_VERSION}-debian-unstable-arm64.tar.xz
rm -f bluez-${BLUEZ_UNSTABLE_VERSION}-debian-unstable-arm64.tar.xz
cd bluez-${BLUEZ_UNSTABLE_VERSION}-debian-unstable-arm64
rm -f *dbgsym_${BLUEZ_UNSTABLE_VERSION}*
rm -f *cups_${BLUEZ_UNSTABLE_VERSION}*
rm -f *source_${BLUEZ_UNSTABLE_VERSION}*
dpkg -i *.deb
cd ..
rm -fdR bluez-${BLUEZ_UNSTABLE_VERSION}-debian-unstable-arm64
apt-mark hold bluez
echo Done.
}

bluez_choose(){
if `grep -Fx 'DEBIAN_VERSION="buster"' "/root/userdata.txt" >/dev/null;`
	then bluez_stable; else bluez_unstable;
fi
}

user_eeprom(){
echo
echo Adding user eeprom config.
tee /home/${user}/.eeprom <<EOF
# EEPROM CONFIG
## https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/
EEPROM_VERSION="${EEPROM_VERSION}"
EOF
chown ${user}:${user} /home/${user}/.eeprom
}

bcm2711_eeprom(){
echo
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
echo Checking for updates.
apt update
echo
echo Installing rpi-eeprom.
sleep 1s
apt install help2man rsync pciutils -y
###
mkdir -p ~/eeprom
mv -f rpi-eeprom-update.patch /root/eeprom/
mv -f rpi-eeprom-control.patch /root/eeprom/
cd ~/eeprom
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
rm -f rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
mkdir -p debian/patches
mv rpi-eeprom-update.patch debian/patches/rpi-eeprom-update.patch 
echo rpi-eeprom-update.patch >> debian/patches/series
mv -f debian rpi-eeprom-${EEPROM_VERSION}/
mv rpi-eeprom-control.patch rpi-eeprom-${EEPROM_VERSION}/
cd rpi-eeprom-${EEPROM_VERSION}
patch -p1 < rpi-eeprom-control.patch
rm -f rpi-eeprom-control.patch
dpkg-buildpackage -us -nc -uc
cd ..
dpkg -i *.deb
cd ..
rm -fdr eeprom
echo Done.
}

armv8_userland(){
echo
echo Adding raspi userland.
rm -f /etc/profile
mv -f profile /etc/profile
mv rpi-vc.conf /etc/ld.so.conf.d/rpi-vc.conf
chown root:root /etc/profile
chown root:root /etc/ld.so.conf.d/rpi-vc.conf
sleep 1s
mkdir -p /opt
git clone https://github.com/raspberrypi/userland.git
mv -f userland-remove-hi-pi.patch /root/userland/
cd userland
patch -p1 < userland-remove-hi-pi.patch
rm -f userland-remove-hi-pi.patch
./buildme --aarch64
cd ~
rm -f -d -R userland
ldconfig
echo Done.
}

bcm_modules(){
echo
echo Updating etc modules.
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2
#i2c-dev

EOF
chown root:root /etc/modules
echo Done.
}

led_service(){
echo
echo Creating actled service.
tee /usr/local/sbin/actled <<EOF
#!/bin/bash
# activity led on mmc1
rpi_switch(){
sh -c 'echo mmc1 >/sys/class/leds/ACT/trigger'
}

if ls /sys/class/leds/ACT/trigger > /dev/null 2>&1;
	then rpi_switch;
fi

EOF

echo
echo Creating pwrled service.
tee /usr/local/sbin/pwrled <<EOF
#!/bin/bash
# power led switch
rpi_switch(){
sh -c 'echo 0 > /sys/devices/platform/leds/leds/led1/brightness'
}

ml_switch(){
sh -c 'echo 0 > /sys/devices/platform/leds/leds/PWR/brightness'
}

if ls /sys/devices/platform/leds/leds/led1/brightness > /dev/null 2>&1;
	then rpi_switch;
fi
if ls /sys/devices/platform/leds/leds/PWR/brightness > /dev/null 2>&1;
	then ml_switch;
fi

EOF
chmod +x /usr/local/sbin/*
chown root:root /usr/local/sbin/actled
chown root:root /usr/local/sbin/pwrled
}

led_switches(){
echo
echo Creating power led off switch.
sleep 1s
tee /etc/systemd/system/pwrledoff.service <<EOF
[Unit]
Description=Turn off power led
ConditionPathExists=/usr/local/sbin/pwrled

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/sbin/pwrled &>/dev/null

[Install]
WantedBy=multi-user.target
EOF

echo
echo Creating activity led on mmc1 switch. 
sleep 1s
tee /etc/systemd/system/actled.service <<EOF
[Unit]
Description=Turn off activity led
ConditionPathExists=/usr/local/sbin/actled

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/sbin/actled &>/dev/null

[Install]
WantedBy=multi-user.target

EOF
systemctl enable actled
systemctl enable pwrledoff
}

htop_stable(){
echo
echo Installing htop with cpufreq and thermal support.
sleep 1s
git clone https://github.com/leeadama/htop.git
cd htop
./autogen.sh
./configure --prefix=/usr
make -j4
make install
cd ~
rm -fdr htop
echo Done.
}

htop_unstable(){
echo
echo Installing htop with cpufreq and thermal support.
sleep 1s
git clone https://github.com/leeadama/htop.git
cd htop
./autogen.sh
./configure --prefix=/usr
make -j4 CC=gcc-9
make install
cd ~
rm -fdr htop
echo Done.
}
