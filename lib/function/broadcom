#!/bin/bash


flash_uboot(){ # place holder
echo -e "Broadcom: place holder"
}

# /boot/config.txt
brcm_config(){
if [[ -f "p1/config.txt" ]]; then
	rm -f p1/config.txt;
fi
echo ""
echo -en "$BOARD: "; echo -e "config.txt"
tee p1/config.txt <<EOF
arm_64bit=1
#kernel=Image
kernel=u-boot.bin
initramfs initrd.gz followkernel

# needed by uboot
enable_uart=1

# camera
#start_x=1
#gpu_mem=128

# display
disable_overscan=1
disable_splash=1
#max_framebuffers=1
#avoid_warnings=1

# overclock: https://www.tomshardware.com/how-to/overclock-any-raspberry-pi
#arm_freq=
#core_freq=
#gpu_freq=
#over_voltage=
EOF
if [[ "$ARCH" == "arm" ]] && [[ -f "p1/config.txt" ]]; then
	sed -i 's/arm_64bit=1/#arm_64bit=1/g' p1/config.txt
fi
}

# /boot/extlinux/extlinux.conf
brcm_extlinux(){
echo -en "$BOARD: "; echo -e "extlinux.conf"
CMDLINE="append ${CONSOLE} rw root=PARTUUID=${ROOT_PARTUUID} ${ROOT_FSTYPE} fsck.repair=yes ${EXTRA} loglevel=1 rootwait"
if [[ -f "p1/extlinux/extlinux.conf" ]]; then rm -f p1/extlinux/extlinux.conf; fi
mkdir -p p1/extlinux
tee p1/extlinux/extlinux.conf <<EOF
label default
	kernel ../Image
	initrd ../initrd.gz
	#fdt ../${DTB}.dtb
	${CMDLINE}
EOF
if [[ -f "p1/cmdline.txt" ]]; then rm -f p1/cmdline.txt; fi
echo ""
echo -en "$BOARD: "; echo -e "cmdline.txt"
tee p1/cmdline.txt <<EOF
${CMDLINE}
EOF
if [[ -f "p1/cmdline.txt" ]]; then
	sed -i 's/append //g' p1/cmdline.txt;
fi
}

# STAGE 2
apt_preferences(){
echo ""
tee /etc/apt/preferences <<EOF
Package: rpi-eeprom linux-firmware linux-firmware-raspi2 pi-bluetooth raspberrypi-sys-mods
Pin: release o=Ubuntu
Pin-Priority: 1
EOF
}

# EEPROM
find_eeprom(){
EEPROM_VERSION=$(curl --silent -L ${CHANGELOG} | awk '{if (NR==1) {print substr($2, 1, length($2)-3)}}' | sed 's/[()]//g')
if [[ `wget -S --spider ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	download_eeprom;
else
	finding_eeprom;
fi
}

finding_eeprom(){
EEPROM_VERSION=$(curl --silent -L ${CHANGELOG} | awk '{if (NR==10) {print substr($2, 1, length($2)-3)}}' | sed 's/[()]//g')
if [[ `wget -S --spider ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	download_eeprom;
else
	EEPROM_VERSION="13.12";
	download_eeprom;
fi
}

download_eeprom(){
wget -cq --show-progress ${ERURL}rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
wget -cq --show-progress ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
}

bcm2711_eeprom(){
ERURL="https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/"
CHANGELOG="https://raw.githubusercontent.com/raspberrypi/rpi-eeprom/debian/bullseye/debian/changelog"
echo ""
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
echo -e "Installing rpi-eeprom ..."
sleep 1s
mkdir -p ~/eeprom
mv -f rpi-eeprom-update.patch /root/eeprom/
mv -f rpi-eeprom-control.patch /root/eeprom/
cd ~/eeprom
find_eeprom
tar xf rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
rm -f rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
mkdir -p debian/patches
mv rpi-eeprom-update.patch debian/patches/rpi-eeprom-update.patch 
echo rpi-eeprom-update.patch >> debian/patches/series
mv -f debian rpi-eeprom-${EEPROM_VERSION}/
mv rpi-eeprom-control.patch rpi-eeprom-${EEPROM_VERSION}/
cd rpi-eeprom-${EEPROM_VERSION}
patch -p1 < rpi-eeprom-control.patch
rm -f rpi-eeprom-control.patch
dpkg-buildpackage -us -nc -uc
cd ..
dpkg -i *.deb
cd ..
rm -fdr eeprom
echo -e "Done."
}

rpi_userland(){
echo ""
echo -e "Installing userland ..."
rm -f /etc/profile
mv -f profile /etc/profile
mv rpi-vc.conf /etc/ld.so.conf.d/rpi-vc.conf
chown root:root /etc/profile
chown root:root /etc/ld.so.conf.d/rpi-vc.conf
sleep 1s
mkdir -p /opt
git clone https://github.com/raspberrypi/userland.git
mv -f userland-remove-hi-pi.patch /root/userland/
cd userland
patch -p1 < userland-remove-hi-pi.patch
rm -f userland-remove-hi-pi.patch
if [[ "$ARCH" == "arm64" ]]; then
	echo "== ARM64"
	./buildme --aarch64
else
	echo "== ARM"
	./buildme
fi
cd ~
rm -fdr userland
ldconfig
echo -e "Done."
}

brcm_modules(){
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2
#i2c-dev

EOF
chown root:root /etc/modules
}

# Firmware
brcm_firmware(){
echo ""
echo -e "Adding extra firmware ..."
mkdir -p /lib/firmware/brcm
mkdir -p /lib/firmware/updates
git clone https://github.com/pyavitz/firmware.git /lib/firmware/updates/brcm
mv fw-0a5c_21e8.hcd /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
cp /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
install -Dm644 UPDATE.mem /lib/firmware/updates/renesas_usb_fw.mem
rm -f UPDATE.mem
if [ -e /etc/firmware ]; then
	:;
else
	ln -sr /lib/firmware /etc/firmware;
fi
mkdir -p /lib/firmware/updates/rtl_nic
cd /lib/firmware/updates/rtl_nic
wget -cq https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware.git/+archive/refs/heads/main/rtl_nic.tar.gz
tar xf rtl_nic.tar.gz
rm -f rtl_nic.tar.gz
cd ~
echo -e "Done."
}
