# KERNEL
DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
STBURL="https://cdn.kernel.org/pub/linux/kernel/v5.x/"
MLURL="https://git.kernel.org/torvalds/t/"
ODURL="https://github.com/tobetter/linux/archive/refs/heads/"

kernel-source(){
mkdir -p ${SRC}
cp -f board.txt ${SRC}/
cd ${SRC}
}

# PATCHING
allwinner-packaging(){
sed -i 's/packagename=linux-image-$version/packagename=sun50i-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=sun50i-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename=sun50i-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=sun50i-linux-headers/g' scripts/package/mkdebian
}

amlogic-packaging(){
sed -i 's/packagename=linux-image-$version/packagename=meson64-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=meson64-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename=meson64-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=meson64-linux-headers/g' scripts/package/mkdebian
}

raspberrypi-packaging(){
sed -i 's/packagename=linux-image-$version/packagename=raspberrypi-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=raspberrypi-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename=raspberrypi-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=raspberrypi-linux-headers/g' scripts/package/mkdebian
}

rockchip-packaging(){
sed -i 's/packagename=linux-image-$version/packagename=rockchip64-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=rockchip64-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename=rockchip64-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=rockchip64-linux-headers/g' scripts/package/mkdebian
}

## TRITIUM
tritium_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/general-packaging.patch
allwinner-packaging
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

## PINE64
pine64_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/general-packaging.patch
allwinner-packaging
for i in ../${PINE}/cpufreq/*.patch; do patch -p1 < $i; done
for i in ../${PINE}/wifibt/*.patch; do patch -p1 < $i; done
for i in ../${PINE}/misc/*.patch; do patch -p1 < $i; done
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

## NANOPI
nanopi_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/general-packaging.patch
allwinner-packaging
if [[ `grep "5.10" "../../userdata.txt"` ]]; then
	for i in ../${NANOPI}/*.patch; do patch -p1 < $i; done;
else
	for i in ../${NANOPI}/edge/*.patch; do patch -p1 < $i; done;
fi
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

## LE POTATO
potato_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/general-packaging.patch
amlogic-packaging
for i in ../${AMLOGIC}/lepotato/*.patch; do patch -p1 < $i; done
if [[ `ls ../${AMLOGIC}/*.patch` ]] > /dev/null 2>&1; then
	for i in ../${AMLOGIC}/*.patch; do patch -p1 < $i; done;
fi
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

## ODROID
odroid_boards(){
if [[ `grep -w "odroidc4" "../../board.txt"` ]]; then
	for i in ../${AMLOGIC}/c4/*.patch; do patch -p1 < $i; done;
fi
if [[ `grep -w "odroidn2" "../../board.txt"` ]]; then
	for i in ../${AMLOGIC}/n2/*.patch; do patch -p1 < $i; done;
fi
if [[ `grep -w "odroidn2plus" "../../board.txt"` ]]; then
	for i in ../${AMLOGIC}/n2/*.patch; do patch -p1 < $i; done;
fi
}

tobetter_kernel(){
if [[ `grep -w 'VERSION="5.13.y"' "../../userdata.txt"` ]]; then
	if [[ `ls ../${AMLOGIC}/odroid/5.13.y/*.patch` ]] > /dev/null 2>&1; then
		for i in ../${AMLOGIC}/odroid/5.13.y/*.patch; do patch -p1 < $i; done;
	fi
fi
if [[ `grep -w 'VERSION="5.14.y"' "../../userdata.txt"` ]]; then
	if [[ `ls ../${AMLOGIC}/odroid/5.14.y/*.patch` ]] > /dev/null 2>&1; then
		for i in ../${AMLOGIC}/odroid/5.14.y/*.patch; do patch -p1 < $i; done;
	fi
fi
}

## ODROIDC4
odroidc4_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/general-packaging.patch
amlogic-packaging
tobetter_kernel
odroid_boards
if [[ `ls ../${AMLOGIC}/*.patch` ]] > /dev/null 2>&1; then
	for i in ../${AMLOGIC}/*.patch; do patch -p1 < $i; done;
fi
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

## ODROIDN2
odroidn2_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/general-packaging.patch
amlogic-packaging
tobetter_kernel
odroid_boards
if [[ `ls ../${AMLOGIC}/*.patch` ]] > /dev/null 2>&1; then
	for i in ../${AMLOGIC}/*.patch; do patch -p1 < $i; done;
fi
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

## BROADCOM
broadcom_patching(){
if [[ `grep "5.10" "../../userdata.txt"` ]]; then
	for i in ../${BROADCOM}/*.patch; do patch -p1 < $i; done;
else
	for i in ../${BROADCOM}/edge/*.patch; do patch -p1 < $i; done;
fi
}

## RASPBERRY PI 4B
raspberrypi_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/general-packaging.patch
raspberrypi-packaging
broadcom_patching
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

## ROCKCHIP
rk3328_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/general-packaging.patch
rockchip-packaging
if [[ `grep "5.10" "../../userdata.txt"` ]]; then
	for i in ../${RK3328}/*.patch; do patch -p1 < $i; done;
else
	for i in ../${RK3328}/edge/*.patch; do patch -p1 < $i; done;
fi
if [[ `ls ../${ROCKCHIP}/*.patch` ]]; then
	for i in ../${ROCKCHIP}/*.patch; do patch -p1 < $i; done;
fi
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

rk3399_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/general-packaging.patch
rockchip-packaging
if [[ `grep "5.10" "../../userdata.txt"` ]]; then
	for i in ../${RK3399}/*.patch; do patch -p1 < $i; done;
else
	for i in ../${RK3399}/edge/*.patch; do patch -p1 < $i; done;
fi
if [[ `ls ../${ROCKCHIP}/*.patch` ]]; then
	for i in ../${ROCKCHIP}/*.patch; do patch -p1 < $i; done;
fi
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

##
rpi4_binaries(){
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
mkdir -p binaries
rm -f binaries/*
cd binaries
echo
echo_bins
${DOWNLOAD} ${BINURL}fixup4.dat
${DOWNLOAD} ${BINURL}start4.elf
${DOWNLOAD} ${BINURL}LICENCE.broadcom
${DOWNLOAD} ${BINURL}COPYING.linux
cd ..
if ls binaries/{fixup4.dat,start4.elf,LICENCE.broadcom,COPYING.linux} > /dev/null 2>&1; then
	echo_bdone;
else
	echo_fail
	exit;
fi
}

check_stable(){
if [[ `wget -S --spider ${STBURL}${KERNEL}-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	stable_download
	stable_extract;
else
	check_odroid;
fi
}

check_odroid(){
if [[ `wget -S --spider https://raw.githubusercontent.com/tobetter/linux/odroid-${VERSION}/Makefile 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	odroid_download
	odroid_extract;
else
	echo
	echo -e "${WHT}It appears the kernel you selected is not available${FIN}?"
	exit;
fi
}

stable_download(){
echo
echo_stable
if [ -e ${KERNEL}-${VERSION}.tar.xz ]; then
	echo -e "${YLW}${KERNEL}-${VERSION}.tar.xz found${FIN}.";
else
	${DOWNLOAD} ${STBURL}${KERNEL}-${VERSION}.tar.xz
	echo_bdone;
fi
if [[ `grep -w "rtl8812au=1" "../userdata.txt"` ]]; then
	rtl8812au_download;
fi
if [[ `grep -w "rtl88x2bu=1" "../userdata.txt"` ]]; then
	rtl88x2bu_download;
fi
if [[ `grep -w "rtl8811cu=1" "../userdata.txt"` ]]; then
	rtl8811cu_download;
fi
}

mainline_download(){
echo
echo_mainline
if  [ -e ${KERNEL}-${VERSION}.tar.gz ]; then
	echo -e "${YLW}${KERNEL}-${VERSION}.tar.gz found${FIN}.";
else
	${DOWNLOAD} ${MLURL}${KERNEL}-${VERSION}.tar.gz
	echo_bdone;
fi
if [[ `grep -w "rtl8812au=1" "../userdata.txt"` ]]; then
	rtl8812au_download;
fi
if [[ `grep -w "rtl88x2bu=1" "../userdata.txt"` ]]; then
	rtl88x2bu_download;
fi
if [[ `grep -w "rtl8811cu=1" "../userdata.txt"` ]]; then
	rtl8811cu_download;
fi
}

odroid_download(){
echo
echo_odroid
if [ -e ${ODKERNEL}-${VERSION}.tar.gz ]; then
	echo -e "${YLW}${ODKERNEL}-${VERSION}.tar.gz found${FIN}.";
else
	${DOWNLOAD} ${ODURL}odroid-${VERSION}.tar.gz
	echo_bdone;
fi
if [[ `grep -w "rtl8812au=1" "../userdata.txt"` ]]; then
	rtl8812au_download;
fi
if [[ `grep -w "rtl88x2bu=1" "../userdata.txt"` ]]; then
	rtl88x2bu_download;
fi
if [[ `grep -w "rtl8811cu=1" "../userdata.txt"` ]]; then
	rtl8811cu_download;
fi
}

stable_extract(){
echo
echo_extract
echo -e -n "${WHT}"
pv ${KERNEL}-${VERSION}.tar.xz | tar -xJ ${KERNEL}-${VERSION}
echo -e -n "${FIN}"
}

mainline_extract(){
echo
echo_extract
echo -e -n "${WHT}"
pv ${KERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
echo -e -n "${FIN}"
}

odroid_extract(){
echo
echo_extract
echo -e -n "${WHT}"
pv ${ODKERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
mv -f ${ODKERNEL}-${VERSION} linux-${VERSION}
echo -e -n "${FIN}"
}

setup(){
sleep 1s
if [[ `grep -w "rtl8812au=1" "../userdata.txt"` ]]; then
	rtl8812au;
fi
if [[ `grep -w "rtl88x2bu=1" "../userdata.txt"` ]]; then
	rtl88x2bu;
fi
if [[ `grep -w "rtl8811cu=1" "../userdata.txt"` ]]; then
	rtl8811cu;
fi
cd ${KERNEL}-${VERSION}
if [[ `grep -w "bcm2711" "../board.txt"` ]]; then
	rpi4_binaries;
fi
export ARCH=arm64
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
cp -R ../${PACKAGING}/builddeb scripts/package/
cp -R ../${PACKAGING}/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
}

cconfig(){
echo_cconfig
cp -f ../${DEF}/${MYCONFIG} arch/arm64/configs/
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 CC=${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- ${MYCONFIG};
else
	make -j${CORES} ARCH=arm64 CC=${NATIVE} CFLAGS="${CFLAGS}" ${MYCONFIG};
fi
echo_done
}

menuconfig(){
echo
echo_menuconfig
sleep 1s
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 CC=${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- menuconfig;
else
	make -j${CORES} ARCH=arm64 CC=${NATIVE} CFLAGS="${CFLAGS}" menuconfig;
fi
}

ccompile(){
echo -e "-- ${GRN}CC${FIN}"
echo_build
echo ${BUILD_VERSION} > .version
echo 'y' | make -j${CORES} ARCH=arm64 KBUILD_BUILD_USER=${KBUSER} KBUILD_BUILD_HOST=${KBHOST} CC=${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- bindeb-pkg
}

ncompile(){
echo -e "-- ${GRN}NC${FIN}"
echo_build
echo ${BUILD_VERSION} > .version
echo 'y' | make -j${CORES} KBUILD_BUILD_USER=${KBUSER} KBUILD_BUILD_HOST=${KBHOST} ARCH=arm64 CC=${NATIVE} CFLAGS="${CFLAGS}" bindeb-pkg
}

# AMLOGIC
amlogic_defconfig(){
echo_defconfig
cp -f ../${DEF}/amlogic_defconfig arch/arm64/configs/
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 CC=${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- amlogic_defconfig;
else
	make -j${CORES} ARCH=arm64 CC=${NATIVE} CFLAGS="${CFLAGS}" amlogic_defconfig;
fi
echo_done
}

# ODROID
odroid_defconfig(){
echo_defconfig
cp -f ../${DEF}/odroid_defconfig arch/arm64/configs/
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 CC=${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- odroid_defconfig;
else
	make -j${CORES} ARCH=arm64 CC=${NATIVE} CFLAGS="${CFLAGS}" odroid_defconfig;
fi
echo_done
}

### LE POTATO
le_potato(){
potato_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	amlogic_defconfig;
fi
}

### ODROID C4
odroid_c4(){
odroidc4_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	odroid_defconfig;
fi
}

### ODROID N2
odroid_n2(){
odroidn2_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	odroid_defconfig;
fi
}

# ALLWINNER
allwinner_defconfig(){
echo_defconfig
cp -f ../${DEF}/allwinner_defconfig arch/arm64/configs/
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 CC=${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- allwinner_defconfig;
else
	make -j${CORES} ARCH=arm64 CC=${NATIVE} CFLAGS="${CFLAGS}" allwinner_defconfig;
fi
echo_done
}

### TRITIUM
tritium_h5(){
tritium_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	allwinner_defconfig;
fi
}

### PINEA64 PLUS
pine_a64(){
pine64_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	allwinner_defconfig;
fi
}

### NANOPI NEO PLUS2
nanopi_neo_plus2(){
nanopi_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	allwinner_defconfig;
fi
}

### ROCKCHIP
rockchip_defconfig(){
echo_defconfig
cp -f ../${DEF}/rockchip64_defconfig arch/arm64/configs/
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 CC=${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- rockchip64_defconfig;
else
	make -j${CORES} ARCH=arm64 CC=${NATIVE} CFLAGS="${CFLAGS}" rockchip64_defconfig;
fi
echo_done
}

rk3328_roc_cc(){
rk3328_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	rockchip_defconfig;
fi
}

rk3328_rock64(){
rk3328_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	rockchip_defconfig;
fi
}

rk3399_nanopc(){
rk3399_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	rockchip_defconfig;
fi
}

### BROADCOM
bcm2711_defconfig(){
echo_defconfig
cp -f ../${DEF}/bcm2711_defconfig arch/arm64/configs/
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 CC=${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- bcm2711_defconfig;
else
	make -j${CORES} ARCH=arm64 CC=${NATIVE} CFLAGS="${CFLAGS}" bcm2711_defconfig;
fi
echo_done
}

bcm_2711(){
raspberrypi_patch
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	bcm2711_defconfig;
fi
}

builddeb(){
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	ccompile;
else
	ncompile;
fi
}

# OUTPUT
## ALLWINNER
tritium_check(){
if [[ `ls ${BINTRI}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINTRI}/tmp
	mv -f ${BINTRI}/*.deb ${BINTRI}/tmp;
fi
}

pine64_check(){
if [[ `ls ${BINPINE}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINPINE}/tmp
	mv -f ${BINPINE}/*.deb ${BINPINE}/tmp;
fi
}

nanopi_check(){
if [[ `ls ${BINNPI}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINNPI}/tmp
	mv -f ${BINNPI}/*.deb ${BINNPI}/tmp;
fi
}

allwinner_output(){
if [[ `grep -Fx "tritium" "../board.txt"` ]]; then
	tritium_check
	mkdir -p ../output/tritium
	mv -f *.deb ../output/tritium/;
fi
if [[ `grep -Fx "pine64" "../board.txt"` ]]; then
	pine64_check
	mkdir -p ../output/pine64
	mv -f *.deb ../output/pine64/;
fi
if [[ `grep -Fx "nanopi" "../board.txt"` ]]; then
	nanopi_check
	mkdir -p ../output/nanopi
	mv -f *.deb ../output/nanopi/;
fi
}

## AMLOGIC
lepotato_check(){
if [[ `ls ${BINLEP}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINLEP}/tmp
	mv -f ${BINLEP}/*.deb ${BINLEP}/tmp;
fi
}

odroidn2_check(){
if [[ `ls ${BINODN2}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINODN2}/tmp
	mv -f ${BINODN2}/*.deb ${BINODN2}/tmp;
fi
}

odroidn2plus_check(){
if [[ `ls ${BINODN2P}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINODN2P}/tmp
	mv -f ${BINODN2P}/*.deb ${BINODN2P}/tmp;
fi
}

odroidc4_check(){
if [[ `ls ${BINODC4}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINODC4}/tmp
	mv -f ${BINODC4}/*.deb ${BINODC4}/tmp;
fi
}

amlogic_output(){
if [[ `grep -w "lepotato" "../board.txt"` ]]; then
	lepotato_check
	mkdir -p ../output/lepotato
	mv -f *.deb ../output/lepotato/;
fi
if [[ `grep -w "odroidn2" "../board.txt"` ]]; then
	odroidn2_check
	mkdir -p ../output/odroidn2
	mv -f *.deb ../output/odroidn2/;
fi
if [[ `grep -w "odroidn2plus" "../board.txt"` ]]; then
	odroidn2plus_check
	mkdir -p ../output/odroidn2plus
	mv -f *.deb ../output/odroidn2plus/;
fi
if [[ `grep -w "odroidc4" "../board.txt"` ]]; then
	odroidc4_check
	mkdir -p ../output/odroidc4
	mv -f *.deb ../output/odroidc4/;
fi
}

## BROADCOM
raspi4_check(){
if [[ `ls ${BINRPI4}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINRPI4}/tmp
	mv -f ${BINRPI4}/*.deb ${BINRPI4}/tmp;
fi
}

broadcom_output(){
if [[ `grep -Fx "bcm2711" "../board.txt"` ]]; then
	raspi4_check
	mkdir -p ../output/raspi4
	mv -f *.deb ../output/raspi4/;
fi
}

## ROCKCHIP
renegade_check(){
if [[ `ls ${BINRNG}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINRNG}/tmp
	mv -f ${BINRNG}/*.deb ${BINRNG}/tmp;
fi
}

rock64_check(){
if [[ `ls ${BINR64}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINR64}/tmp
	mv -f ${BINR64}/*.deb ${BINR64}/tmp;
fi
}

nanopc_check(){
if [[ `ls ${BINNPC}/*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ${BINNPC}/tmp
	mv -f ${BINNPC}/*.deb ${BINNPC}/tmp;
fi
}

rockchip_output(){
if [[ `grep -w "renegade" "../board.txt"` ]]; then
	renegade_check
	mkdir -p ../output/renegade
	mv -f *.deb ../output/renegade/;
fi
if [[ `grep -w "rock64" "../board.txt"` ]]; then
	rock64_check
	mkdir -p ../output/rock64
	mv -f *.deb ../output/rock64/;
fi
if [[ `grep -w "nanopc" "../board.txt"` ]]; then
	nanopc_check
	mkdir -p ../output/nanopc
	mv -f *.deb ../output/nanopc/;
fi
}
