#!/bin/bash

# LINUX KERNEL VARIABLES
RELEASE=`echo "$VERSION" | sed 's@^[^0-9]*\([0-9]\+\).*@\1@'`
LINUX_VERSION=`echo "$VERSION" | sed -e 's/^\(.\{4\}\).*/\1/' | sed 's/-//g'`
DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
STBURL="https://cdn.kernel.org/pub/linux/kernel/v${RELEASE}.x/"
MLURL="https://git.kernel.org/torvalds/t/"

kernel_source(){
mkdir -p ${SRC}
cp -f board.txt ${SRC}/
cd ${SRC}
}

# Firmware
rpi_firmware(){
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
mkdir -p firmware
rm -f firmware/*
cd firmware
echo ""
echo_firm
${DOWNLOAD} ${BINURL}LICENCE.broadcom
${DOWNLOAD} ${BINURL}COPYING.linux
if [[ "$SERIES" == "bcm2711" ]]; then
	${DOWNLOAD} ${BINURL}fixup4.dat
	${DOWNLOAD} ${BINURL}fixup4cd.dat
	${DOWNLOAD} ${BINURL}fixup4db.dat
	${DOWNLOAD} ${BINURL}fixup4x.dat
	${DOWNLOAD} ${BINURL}start4.elf
	${DOWNLOAD} ${BINURL}start4cd.elf
	${DOWNLOAD} ${BINURL}start4db.elf
	${DOWNLOAD} ${BINURL}start4x.elf
	cd ..
	if [[ `ls firmware/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf,LICENCE.broadcom,COPYING.linux}` ]] > /dev/null 2>&1; then
		echo_bdone;
	else
		echo_fail;
		exit 0;
	fi
else
	${DOWNLOAD} ${BINURL}bootcode.bin
	${DOWNLOAD} ${BINURL}fixup.dat
	${DOWNLOAD} ${BINURL}fixup_cd.dat
	${DOWNLOAD} ${BINURL}fixup_db.dat
	${DOWNLOAD} ${BINURL}fixup_x.dat
	${DOWNLOAD} ${BINURL}start.elf
	${DOWNLOAD} ${BINURL}start_cd.elf
	${DOWNLOAD} ${BINURL}start_db.elf
	${DOWNLOAD} ${BINURL}start_x.elf
	cd ..
	if [[ `ls firmware/{bootcode.bin,fixup.dat,fixup_cd.dat,fixup_db.dat,fixup_x.dat,start.elf,start_cd.elf,start_db.elf,start_x.elf,LICENCE.broadcom,COPYING.linux}` ]] > /dev/null 2>&1; then
		echo_bdone;
	else
		echo_fail;
		exit 0;
	fi
fi
}

# mainline
download(){
if [[ `wget -S --spider ${MLURL}${KERNEL}-${VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	mainline_download;
	mainline_extract;
else
	check_stable;
fi
}

# lts / stable
check_stable(){
if [[ `wget -S --spider ${STBURL}${KERNEL}-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	stable_download;
	stable_extract;
else
	check_github;
fi
}

# github
check_github(){
if [ -f ../github.txt ]; then
	REPO=`sed 2d ../github.txt`
	BRANCH=`sed 1d ../github.txt`
	REPO_KERNEL=`sed 1d ../github.txt`
	VKERNEL="${GITHUB}-${BRANCH}"
fi
if [[ `echo $VERSION | sed 's/[0-9]*//g'` == "..y" ]]; then
	SETUP="vendor";
fi
if [[ `wget -S --spider https://raw.githubusercontent.com/${REPO}/${GITHUB}/${REPO_KERNEL}-${VERSION}/Makefile 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	vendor_download;
	vendor_extract;
else
	echo "";
	echo -e "${WHT}It appears the kernel you selected is not available${FIN}?";
	exit;
fi
}

stable_download(){
if [[ -f "${KERNEL}-${VERSION}.tar.xz" ]]; then
	:;
else
	echo_stable;
	${DOWNLOAD} ${STBURL}${KERNEL}-${VERSION}.tar.xz
	echo_bdone;
fi
extra_wireless
}

mainline_download(){
if  [[ -f "${KERNEL}-${VERSION}.tar.gz" ]]; then
	:;
else
	echo_mainline;
	${DOWNLOAD} ${MLURL}${KERNEL}-${VERSION}.tar.gz
	echo_bdone;
fi
extra_wireless
}

vendor_download(){
if [[ -f "${VKERNEL}-${VERSION}.tar.gz" ]]; then
	:;
else
	echo_vendor;
	${DOWNLOAD} https://github.com/${REPO}/${GITHUB}/archive/refs/heads/${REPO_KERNEL}-${VERSION}.tar.gz
	echo_bdone;
fi
extra_wireless
}

stable_extract(){
echo ""
echo_extract
pv ${KERNEL}-${VERSION}.tar.xz | tar -xJ ${KERNEL}-${VERSION}
}

mainline_extract(){
echo ""
echo_extract
pv ${KERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
}

vendor_extract(){
echo ""
echo_extract
pv ${VKERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
mv -f ${VKERNEL}-${VERSION} linux-${VERSION}
if [[ -e "linux-${VERSION}/debian" ]]; then
	rm -fdr linux-${VERSION}/debian;
fi
}

setup(){
sleep 1s
cd ${KERNEL}-${VERSION}
if [ $rtl8812au -eq 1 ]; then
	rtl8812au;
fi
if [ $rtl88x2bu -eq 1 ]; then
	rtl88x2bu;
fi
if [ $rtl8811cu -eq 1 ]; then
	rtl8811cu;
fi
if [ $rtl8188eu -eq 1 ]; then
	rtl8188eu;
fi
if [[ "$BOARD" == "opir1" ]]; then
	rtl8189es;
fi
if [[ "$FAMILY" == "broadcom" ]]; then
	rpi_firmware;
fi
export ARCH=${ARCH}
# remove builddeb and mkdebian scripts
rm -f scripts/package/{builddeb,mkdebian}
# add custom builddeb and mkdebian scripts
cp -fr ../../packaging/{builddeb,mkdebian} scripts/package/
chmod +x scripts/package/{builddeb,mkdebian}
}

vendor_setup(){
cd ${KERNEL}-${VERSION}
if [ $rtl8812au -eq 1 ]; then
	rtl8812au;
fi
if [ $rtl88x2bu -eq 1 ]; then
	rtl88x2bu;
fi
if [ $rtl8811cu -eq 1 ]; then
	rtl8811cu;
fi
export ARCH=${ARCH}
if [[ "$VERSION" == "4.9.y" ]]; then
	# remove builddeb script
	rm -f scripts/package/builddeb
	# add custom builddeb script
	cp -fr ../../packaging/builddeb-4.9 scripts/package/builddeb
	chmod +x scripts/package/builddeb
fi
if [[ "$VERSION" == "4.19.y" ]]; then
	# remove builddeb and mkdebian scripts
	rm -f scripts/package/{builddeb,mkdebian}
	# add custom builddeb and mkdebian scripts
	cp -fr ../../packaging/builddeb-4.19 scripts/package/builddeb
	cp -fr ../../packaging/mkdebian-4.19 scripts/package/mkdebian
	chmod +x scripts/package/{builddeb,mkdebian}
fi
}

cconfig(){
echo_cconfig
cp -f ../${DEF}/${MYCONFIG} arch/${ARCH}/configs/
if [ $crosscompile -eq 1 ]; then
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC=${CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} ${MYCONFIG};
else
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC=${NATIVE} CFLAGS="${CFLAGS}" ${MYCONFIG};
fi
echo_done
}

bconfig(){
echo_defconfig
cp -f ../${DEF}/${LINUX_DEFCONFIG} arch/${ARCH}/configs/
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
rtl8188eu_module
rtl8189es_module
if [ $crosscompile -eq 1 ]; then
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC=${CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} ${LINUX_DEFCONFIG};
else
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC=${NATIVE} CFLAGS="${CFLAGS}" ${LINUX_DEFCONFIG};
fi
echo_done
}

vendor_config(){
echo_defconfig
if [[ "$FAMILY_EXT" == "odroid" ]] && [[ "$VERSION" == "4.9.y" ]]; then
	cp -f ../${DEF}/${FAMILY_EXT}-${VERSION}_defconfig arch/${ARCH}/configs/${LINUX_DEFCONFIG};
fi
if [[ "$FAMILY_EXT" == "rk356x" ]] && [[ "$VERSION" == "4.19.y" ]]; then
	cp -f ../${DEF}/${FAMILY_EXT}-${VERSION}_defconfig arch/${ARCH}/configs/${LINUX_DEFCONFIG};
fi
if [ -f arch/${ARCH}/configs/${LINUX_DEFCONFIG} ]; then
	:;
else
	cp -f ../${DEF}/${LINUX_DEFCONFIG} arch/${ARCH}/configs/;
fi
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
if [ $crosscompile -eq 1 ]; then
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC=${CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} ${LINUX_DEFCONFIG};
else
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC=${NATIVE} CFLAGS="${CFLAGS}" ${LINUX_DEFCONFIG};
fi
echo_done
}

menuconfig(){
echo ""
echo_menuconfig
sleep 1s
if [ $crosscompile -eq 1 ]; then
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC=${CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} menuconfig;
else
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC=${NATIVE} CFLAGS="${CFLAGS}" menuconfig;
fi
}

ccompile(){
echo -e "-- ${GRN}CC${FIN}"
echo_build
echo ${BUILD_VERSION} > .version
echo 'y' | make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} KBUILD_BUILD_USER=${KBUSER} KBUILD_BUILD_HOST=${KBHOST} CC=${CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} bindeb-pkg
}

ncompile(){
echo -e "-- ${GRN}NC${FIN}"
echo_build
echo ${BUILD_VERSION} > .version
echo 'y' | make -j${CORES} KBUILD_DEBARCH=${DEBARCH} KBUILD_BUILD_USER=${KBUSER} KBUILD_BUILD_HOST=${KBHOST} ARCH=${ARCH} CC=${NATIVE} CFLAGS="${CFLAGS}" bindeb-pkg
}
