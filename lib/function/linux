#!/bin/bash
# LINUX KERNEL VARIABLES AND FUNCTIONS

DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"

sources_dir (){
mkdir -p ${SRC}
cp -f board.txt ${SRC}/
cd ${SRC}
}

# Firmware
rpi_firmware (){
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
mkdir -p firmware
rm -fr firmware/*
cd firmware
echo ""
echo_firm
${DOWNLOAD} ${BINURL}LICENCE.broadcom
${DOWNLOAD} ${BINURL}COPYING.linux
if [[ "$SERIES" == "bcm2711" ]]; then
	${DOWNLOAD} ${BINURL}fixup4.dat
	${DOWNLOAD} ${BINURL}fixup4cd.dat
	${DOWNLOAD} ${BINURL}fixup4db.dat
	${DOWNLOAD} ${BINURL}fixup4x.dat
	${DOWNLOAD} ${BINURL}start4.elf
	${DOWNLOAD} ${BINURL}start4cd.elf
	${DOWNLOAD} ${BINURL}start4db.elf
	${DOWNLOAD} ${BINURL}start4x.elf
	cd ..
	if [[ `ls firmware/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf,LICENCE.broadcom,COPYING.linux}` ]] > /dev/null 2>&1; then
		echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
	else
		echo -en " ${YLW}[${FIN}${RED}failed${FIN}${YLW}]${FIN}"; echo ""
		exit 0
	fi
else
	${DOWNLOAD} ${BINURL}bootcode.bin
	${DOWNLOAD} ${BINURL}fixup.dat
	${DOWNLOAD} ${BINURL}fixup_cd.dat
	${DOWNLOAD} ${BINURL}fixup_db.dat
	${DOWNLOAD} ${BINURL}fixup_x.dat
	${DOWNLOAD} ${BINURL}start.elf
	${DOWNLOAD} ${BINURL}start_cd.elf
	${DOWNLOAD} ${BINURL}start_db.elf
	${DOWNLOAD} ${BINURL}start_x.elf
	cd ..
	if [[ `ls firmware/{bootcode.bin,fixup.dat,fixup_cd.dat,fixup_db.dat,fixup_x.dat,start.elf,start_cd.elf,start_db.elf,start_x.elf,LICENCE.broadcom,COPYING.linux}` ]] > /dev/null 2>&1; then
		echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
	else
		echo -en " ${YLW}[${FIN}${RED}failed${FIN}${YLW}]${FIN}"; echo ""
		exit 0
	fi
fi
}

# mainline
download (){
MLURL="https://git.kernel.org/torvalds/t/"
if [[ `wget -S --spider ${MLURL}${KERNEL}-${VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	mainline_download
	mainline_extract
else
	check_stable
fi
}

# lts / stable
check_stable (){
RELEASE=`echo "$VERSION" | sed 's@^[^0-9]*\([0-9]\+\).*@\1@'`
STBURL="https://cdn.kernel.org/pub/linux/kernel/v${RELEASE}.x/"
if [[ `wget -S --spider ${STBURL}${KERNEL}-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	stable_download
	stable_extract
else
	check_github
fi
}

stable_download (){
if [[ -f "${KERNEL}-${VERSION}.tar.xz" ]]; then
	:;
else
	echo_stable
	${DOWNLOAD} ${STBURL}${KERNEL}-${VERSION}.tar.xz
	echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
fi
extra_wireless
}

mainline_download (){
if  [[ -f "${KERNEL}-${VERSION}.tar.gz" ]]; then
	:;
else
	echo_mainline
	${DOWNLOAD} ${MLURL}${KERNEL}-${VERSION}.tar.gz
	echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
fi
extra_wireless
}

report_tarball_error (){
echo "NOTICE: Tarball ${KERNEL}-${VERSION} is MIA. Please make a report."
echo ""
exit 0
}

stable_extract (){
echo ""
if [[ -f "${KERNEL}-${VERSION}.tar.xz" ]]; then
	echo_extract
	pv ${KERNEL}-${VERSION}.tar.xz | tar -xJ ${KERNEL}-${VERSION}
else
	report_tarball_error
fi
}

mainline_extract (){
echo ""
if [[ -f "${KERNEL}-${VERSION}.tar.gz" ]]; then
	echo_extract
	pv ${KERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
else
	report_tarball_error
fi
}

setup (){
sleep 1s
cd ${KERNEL}-${VERSION}
if [[ "$BOARD" == "orangepir1" ]]; then
	rtl8189es
fi
if [[ "$FAMILY" == "broadcom" ]]; then
	rpi_firmware
fi
export ARCH=${ARCH}
# remove builddeb and mkdebian scripts
rm -f scripts/package/{builddeb,mkdebian}
# add custom builddeb and mkdebian scripts
cp -fr ../../packaging/{builddeb,mkdebian} scripts/package/
chmod +x scripts/package/{builddeb,mkdebian}
}

kbuild (){
if [ $CLANG -eq 1 ]; then CLANG_FLAGS="${CLANG_LLVM}"; fi
if [ $CROSSCOMPILE -eq 1 ]; then
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC="${CROSS}" CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} ${CLANG_FLAGS} $1
else
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC="${NATIVE}" CFLAGS="${CFLAGS}" ${CLANG_FLAGS} $1
fi
}

cconfig (){
echo_cconfig
if [[ -f "../${DEF}/${MYCONFIG}" ]]; then
	cp -f ../${DEF}/${MYCONFIG} arch/${ARCH}/configs/
else
	echo ""
	echo -e "${MYCONFIG} was not found."
	echo -e "Check that the name is correct and in the correct location."
	echo -e "If you believe you are receiving this in error, please report it."
	read -p "Press enter to continue."
	exit 1
fi
kbuild "${MYCONFIG}"
echo ""
}

bconfig (){
echo_defconfig
if [[ -f "../${DEF}/${LINUX_DEFCONFIG}" ]]; then
	cp -f ../${DEF}/${LINUX_DEFCONFIG} arch/${ARCH}/configs/
else
	echo ""
	echo -e "${LINUX_DEFCONFIG} was not found."
	echo -e "Check that the name is correct and in the correct location."
	echo -e "If you believe you are receiving this in error, please report it."
	read -p "Press enter to continue."
	exit 1
fi
# odroid defconfig for linux 5.15
if [[ "$FAMILY_EXT" == "odroid" ]] && [[ "$LINUX_VERSION" == "5.15" ]]; then
	rm -f arch/${ARCH}/configs/${LINUX_DEFCONFIG}
	cp -f ../${DEF}/odroid-lts_defconfig arch/${ARCH}/configs/${LINUX_DEFCONFIG}
fi
# enable module in the defconfig
enable_wireless_module
# lib/function/modconfig
linux_configs
kbuild "${LINUX_DEFCONFIG}"
echo ""
}

save_defconfig (){
if [[ -f "defconfig" ]]; then
	echo ""
	mkdir -p ../../$OUTPUT/
	# minimal
	cp -f defconfig ../../$OUTPUT/${BOARD}_defconfig
	# full
	cp -f .config ../../$OUTPUT/${BOARD}-config_defconfig
	# path to files
	ls -ls ../../$OUTPUT/${BOARD}_defconfig | sed 's/..\/..\///g'
	ls -ls ../../$OUTPUT/${BOARD}-config_defconfig | sed 's/..\/..\///g'
fi
}

menuconfig (){
echo ""
echo_menuconfig
sleep .50
kbuild "menuconfig"
sleep .25
kbuild "savedefconfig"
echo "# ${DEFAULT_MOTD} defconfig saved."
options=("Continue" "Quit")
select opt in "${options[@]}"
do
	case $opt in
		"Continue")
			save_defconfig
			break
			;;
		"Quit")
			save_defconfig
			exit 0
			;;
		*) echo "invalid option $REPLY";;
	esac
done
}

builddeb (){
if [ $CROSSCOMPILE -eq 1 ]; then echo -e "${GRN}  CC${FIN}"; else echo -e "${GRN}  NC${FIN}"; fi
echo ${BUILD_VERSION} > .version
echo 'y' | kbuild "KBUILD_BUILD_USER=${KBUSER} KBUILD_BUILD_HOST=${KBHOST} bindeb-pkg"
}
