# KERNEL
DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
STBURL="https://cdn.kernel.org/pub/linux/kernel/v5.x/"
MLURL="https://git.kernel.org/torvalds/t/"
ODURL="https://github.com/tobetter/linux/archive/refs/heads/"

kernel-source(){
mkdir -p ${SRC}
cp -f board.txt ${SRC}/
cd ${SRC}
if [ -e tobetter.txt ]; then rm -f tobetter.txt; fi
}

# Firmware
rpi4_firmware(){
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
mkdir -p firmware
rm -f firmware/*
cd firmware
echo ""
echo_firm
${DOWNLOAD} ${BINURL}fixup4.dat
${DOWNLOAD} ${BINURL}start4.elf
${DOWNLOAD} ${BINURL}LICENCE.broadcom
${DOWNLOAD} ${BINURL}COPYING.linux
cd ..
if ls firmware/{fixup4.dat,start4.elf,LICENCE.broadcom,COPYING.linux} > /dev/null 2>&1; then
	echo_bdone;
else
	echo_fail
	exit;
fi
}

check_stable(){
if [[ `wget -S --spider ${STBURL}${KERNEL}-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	stable_download;
	stable_extract;
else
	check_odroid;
fi
}

check_odroid(){
if [[ `wget -S --spider https://raw.githubusercontent.com/tobetter/linux/odroid-${VERSION}/Makefile 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo "" >> tobetter.txt
	odroid_download;
	odroid_extract;
else
	echo ""
	echo -e "${WHT}It appears the kernel you selected is not available${FIN}?";
	exit;
fi
}

stable_download(){
echo ""
echo_stable
if [ -e ${KERNEL}-${VERSION}.tar.xz ]; then
	echo -e "${YLW}${KERNEL}-${VERSION}.tar.xz found${FIN}.";
else
	${DOWNLOAD} ${STBURL}${KERNEL}-${VERSION}.tar.xz
	echo_bdone;
fi
extra_wireless
}

mainline_download(){
echo ""
echo_mainline
if  [ -e ${KERNEL}-${VERSION}.tar.gz ]; then
	echo -e "${YLW}${KERNEL}-${VERSION}.tar.gz found${FIN}.";
else
	${DOWNLOAD} ${MLURL}${KERNEL}-${VERSION}.tar.gz
	echo_bdone;
fi
extra_wireless
}

odroid_download(){
echo ""
echo_odroid
if [ -e ${ODKERNEL}-${VERSION}.tar.gz ]; then
	echo -e "${YLW}${ODKERNEL}-${VERSION}.tar.gz found${FIN}.";
else
	${DOWNLOAD} ${ODURL}odroid-${VERSION}.tar.gz
	echo_bdone;
fi
extra_wireless
}

stable_extract(){
echo ""
echo_extract
pv ${KERNEL}-${VERSION}.tar.xz | tar -xJ ${KERNEL}-${VERSION}
}

mainline_extract(){
echo ""
echo_extract
pv ${KERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
}

odroid_extract(){
echo ""
echo_extract
pv ${ODKERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
mv -f ${ODKERNEL}-${VERSION} linux-${VERSION}
}

setup(){
sleep 1s
cd ${KERNEL}-${VERSION}
if [[ `grep -w "rtl8812au=1" "../../userdata.txt"` ]]; then
	rtl8812au;
fi
if [[ `grep -w "rtl88x2bu=1" "../../userdata.txt"` ]]; then
	rtl88x2bu;
fi
if [[ `grep -w "rtl8811cu=1" "../../userdata.txt"` ]]; then
	rtl8811cu;
fi
if [[ `grep -w "rtl8188eu=1" "../../userdata.txt"` ]]; then
	rtl8188eu;
fi
if [[ `grep -w 'BOARD="raspi4"' "../board.txt"` ]]; then
	rpi4_firmware;
fi
export ARCH=${ARCH}
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
cp -R ../${PACKAGING}/builddeb scripts/package/
cp -R ../${PACKAGING}/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
}

cconfig(){
echo_cconfig
cp -f ../${DEF}/${MYCONFIG} arch/${ARCH}/configs/
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=${ARCH} CC=${CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} ${MYCONFIG};
else
	make -j${CORES} ARCH=${ARCH} CC=${NATIVE} CFLAGS="${CFLAGS}" ${MYCONFIG};
fi
echo_done
}

bconfig(){
echo_defconfig
cp -f ../${DEF}/${LINUX_DEFCONFIG} arch/${ARCH}/configs/
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
rtl8188eu_module
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=${ARCH} CC=${CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} ${LINUX_DEFCONFIG};
else
	make -j${CORES} ARCH=${ARCH} CC=${NATIVE} CFLAGS="${CFLAGS}" ${LINUX_DEFCONFIG};
fi
echo_done
}

menuconfig(){
echo ""
echo_menuconfig
sleep 1s
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=${ARCH} CC=${CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} menuconfig;
else
	make -j${CORES} ARCH=${ARCH} CC=${NATIVE} CFLAGS="${CFLAGS}" menuconfig;
fi
}

ccompile(){
echo -e "-- ${GRN}CC${FIN}"
echo_build
echo ${BUILD_VERSION} > .version
echo 'y' | make -j${CORES} ARCH=${ARCH} KBUILD_BUILD_USER=${KBUSER} KBUILD_BUILD_HOST=${KBHOST} CC=${CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} bindeb-pkg
}

ncompile(){
echo -e "-- ${GRN}NC${FIN}"
echo_build
echo ${BUILD_VERSION} > .version
echo 'y' | make -j${CORES} KBUILD_BUILD_USER=${KBUSER} KBUILD_BUILD_HOST=${KBHOST} ARCH=${ARCH} CC=${NATIVE} CFLAGS="${CFLAGS}" bindeb-pkg
}
