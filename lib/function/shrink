#!/bin/bash

# shrink image
shrink(){
RELEASE=`cat /etc/os-release | grep -w VERSION_CODENAME | sed 's/VERSION_CODENAME=//g'`
if [[ -f "scripts/shrink" ]]; then
	chmod +x scripts/shrink
	scripts/shrink -s ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img
else
	echo ""
	echo "Builder error! Shrink script missing from repository."
	make cleanup > /dev/null 2>&1
	exit 0
fi
if [[ "$P_VALUE" == "p1" ]]; then kpartx_p1; fi
if [[ "$P_VALUE" == "p2" ]]; then kpartx_p2; fi
}

kpartx_p1(){
if [[ "$P_ROOTFS" == "p1" ]]; then
	echo 'ROOTFS_LOOP="/dev/mapper/' > kpart1
	echo '"' > kpart3
fi
IMAGE_FILE="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
KPARTX="$(kpartx -av $IMAGE_FILE)"
echo "$KPARTX"
if [[ "$RELEASE" == "jammy" ]]; then
	# snapd woes; grep for higher loop numbers
	grep -o 'loop[0-9]\+p.' <<<"$KPARTX" > kpart2
else
	grep -o 'loop.p.' <<<"$KPARTX" > kpart2
fi
paste -d '\0' kpart1 kpart2 kpart3 > kpart.txt
rm -f {kpart1,kpart2,kpart3}
source kpart.txt
ROOTFS="${ROOTFS_LOOP}"
ROOT_PARTUUID=$(blkid -o export -- ${ROOTFS} | sed -ne 's/^PARTUUID=//p')
mkdir -p p1
sleep 1s
mount "${ROOTFS}" p1
echo ""
if [[ "$EXTLINUX" == "true" ]] && [[ "$EFI" == "false" ]]; then
	extlinux > /dev/null 2>&1
fi
if [[ "$BOOTCMD" == "true" ]] && [[ "$EFI" == "false" ]]; then
	bootcmd > /dev/null 2>&1
fi
if [[ "$ARCH" == "arm" ]]; then
	# remove 100mb file
	rm -f p1/block.img
fi
sleep 3s
umount p1
rm -fdr p1
kpartx -d ${IMAGE_FILE}
rm -f kpart.txt
}

kpartx_p2(){
echo 'BOOT_LOOP="/dev/mapper/' > kpart1
echo 'ROOTFS_LOOP="/dev/mapper/' >> kpart1
IMAGE_FILE="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
KPARTX="$(kpartx -av $IMAGE_FILE)"
echo "$KPARTX"
if [[ "$RELEASE" == "jammy" ]]; then
	# snapd woes; grep for higher loop numbers
	grep -o 'loop[0-9]\+p.' <<<"$KPARTX" > kpart2
else
	grep -o 'loop.p.' <<<"$KPARTX" > kpart2
fi
echo '"' > kpart3
echo '"' >> kpart3
paste -d '\0' kpart1 kpart2 kpart3 > kpart.txt
rm -f {kpart1,kpart2,kpart3}
source kpart.txt
BOOT="${BOOT_LOOP}"
ROOTFS="${ROOTFS_LOOP}"
ROOT_UUID=$(blkid -o export -- ${ROOTFS} | sed -ne 's/^UUID=//p')
ROOT_PARTUUID=$(blkid -o export -- ${ROOTFS} | sed -ne 's/^PARTUUID=//p')
mkdir -p p1
sleep 1s
mount "${BOOT}" p1
echo ""
if [[ "$EXTLINUX" == "true" ]] && [[ "$EFI" == "false" ]]; then
	if [[ "$FAMILY" == "broadcom" ]]; then
		brcm_extlinux > /dev/null 2>&1
	else
		extlinux > /dev/null 2>&1
	fi
fi
if [[ "$BOOTCMD" == "true" ]] && [[ "$EFI" == "false" ]]; then
	bootcmd > /dev/null 2>&1
fi
if [[ "$PETITBOOT" == "true" ]] && [[ "$EFI" == "false" ]]; then
	# odroid g12/sm1
	odroid_bootcmd > /dev/null 2>&1
fi
if [[ "$BOOTINI" == "true" ]] && [[ "$EFI" == "false" ]]; then
	# odroid c1
	odroid_bootini > /dev/null 2>&1
fi
if [[ "$FAMILY" == "broadcom" ]]; then
	brcm_config > /dev/null 2>&1
fi
if [[ "$ARCH" == "arm" ]]; then
	# remove 100mb file
	ROOTFS="${ROOTFS_LOOP}"
	mkdir -p p2
	sleep .25
	mount "${ROOTFS}" p2
	rm -f p2/block.img
	sleep .50
	umount p2
	sleep .50
	rm -fdr p2
fi
sleep 3s
umount p1
rm -fdr p1
kpartx -d ${IMAGE_FILE}
rm -f kpart.txt
}
