#!/bin/bash

uboot_compilers (){
# install compiler
if [ $CCACHE -eq 1 ]; then
	if [[ `command -v ccache` ]]; then :; else apt install -y ccache; fi
fi
# compiler
if [ $CCACHE -eq 1 ]; then
	NATIVE="ccache ${COMPILER}"
	CROSS="ccache ${CROSS_COMPILE}${COMPILER}"
else
	NATIVE="${COMPILER}"
	CROSS="${CROSS_COMPILE}${COMPILER}"
fi
}

linux_compilers (){
# install compilers
if [ $CCACHE -eq 1 ]; then
	if [[ `command -v ccache` ]]; then :; else apt install -y ccache; fi
fi
if [ $CLANG -eq 1 ]; then
	if [[ "$HOST_CODENAME" == "bookworm" || "$HOST_CODENAME" == "jammy" ]]; then
		if [[ `command -v clang-14` ]] && [[ `command -v clang-15` ]]; then :; else apt install -y clang clang-14 clang-15 lld lld-14 lld-15 llvm; fi
	fi
fi
# compiler
if [ $CCACHE -eq 1 ]; then
	NATIVE="ccache ${COMPILER}"
	CROSS="ccache ${CROSS_COMPILE}${COMPILER}"
else
	NATIVE="${COMPILER}"
	CROSS="${CROSS_COMPILE}${COMPILER}"
fi
if [ $CLANG -eq 1 ]; then
	if [[ "$ARCH_EXT" == "armel" ]]; then
		echo -e "The builder does not support using clang to build ${ARCH_EXT}."
		exit 0
	fi
	if [[ "$HOST_CODENAME" == "bookworm" || "$HOST_CODENAME" == "jammy" ]]; then
		if [[ `command -v clang-14` ]] && [[ `command -v clang-15` ]]; then
			NATIVE="${CLANG_VERSION}"
			CROSS="${CLANG_VERSION}"
		fi
	else
		echo -e "${HOST_CODENAME} is not supported."
		exit 0
	fi
fi
}

ubuild (){
if [ $CROSSCOMPILE -eq 1 ]; then
	make -j${CORES} CC="${CROSS}" CROSS_COMPILE=${CROSS_COMPILE} $1
else
	make -j${CORES} CC="${NATIVE}" $1
fi
}

kbuild (){
if [ $CLANG -eq 1 ]; then CLANG_FLAGS="${CLANG_LLVM}"; fi
if [ $CROSSCOMPILE -eq 1 ]; then
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC="${CROSS}" CFLAGS="${CFLAGS}" CROSS_COMPILE=${CROSS_COMPILE} ${CLANG_FLAGS} $1
else
	make -j${CORES} KBUILD_DEBARCH=${DEBARCH} ARCH=${ARCH} CC="${NATIVE}" CFLAGS="${CFLAGS}" ${CLANG_FLAGS} $1
fi
}
