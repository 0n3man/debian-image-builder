# U-BOOT
aml_source(){
mkdir -p ${AMLSRC}
cp -f board.txt ${AMLSRC}/
cd ${AMLSRC}
rm -fdr amlogic-boot-fip-master blobs/amlogic-u-boot u-boot
}

odroidc4_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/odroid-c4_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/odroid-c4_defconfig
}

odroidn2_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/odroid-n2_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/odroid-n2_defconfig
}

lepotato_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/libretech-cc_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/libretech-cc_defconfig
}

uboot_current(){
if ls u-boot-${UBOOT_VERSION}.tar.gz > /dev/null 2>&1
	then echo -e "${YLW}u-boot-${UBOOT_VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/u-boot-${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz && echo_bdone;
fi
}

amlogic_uboot(){
# armstronge - https://gitlab.com/superna9999/amlogic-boot-fip/-/archive/master/amlogic-boot-fip-master.tar.gz
# libreeelc - https://github.com/LibreELEC/amlogic-boot-fip/archive/master.tar.gz
echo_bootbits
if ls amlogic-boot-fip-master.tar.gz > /dev/null 2>&1
	then echo -e "${YLW}amlogic-boot-fip-master.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/amlogic-boot-fip/amlogic-boot-fip-master.tar.gz && echo_bdone;
fi
echo
echo_duboot
uboot_current
echo
echo_extracts
if ls amlogic-boot-fip-master.tar.gz > /dev/null 2>&1
	then pv amlogic-boot-fip-master.tar.gz | tar -xzf - -C .;
fi
if ls u-boot-${UBOOT_VERSION}.tar.gz > /dev/null 2>&1
	then pv u-boot-${UBOOT_VERSION}.tar.gz | tar -xzf - -C .;
fi
mv -f u-boot-${UBOOT_VERSION} u-boot
cp board.txt u-boot/
cd u-boot
echo
#if `grep -Fx "odroidn2plus" "../board.txt" >/dev/null;`
#	then for i in ../${ON2PUBOOT}/*.patch; do patch -p1 < $i; done ;
#fi
export ARCH=arm64
case `grep -Fx "odroidc4" "../board.txt" >/dev/null; echo $?` in
  0)
odroidc4_defconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu- odroid-c4_defconfig;
	else make -j${CORES} CC=${NATIVE} odroid-c4_defconfig;
fi
    ;;
esac
case `grep -Fx "odroidn2" "../board.txt" >/dev/null; echo $?` in
  0)
odroidn2_defconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu- odroid-n2_defconfig;
	else make -j${CORES} CC=${NATIVE} odroid-n2_defconfig;
fi
    ;;
esac
case `grep -Fx "odroidn2plus" "../board.txt" >/dev/null; echo $?` in
  0)
odroidn2_defconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu- odroid-n2_defconfig;
	else make -j${CORES} CC=${NATIVE} odroid-n2_defconfig;
fi
    ;;
esac
case `grep -Fx "lepotato" "../board.txt" >/dev/null; echo $?` in
  0)
lepotato_defconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu- libretech-cc_defconfig;
	else make -j${CORES} CC=${NATIVE} libretech-cc_defconfig;
fi
    ;;
esac
case `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
echo
echo_menuconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu- menuconfig;
	else make -j${CORES} CC=${NATIVE} menuconfig;
fi
    ;;
esac
echo
echo_cuboot
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu-;
	else make -j${CORES} CC=${NATIVE};
fi
}

# FIP
lepotato_fip(){
export FIPDIR=$PWD/fip
mkdir -p fip
cp -f ../amlogic-boot-fip-master/lepotato/* fip/
cp -f u-boot.bin fip/bl33.bin

$FIPDIR/blx_fix.sh \
	fip/bl30.bin \
	fip/zero_tmp \
	fip/bl30_zero.bin \
	fip/bl301.bin \
	fip/bl301_zero.bin \
	fip/bl30_new.bin \
	bl30

$FIPDIR/acs_tool.pyc \
	fip/bl2.bin \
	fip/bl2_acs.bin \
	fip/acs.bin 0

$FIPDIR/blx_fix.sh \
	fip/bl2_acs.bin \
	fip/zero_tmp \
	fip/bl2_zero.bin \
	fip/bl21.bin \
	fip/bl21_zero.bin \
	fip/bl2_new.bin \
	bl2

$FIPDIR/aml_encrypt_gxl --bl3enc \
	--input fip/bl30_new.bin

$FIPDIR/aml_encrypt_gxl --bl3enc \
	--input fip/bl31.img

$FIPDIR/aml_encrypt_gxl --bl3enc \
	--input fip/bl33.bin

$FIPDIR/aml_encrypt_gxl --bl2sig \
	--input fip/bl2_new.bin \
	--output fip/bl2.n.bin.sig

$FIPDIR/aml_encrypt_gxl --bootmk \
	--output fip/u-boot.bin \
	--bl2 fip/bl2.n.bin.sig \
	--bl30 fip/bl30_new.bin.enc \
	--bl31 fip/bl31.img.enc \
	--bl33 fip/bl33.bin.enc
}

odroidc4_fip(){
export FIPDIR=$PWD/fip
mkdir -p fip
cp -f ../amlogic-boot-fip-master/odroid-c4/* fip/
cp -f u-boot.bin fip/bl33.bin

$FIPDIR/blx_fix.sh \
	fip/bl30.bin \
	fip/zero_tmp \
	fip/bl30_zero.bin \
	fip/bl301.bin \
	fip/bl301_zero.bin \
	fip/bl30_new.bin \
	bl30

$FIPDIR/blx_fix.sh \
	fip/bl2.bin \
	fip/zero_tmp \
	fip/bl2_zero.bin \
	fip/acs.bin \
	fip/bl21_zero.bin \
	fip/bl2_new.bin \
	bl2

$FIPDIR/aml_encrypt_g12a --bl30sig --input fip/bl30_new.bin \
					--output fip/bl30_new.bin.g12a.enc \
					--level v3
$FIPDIR/aml_encrypt_g12a --bl3sig --input fip/bl30_new.bin.g12a.enc \
					--output fip/bl30_new.bin.enc \
					--level v3 --type bl30
$FIPDIR/aml_encrypt_g12a --bl3sig --input fip/bl31.img \
					--output fip/bl31.img.enc \
					--level v3 --type bl31
$FIPDIR/aml_encrypt_g12a --bl3sig --input fip/bl33.bin --compress lz4 \
					--output fip/bl33.bin.enc \
					--level v3 --type bl33 --compress lz4
$FIPDIR/aml_encrypt_g12a --bl2sig --input fip/bl2_new.bin \
					--output fip/bl2.n.bin.sig
$FIPDIR/aml_encrypt_g12a --bootmk \
		--output fip/u-boot.bin \
		--bl2 fip/bl2.n.bin.sig \
		--bl30 fip/bl30_new.bin.enc \
		--bl31 fip/bl31.img.enc \
		--bl33 fip/bl33.bin.enc \
		--ddrfw1 fip/ddr4_1d.fw \
		--ddrfw2 fip/ddr4_2d.fw \
		--ddrfw3 fip/ddr3_1d.fw \
		--ddrfw4 fip/piei.fw \
		--ddrfw5 fip/lpddr4_1d.fw \
		--ddrfw6 fip/lpddr4_2d.fw \
		--ddrfw7 fip/diag_lpddr4.fw \
		--ddrfw8 fip/aml_ddr.fw \
		--ddrfw9 fip/lpddr3_1d.fw \
		--level v3
}

odroidn2_fip(){
export FIPDIR=$PWD/fip
mkdir -p fip
cp -f ../amlogic-boot-fip-master/odroid-n2/* fip/
cp -f u-boot.bin fip/bl33.bin

$FIPDIR/blx_fix.sh \
	fip/bl30.bin \
	fip/zero_tmp \
	fip/bl30_zero.bin \
	fip/bl301.bin \
	fip/bl301_zero.bin \
	fip/bl30_new.bin \
	bl30

$FIPDIR/blx_fix.sh \
	fip/bl2.bin \
	fip/zero_tmp \
	fip/bl2_zero.bin \
	fip/acs.bin \
	fip/bl21_zero.bin \
	fip/bl2_new.bin \
	bl2

$FIPDIR/aml_encrypt_g12b --bl30sig --input fip/bl30_new.bin \
					--output fip/bl30_new.bin.g12a.enc \
					--level v3
$FIPDIR/aml_encrypt_g12b --bl3sig --input fip/bl30_new.bin.g12a.enc \
					--output fip/bl30_new.bin.enc \
					--level v3 --type bl30
$FIPDIR/aml_encrypt_g12b --bl3sig --input fip/bl31.img \
					--output fip/bl31.img.enc \
					--level v3 --type bl31
$FIPDIR/aml_encrypt_g12b --bl3sig --input fip/bl33.bin --compress lz4 \
					--output fip/bl33.bin.enc \
					--level v3 --type bl33 --compress lz4
$FIPDIR/aml_encrypt_g12b --bl2sig --input fip/bl2_new.bin \
					--output fip/bl2.n.bin.sig
$FIPDIR/aml_encrypt_g12b --bootmk \
		--output fip/u-boot.bin \
		--bl2 fip/bl2.n.bin.sig \
		--bl30 fip/bl30_new.bin.enc \
		--bl31 fip/bl31.img.enc \
		--bl33 fip/bl33.bin.enc \
		--ddrfw1 fip/ddr4_1d.fw \
		--ddrfw2 fip/ddr4_2d.fw \
		--ddrfw3 fip/ddr3_1d.fw \
		--ddrfw4 fip/piei.fw \
		--ddrfw5 fip/lpddr4_1d.fw \
		--ddrfw6 fip/lpddr4_2d.fw \
		--ddrfw7 fip/diag_lpddr4.fw \
		--ddrfw8 fip/aml_ddr.fw \
		--ddrfw9 fip/lpddr3_1d.fw \
		--level v3
}

odroidn2plus_fip(){
export FIPDIR=$PWD/fip
mkdir -p fip
cp -f ../amlogic-boot-fip-master/odroid-n2-plus/* fip/
cp -f u-boot.bin fip/bl33.bin

$FIPDIR/blx_fix.sh \
	fip/bl30.bin \
	fip/zero_tmp \
	fip/bl30_zero.bin \
	fip/bl301.bin \
	fip/bl301_zero.bin \
	fip/bl30_new.bin \
	bl30

$FIPDIR/blx_fix.sh \
	fip/bl2.bin \
	fip/zero_tmp \
	fip/bl2_zero.bin \
	fip/acs.bin \
	fip/bl21_zero.bin \
	fip/bl2_new.bin \
	bl2

$FIPDIR/aml_encrypt_g12b --bl30sig --input fip/bl30_new.bin \
					--output fip/bl30_new.bin.g12a.enc \
					--level v3
$FIPDIR/aml_encrypt_g12b --bl3sig --input fip/bl30_new.bin.g12a.enc \
					--output fip/bl30_new.bin.enc \
					--level v3 --type bl30
$FIPDIR/aml_encrypt_g12b --bl3sig --input fip/bl31.img \
					--output fip/bl31.img.enc \
					--level v3 --type bl31
$FIPDIR/aml_encrypt_g12b --bl3sig --input fip/bl33.bin --compress lz4 \
					--output fip/bl33.bin.enc \
					--level v3 --type bl33 --compress lz4
$FIPDIR/aml_encrypt_g12b --bl2sig --input fip/bl2_new.bin \
					--output fip/bl2.n.bin.sig
$FIPDIR/aml_encrypt_g12b --bootmk \
		--output fip/u-boot.bin \
		--bl2 fip/bl2.n.bin.sig \
		--bl30 fip/bl30_new.bin.enc \
		--bl31 fip/bl31.img.enc \
		--bl33 fip/bl33.bin.enc \
		--ddrfw1 fip/ddr4_1d.fw \
		--ddrfw2 fip/ddr4_2d.fw \
		--ddrfw3 fip/ddr3_1d.fw \
		--ddrfw4 fip/piei.fw \
		--ddrfw5 fip/lpddr4_1d.fw \
		--ddrfw6 fip/lpddr4_2d.fw \
		--ddrfw7 fip/diag_lpddr4.fw \
		--ddrfw8 fip/aml_ddr.fw \
		--ddrfw9 fip/lpddr3_1d.fw \
		--level v3
}

# BINARY
lepotato_binary(){
mkdir -p ../${BINLEP}
cp -f fip/u-boot.bin ../${BINLEP}
cp -f fip/u-boot.bin.sd.bin ../${BINLEP}
cp -f tools/mkimage ../${BINLEP}
echo_done
}

odroidc4_binary(){
mkdir -p ../${BINODC4}
cp -f fip/u-boot.bin ../${BINODC4}
cp -f fip/u-boot.bin.sd.bin ../${BINODC4}
cp -f tools/mkimage ../${BINODC4}
echo_done
}

odroidn2_binary(){
mkdir -p ../${BINODN2}
cp -f fip/u-boot.bin ../${BINODN2}
cp -f fip/u-boot.bin.sd.bin ../${BINODN2}
cp -f tools/mkimage ../${BINODN2}
echo_done
}

odroidn2plus_binary(){
mkdir -p ../${BINODN2P}
cp -f fip/u-boot.bin ../${BINODN2P}
cp -f fip/u-boot.bin.sd.bin ../${BINODN2P}
cp -f tools/mkimage ../${BINODN2P}
echo_done
}

amlogic_uboot_string(){
aml_source
amlogic_uboot
if `grep -Fx "odroidc4" "../board.txt" >/dev/null;`
	then odroidc4_fip && odroidc4_binary;
fi
if `grep -Fx "odroidn2" "../board.txt" >/dev/null;`
	then odroidn2_fip && odroidn2_binary;
fi
if `grep -Fx "odroidn2plus" "../board.txt" >/dev/null;`
	then odroidn2plus_fip && odroidn2plus_binary;
fi
if `grep -Fx "lepotato" "../board.txt" >/dev/null;`
	then lepotato_fip && lepotato_binary;
fi
}

### KERNEL
aml_kernel(){
mkdir -p ${AMLSRC}
cp -f board.txt ${AMLSRC}/
cd ${AMLSRC}
}

amlogic_boards(){
if `grep -Fx "odroidc4" "../../board.txt" >/dev/null;`
	then for i in ../${AMLOGIC}/c4/*.patch; do patch -p1 < $i; done
fi
if `grep -Fx "odroidn2" "../../board.txt" >/dev/null;`
	then for i in ../${AMLOGIC}/n2/*.patch; do patch -p1 < $i; done
fi
if `grep -Fx "odroidn2plus" "../../board.txt" >/dev/null;`
	then for i in ../${AMLOGIC}/n2/*.patch; do patch -p1 < $i; done
fi
}

# LE POTATO
potato_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/amlogic-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/amlogic-nc-packaging.patch ;
fi
#for i in ../${AMLOGIC}/*.patch; do patch -p1 < $i; done
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

# ODROIDC4
odroidc4_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/amlogic-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/amlogic-nc-packaging.patch ;
fi
amlogic_boards
for i in ../${AMLOGIC}/*.patch; do patch -p1 < $i; done
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

# ODROIDN2
odroidn2_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/amlogic-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/amlogic-nc-packaging.patch ;
fi
amlogic_boards
for i in ../${AMLOGIC}/*.patch; do patch -p1 < $i; done
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

lepotato_check(){
if ls ${BINLEP}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINLEP}/tmp && mv -f ${BINLEP}/*.deb ${BINLEP}/tmp;
fi
}

odroidn2_check(){
if ls ${BINODN2}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINODN2}/tmp && mv -f ${BINODN2}/*.deb ${BINODN2}/tmp;
fi
}

odroidn2plus_check(){
if ls ${BINODN2P}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINODN2P}/tmp && mv -f ${BINODN2P}/*.deb ${BINODN2P}/tmp;
fi
}

odroidc4_check(){
if ls ${BINODC4}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINODC4}/tmp && mv -f ${BINODC4}/*.deb ${BINODC4}/tmp;
fi
}

amlogic_output(){
if `grep -Fx "lepotato" "../board.txt" >/dev/null;`
	then lepotato_check && mkdir -p ../output/lepotato && mv -f *.deb ../output/lepotato/;
fi
if `grep -Fx "odroidn2" "../board.txt" >/dev/null;`
	then odroidn2_check && mkdir -p ../output/odroidn2 && mv -f *.deb ../output/odroidn2/;
fi
if `grep -Fx "odroidn2plus" "../board.txt" >/dev/null;`
	then odroidn2plus_check && mkdir -p ../output/odroidn2plus && mv -f *.deb ../output/odroidn2plus/;
fi
if `grep -Fx "odroidc4" "../board.txt" >/dev/null;`
	then odroidc4_check && mkdir -p ../output/odroidc4 && mv -f *.deb ../output/odroidc4/;
fi
}

### STAGE1
lepotato_flashbin(){
dd if=output/lepotato/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1 count=442
dd if=output/lepotato/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=512 skip=1 seek=1
}

odroidc4_flashbin(){
dd if=output/odroidc4/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=1 count=442 conv=fsync
dd if=output/odroidc4/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=512 skip=1 seek=1 conv=fsync
}

odroidn2_flashbin(){
case `grep -Fx "emmc=1" "userdata.txt" >/dev/null; echo $?` in
  0)
    dd if=output/odroidn2/u-boot.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=1
    ;;
  1)
    dd if=output/odroidn2/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=1 count=442 conv=fsync
    dd if=output/odroidn2/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=512 skip=1 seek=1 conv=fsync
    ;;
esac
}

odroidn2plus_flashbin(){
case `grep -Fx "emmc=1" "userdata.txt" >/dev/null; echo $?` in
  0)
    dd if=output/odroidn2plus/u-boot.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=1
    ;;
  1)
    dd if=output/odroidn2plus/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=1 count=442 conv=fsync
    dd if=output/odroidn2plus/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=512 skip=1 seek=1 conv=fsync
    ;;
esac
}

partition(){
image_size
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
2248
a
t
b
4101561

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
sync
umount p1
if `grep -Fx "lepotato" "board.txt" >/dev/null;`
    then lepotato_flashbin
fi
if `grep -Fx "odroidc4" "board.txt" >/dev/null;`
    then odroidc4_flashbin
fi
if `grep -Fx "odroidhc4" "board.txt" >/dev/null;`
    then odroidc4_flashbin
fi
if `grep -Fx "odroidn2" "board.txt" >/dev/null;`
    then odroidn2_flashbin
fi
if `grep -Fx "odroidn2plus" "board.txt" >/dev/null;`
    then odroidn2plus_flashbin
fi
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

partition_uuid(){
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
echo ROOT_UUID='"'$ROOT_UUID'"' > part-uuid.txt

source part-uuid.txt
}

create_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

### STAGE2
lepotato_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    fdt /boot/amlogic/meson-gxl-s905x-libretech-cc.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 loglevel=1 elevator=noop init=/sbin/init
EOF
echo Done.
}

odroidc4_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    fdt /boot/amlogic/meson-sm1-odroid-c4.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 elevator=noop loglevel=1 init=/sbin/init
EOF
echo Done.
}

odroidhc4_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    fdt /boot/amlogic/meson-sm1-odroid-hc4.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 elevator=noop loglevel=1 init=/sbin/init
EOF
echo Done.
}

odroidn2_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    fdt /boot/amlogic/meson-g12b-odroid-n2.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 elevator=noop loglevel=1 init=/sbin/init
EOF
echo Done.
}

odroidn2plus_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    fdt /boot/amlogic/meson-g12b-odroid-n2-plus.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 elevator=noop max_freq_a53=1908 max_freq_a73=2208 maxcpus=6 loglevel=1 usbhid.quirks=0x0eef:0x0005:0x0004 usb-storage.quirks=0x1058:0x259b:u,0x152d:0x0576:u parkmode_disable_ss_quirk=1 init=/sbin/init
EOF
echo Done.
}

lepotato_led_triggers(){
echo
echo Creating led trigger
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
echo 0 > /sys/class/leds/librecomputer:system-status/brightness
echo 1 > /sys/class/leds/librecomputer:blue/brightness
sleep 2s
echo 0 > /sys/class/leds/librecomputer:blue/brightness
EOF
echo Done.
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/
}

odroidc4_led_triggers(){
echo
echo Creating led trigger
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
echo 0 > /sys/class/leds/blue:status/brightness
EOF
echo Done.
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/
}

odroidn2_led_triggers(){
echo
echo Creating led trigger
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
echo "none" >> /sys/class/leds/../../devices/platform/leds/leds/n2:blue/trigger
EOF
echo Done.
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/
}

odroid_tweak(){
cd ~
mv -f odroid-tweaks /usr/bin/odroid-tweaks
chmod +x /usr/bin/odroid-tweaks

tee /etc/systemd/system/odroid-tweak.service <<EOF
[Unit]
Description=ODROID Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/odroid-tweaks
After=network.target
After=network-online.target

[Service]
Type=forking
ExecStart=/usr/bin/odroid-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable odroid-tweak
echo Done.
}

enable_services(){
sleep 1s
systemctl enable rc-local
systemctl enable ifplugd
if `grep -Fx 'DISTRO="debian"' "/root/userdata.txt" >/dev/null;`
	then systemctl enable resolvconf;
fi
if `grep -Fx 'DISTRO="kali"' "/root/userdata.txt" >/dev/null;`
	then systemctl enable resolvconf;
fi
systemctl enable haveged
systemctl enable zramswap
update-rc.d firstboot defaults 2
systemctl enable firstboot
systemctl enable governor
systemctl enable leds
if ls /etc/systemd/system/multi-user.target.wants/ondemand.service
	then systemctl disable ondemand;
fi
}
