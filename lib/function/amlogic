# STAGE1
partition(){
image_size
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
2248
a
t
b
4101561

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
sync
umount p1
if [[ `grep -w "lepotato" "board.txt"` ]]; then
	lepotato_flashbin;
else
	if [[ `grep -w "odroidc4" "board.txt"` ]]; then
		odroidc4_flashbin;
	else
		if [[ `grep -w "odroidhc4" "board.txt"` ]]; then
			odroidc4_flashbin;
		else
			if [[ `grep -w "odroidn2" "board.txt"` ]]; then
				odroidn2_flashbin;
			else
				if [[ `grep -w "odroidn2plus" "board.txt"` ]]; then
					odroidn2plus_flashbin;
				fi
			fi
		fi
	fi
fi
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

lepotato_flashbin(){
dd if=output/lepotato/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1 count=442
dd if=output/lepotato/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=512 skip=1 seek=1
}

odroidc4_flashbin(){
dd if=output/odroidc4/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=1 count=442 conv=fsync
dd if=output/odroidc4/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=512 skip=1 seek=1 conv=fsync
}

odroidn2_flashbin(){
case `grep -Fx "emmc=1" "userdata.txt" >/dev/null; echo $?` in
  0)
    dd if=output/odroidn2/u-boot.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=1
    ;;
  1)
    dd if=output/odroidn2/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=1 count=442 conv=fsync
    dd if=output/odroidn2/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=512 skip=1 seek=1 conv=fsync
    ;;
esac
}

odroidn2plus_flashbin(){
case `grep -Fx "emmc=1" "userdata.txt" >/dev/null; echo $?` in
  0)
    dd if=output/odroidn2plus/u-boot.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=1
    ;;
  1)
    dd if=output/odroidn2plus/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=1 count=442 conv=fsync
    dd if=output/odroidn2plus/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=512 skip=1 seek=1 conv=fsync
    ;;
esac
}

partition_uuid(){
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
echo ROOT_UUID='"'$ROOT_UUID'"' > part-uuid.txt

source part-uuid.txt
}

create_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

# STAGE2
lepotato_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    fdt /boot/amlogic/meson-gxl-s905x-libretech-cc.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

odroidc4_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    # mainline
    #fdt /boot/amlogic/meson-sm1-odroid-c4.dtb
    # legacy
    fdt /boot/amlogic/meson64_odroidc4.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

odroidhc4_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    fdt /boot/amlogic/meson-sm1-odroid-hc4.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

odroidn2_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    # mainline
    #fdt /boot/amlogic/meson-g12b-odroid-n2.dtb
    # legacy
    fdt /boot/amlogic/meson64_odroidn2.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 mitigations=off loglevel=1 init=/sbin/init
EOF
echo Done.
}

odroidn2plus_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/amlogic/
    # mainline
    #fdt /boot/amlogic/meson-g12b-odroid-n2-plus.dtb
    # legacy
    fdt /boot/amlogic/meson64_odroidn2_plus.dtb
    append earlyprintk console=tty1 console=ttyAML0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 no_console_suspend fsck.repair=yes net.ifnames=0 mitigations=off loglevel=1 usbhid.quirks=0x0eef:0x0005:0x0004 usb-storage.quirks=0x1058:0x259b:u,0x152d:0x0576:u parkmode_disable_ss_quirk=1 init=/sbin/init
EOF
echo Done.
}

odroid_udev_rules(){
echo
echo Creating Odroid udev rules.
tee /etc/udev/rules.d/10-odroid.rules <<EOF
# Misc video rules
KERNEL=="event*", SUBSYSTEM=="input", MODE="0777"

# Automatic Disk Scheduler
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="0",ATTR{queue/scheduler}="noop"
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1",ATTR{queue/scheduler}="deadline"
ACTION=="add|change", KERNEL=="mmcblk[0-9]", ATTR{queue/rotational}=="0",ATTR{queue/scheduler}="noop"
EOF
}

lepotato_led_triggers(){
echo
echo Creating led trigger
cd ~
mv -f lepotato /usr/local/sbin/led-trigger
chmod +x /usr/local/sbin/led-trigger
chown -R root:root /usr/local/sbin/
echo Done.
}

odroidc4_led_triggers(){
echo
echo Creating led trigger
cd ~
mv -f odroidc4 /usr/local/sbin/led-trigger
chmod +x /usr/local/sbin/led-trigger
chown -R root:root /usr/local/sbin/
echo Done.
}

odroidn2_led_triggers(){
echo
echo Creating led trigger
cd ~
mv -f odroidn2 /usr/local/sbin/led-trigger
chmod +x /usr/local/sbin/led-trigger
chown -R root:root /usr/local/sbin/
echo Done.
}

led_service(){
echo
echo Creating led service.
sleep 1s
tee /etc/systemd/system/leds.service <<EOF
[Unit]
Description=Set LEDs
ConditionPathExists=/usr/local/sbin/led-trigger

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/sbin/led-trigger &>/dev/null

[Install]
WantedBy=multi-user.target
EOF
systemctl enable leds
}

odroid_tweak(){
echo
echo Creating Odroid tweaks service.
cd ~
mv -f odroid-tweaks /usr/bin/odroid-tweaks
chmod +x /usr/bin/odroid-tweaks

tee /etc/systemd/system/odroid-tweak.service <<EOF
[Unit]
Description=ODROID Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/odroid-tweaks
After=network.target
After=network-online.target

[Service]
Type=forking
ExecStart=/usr/bin/odroid-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable odroid-tweak
echo
}

lepotato_tweak(){
echo
echo Creating Le Potato tweaks service.
cd ~
mv -f lepotato-tweaks /usr/bin/lepotato-tweaks
chmod +x /usr/bin/lepotato-tweaks

tee /etc/systemd/system/lepotato-tweak.service <<EOF
[Unit]
Description=Le Potato Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/lepotato-tweaks
After=network.target network-online.target ifup@.service

[Service]
Type=forking
ExecStart=/usr/bin/lepotato-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable lepotato-tweak
echo
}

enable_services(){
sleep 1s
systemctl enable rc-local
systemctl enable ifplugd
if [[ `grep -w 'DISTRO="debian"' "/root/userdata.txt"` ]]; then
	systemctl enable resolvconf;
else
	if [[ `grep -w 'DISTRO="kali"' "/root/userdata.txt"` ]]; then
		systemctl enable resolvconf;
	fi
fi
systemctl enable haveged
systemctl enable zramswap
systemctl enable firstboot
systemctl enable governor
if [ -e /etc/systemd/system/multi-user.target.wants/ondemand.service ]; then
	systemctl disable ondemand;
fi
}
