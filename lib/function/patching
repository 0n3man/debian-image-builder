#!/bin/bash

# check log and report
check_log(){
if [[ -f "${LOG_FILE}" ]]; then
	PATHTOFILE=`echo ${LOG_FILE} | sed 's/..\/..\///g'`
	if [[ `grep "Skipping patch" "${LOG_FILE}"` ]]; then
		SKIPPING="true"
		grep "Skipping patch" "${LOG_FILE}" | echo -en " ${PNK}[${FIN}"${WHT}skipping${FIN} ${WHT}`wc -l`${FIN}"${PNK}]${FIN}"
	else
		SKIPPING="false"
	fi
	if [[ `grep "FAILED" "${LOG_FILE}"` ]]; then
		FAILED="true"
		grep "FAILED" "${LOG_FILE}" | echo -en " ${PNK}[${FIN}"${RED}fails${FIN} ${WHT}`wc -l`${FIN}"${PNK}]${FIN}"
		if [ $VERBOSE -eq 1 ]; then
			echo -en " ${WHT}log: ${PATHTOFILE}${FIN}"
			exit 0
		fi
	else
		FAILED="false"
	fi
	if [[ "$SKIPPING" == "true" ]] && [[ "$FAILED" == "false" ]]; then
		echo -en " ${PNK}[${FIN}${YLW}done${FIN}${PNK}]${FIN}"
	fi
	if [[ "$SKIPPING" == "false" ]] && [[ "$FAILED" == "false" ]]; then
		echo -en " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
	fi
	echo -en " ${WHT}log: ${PATHTOFILE}${FIN}"
	echo -e ""
fi
}

# uboot patch log
uboot_log(){
LOG_DIR="../../output/logs"
LOG_FILE="${LOG_DIR}/${BOARD}-u-boot-patch.log"
if [[ -f "${LOG_FILE}" ]]; then
	mv -f ${LOG_FILE} ${LOG_FILE}.1
	echo "U-Boot ${UBOOT_VERSION}" > ${LOG_FILE}
	echo `date` >> ${LOG_FILE}
else
	mkdir -p ${LOG_DIR}
	echo "U-Boot ${UBOOT_VERSION}" > ${LOG_FILE}
	echo `date` >> ${LOG_FILE}
fi
}

# linux patch log
linux_log(){
LOG_DIR="../../output/logs"
LOG_FILE="${LOG_DIR}/${BOARD}-patch.log"
if [[ -f "${LOG_FILE}" ]]; then
	mv -f ${LOG_FILE} ${LOG_FILE}.1
	echo "Linux ${VERSION}" > ${LOG_FILE}
	echo `date` >> ${LOG_FILE}
else
	mkdir -p ${LOG_DIR}
	echo "Linux ${VERSION}" > ${LOG_FILE}
	echo `date` >> ${LOG_FILE}
fi
}

# linux user patch log
linux_user_log(){
LOG_DIR="../../output/logs"
LOG_FILE="${LOG_DIR}/${BOARD}-user-patch.log"
if [[ -f "${LOG_FILE}" ]]; then
	mv -f ${LOG_FILE} ${LOG_FILE}.1
	echo "Linux ${VERSION}" > ${LOG_FILE}
	echo `date` >> ${LOG_FILE}
else
	mkdir -p ${LOG_DIR}
	echo "Linux ${VERSION}" > ${LOG_FILE}
	echo `date` >> ${LOG_FILE}
fi
}

# user patches
user_patches(){
if [[ `ls ../../${USERPATCHES}/*.patch` ]] > /dev/null 2>&1; then
	linux_user_log
	echo "" >> ${LOG_FILE}
	echo "# APPLYING USER PATCHES" >> ${LOG_FILE}
	echo -en "${WHT}User Patches${FIN} ${PNK}[${FIN}${WHT}applying${FIN}${PNK}]${FIN}"
	for i in ../../${USERPATCHES}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	check_log
fi
}

# u-boot patching
uboot_patching(){
# apply patches
if [[ -d "../../${UBOOT_PATCHDIR}/${UBOOT_VERSION}/${BOARD}" ]] || \
	[[ -d "../../${UBOOT_PATCHDIR}/${UBOOT_VERSION}/${FAMILY_EXT}" ]] || \
		[[ `ls ../../${UBOOT_PATCHDIR}/${UBOOT_VERSION}/all/*.patch` ]] > /dev/null 2>&1; then
	uboot_log
	echo ""
	echo "" >> ${LOG_FILE}
	echo "# APPLYING PATCHES" >> ${LOG_FILE}
	echo -en "${WHT}Patches${FIN} ${PNK}[${FIN}${WHT}applying${FIN}${PNK}]${FIN}"
	if [[ `ls ../../${UBOOT_PATCHDIR}/${UBOOT_VERSION}/${BOARD}/*.patch` ]] > /dev/null 2>&1; then
		for i in ../../${UBOOT_PATCHDIR}/${UBOOT_VERSION}/${BOARD}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
	if [[ `ls ../../${UBOOT_PATCHDIR}/${UBOOT_VERSION}/${FAMILY_EXT}/*.patch` ]] > /dev/null 2>&1; then
		for i in ../../${UBOOT_PATCHDIR}/${UBOOT_VERSION}/${FAMILY_EXT}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
	if [[ `ls ../../${UBOOT_PATCHDIR}/${UBOOT_VERSION}/all/*.patch` ]] > /dev/null 2>&1; then
		for i in ../../${UBOOT_PATCHDIR}/${UBOOT_VERSION}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
fi
# check log and report
check_log
# clean
if [[ `find . -name '*.orig'` ]]; then find . -name '*.orig' -delete; fi
if [[ `find . -name '*.rej'` ]]; then find . -name '*.rej' -delete; fi
echo -e ""
}

# linux apply patches
apply(){
linux_log
echo ""
echo "" >> ${LOG_FILE}
echo "# APPLYING PATCHES" >> ${LOG_FILE}
echo -en "${WHT}Patches${FIN} ${PNK}[${FIN}${WHT}applying${FIN}${PNK}]${FIN}"
if [[ -d "../../${LPATCHESALL}/${LINUX_VERSION}" ]]; then
	if [[ `ls ../../${LPATCHESALL}/${LINUX_VERSION}/*.patch` ]] > /dev/null 2>&1; then
		for i in ../../${LPATCHESALL}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
fi
# wireless
if [ $RTW88 -eq 1 ] && [[ -d "../../${WIRELESSPATCHES}/rtw88/${LINUX_VERSION}" ]]; then
	if [[ `ls ../../${WIRELESSPATCHES}/rtw88/${LINUX_VERSION}/*.patch` ]] > /dev/null 2>&1; then
		echo "# ${WIRELESSPATCHES}/rtw88/${LINUX_VERSION}" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
		for i in ../../${WIRELESSPATCHES}/rtw88/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
	if [[ `ls ../../${WIRELESSPATCHES}/rtw88/hack/*.patch` ]] > /dev/null 2>&1; then
		echo "# ${WIRELESSPATCHES}/rtw88/hack" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
		for i in ../../${WIRELESSPATCHES}/rtw88/hack/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
fi
if [ $RTL88XXAU -eq 1 ] && [[ -d "../../${WIRELESSPATCHES}/rtl88xxau/${LINUX_VERSION}" ]]; then
	if [[ `ls ../../${WIRELESSPATCHES}/rtl88xxau/${LINUX_VERSION}/*.patch` ]] > /dev/null 2>&1; then
		echo "# ${WIRELESSPATCHES}/rtl88xxau/${LINUX_VERSION}" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
		for i in ../../${WIRELESSPATCHES}/rtl88xxau/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
fi
# general
if [[ -d "../../${LINUX_PATCHDIR}/${LINUX_VERSION}" ]]; then
	if [[ `ls ../../${LINUX_PATCHDIR}/${LINUX_VERSION}/*.patch` ]] > /dev/null 2>&1; then
		echo "# ${LINUX_PATCHDIR}/${LINUX_VERSION}" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
		for i in ../../${LINUX_PATCHDIR}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
fi
# allwinner: all
if [[ "$FAMILY" == "allwinner" ]] && [[ -d "../../${LINUX_PATCHDIR}/all" ]]; then
	if [[ `ls ../../${LINUX_PATCHDIR}/all/*.patch` ]] > /dev/null 2>&1; then
		echo "# ${LINUX_PATCHDIR}/all" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
		for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
fi
# rockchip: all
if [[ "$FAMILY" == "rockchip" ]] && [[ -d "../../${LINUX_PATCHDIR}/../all" ]]; then
	if [[ "$FAMILY_EXT" == "rk3288" || "$FAMILY_EXT" == "rk3328" || "$FAMILY_EXT" == "rk3399" ]]; then
		if [[ `ls ../../${LINUX_PATCHDIR}/../all/*.patch` ]] > /dev/null 2>&1; then
			echo "# ${LINUX_PATCHDIR}/../all" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
			for i in ../../${LINUX_PATCHDIR}/../all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
		fi
	fi
fi
# overlays
if [[ -d "../../${OVERLAYPATCHES}/${LINUX_VERSION}" ]] && [[ -d "../../${OVERLAYPATCHES}/${ARCH}" ]]; then
	if [[ "$FAMILY" == "allwinner" || "$FAMILY" == "amlogic" || "$FAMILY" == "samsung" ]]; then
		if [[ `ls ../../${OVERLAYPATCHES}/${LINUX_VERSION}/*.patch` ]] > /dev/null 2>&1; then
			echo "# ${OVERLAYPATCHES}/${LINUX_VERSION}" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
			for i in ../../${OVERLAYPATCHES}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
		fi
		if [[ `ls ../../${OVERLAYPATCHES}/${ARCH}/{Makefile,*.dts}` ]] > /dev/null 2>&1; then
			mkdir -p arch/${ARCH}/boot/dts/overlays
			echo "# ${OVERLAYPATCHES}/${ARCH}" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
			ls ../../${OVERLAYPATCHES}/${ARCH}/{Makefile,*.dts} | sed 's/..\/..\///g' >> ${LOG_FILE}
			cp -fr ../../${OVERLAYPATCHES}/${ARCH}/{Makefile,*.dts} arch/${ARCH}/boot/dts/overlays/
		fi
	fi
fi
}

linux_patching(){
# packaging
linux_packaging
# patching
if [[ "$FORCE_GITHUB" = "true" ]] && [[ "$LINUX_PATCHING" == "true" ]]; then
	# Allow patching against the vendor source tree.
	# As this is a special use case both variables need to be set
	# to true to enable the feature. This requires user attention
	# and knowledge of patch creation.
	#
	# Where to place patches? 'patches/$FAMILY/$GITHUB_BRANCH_VERSION'
	# This may vary depending on the platform so review the LINUX_PATCHDIR
	# variable in the $board file.
	LINUX_VERSION="${GITHUB_BRANCH_VERSION}"
fi
if [[ "$LINUX_PATCHING" == "true" ]]; then
	apply; check_log
fi
user_patches
# clean
if [[ `find . -name '*.orig'` ]]; then find . -name '*.orig' -delete; fi
if [[ `find . -name '*.rej'` ]]; then find . -name '*.rej' -delete; fi
# change some of the data types to userspace patch
cp -f ../../packaging/headers-byteshift.patch headers-byteshift.patch
# firmware
if [[ "$BOARD" == "odroidxu4" ]] && [[ -e "../../files/firmware/edid" ]]; then
	mkdir -p firmware
	cp -fr ../../files/firmware/edid firmware/;
fi
echo ""
}
