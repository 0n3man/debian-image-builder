# PATCHING
allwinner-sun50i_packaging(){
sed -i 's/packagename=linux-image-$version/packagename=sun50i-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=sun50i-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename=sun50i-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=sun50i-linux-headers/g' scripts/package/mkdebian
}

allwinner-sun8i_packaging(){
sed -i 's/packagename=linux-image-$version/packagename=sun8i-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=sun8i-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename=sun8i-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=sun8i-linux-headers/g' scripts/package/mkdebian
}

amlogic_packaging(){
sed -i 's/packagename=linux-image-$version/packagename=meson64-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=meson64-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename=meson64-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=meson64-linux-headers/g' scripts/package/mkdebian
}

raspberrypi_packaging(){
sed -i 's/packagename=linux-image-$version/packagename=raspberrypi-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=raspberrypi-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename=raspberrypi-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=raspberrypi-linux-headers/g' scripts/package/mkdebian
}

rockchip_packaging(){
sed -i 's/packagename=linux-image-$version/packagename=rockchip64-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=rockchip64-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename=rockchip64-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename=rockchip64-linux-headers/g' scripts/package/mkdebian
}

user_patches(){
if [[ `ls ../../${USERPATCHES}/*.patch` ]] > /dev/null 2>&1; then
	echo ""
	echo -e "${WHT}Applying user patches${FIN} ..."
	for i in ../../${USERPATCHES}/*.patch; do patch -p1 < $i; done;
	echo_done;
fi
}

log_setup(){
LOG_DIR="../../output/logs"
LOG_FILE="${LOG_DIR}/${BOARD}-patch.log"
if [ -e ${LOG_FILE} ]; then
	mv -f ${LOG_FILE} ${LOG_FILE}.1;
	echo `date` > ${LOG_FILE};
else
	mkdir -p ${LOG_DIR};
	echo `date` > ${LOG_FILE};
fi
}

# create dry run log
dryrun(){
echo -en "${WHT}Patching${FIN} ${PNK}[${FIN}${YLW}dry run${FIN}${PNK}]${FIN}";
if [[ "$FAMILY" == "allwinner" ]]; then
	for i in ../../${LINUX_PATCHDIR}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
fi
if [[ "$BOARD" == "lepotato" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${BOARD}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
fi
if [[ "$BOARD" == "radxazero" ]]; then
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/${BOARD}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
		for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	else
		for i in ../../${LINUX_PATCHDIR}/${BOARD}/edge/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
		for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	if [ -e ../tobetter.txt ]; then
		:;
	else
		for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
	for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$BOARD" == "raspi4" ]]; then
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	else
		for i in ../../${LINUX_PATCHDIR}/edge/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	if [ -e ../hardkernel.txt ]; then
		:;
	else
		if [[ "$LINUX_VERSION" == "5.15" ]]; then
			for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
			for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
		else
			for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/edge/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
			for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
		fi
	fi
fi
}

# check log and report
check(){
if [[ `grep "Skipping patch" "${LOG_FILE}"` ]]; then
	grep "Skipping patch" "${LOG_FILE}" | echo -en " ${PNK}[${FIN}"${WHT}skipping${FIN} ${WHT}`wc -l`${FIN}"${PNK}]${FIN}";
fi
if [[ `grep "FAILED" "${LOG_FILE}"` ]]; then
	grep "FAILED" "${LOG_FILE}" | echo -en " ${PNK}[${FIN}"${RED}fails${FIN} ${WHT}`wc -l`${FIN}"${PNK}]${FIN}";
	if [ $verbose -eq 1 ]; then
		exit 0;
	fi
fi
}

# apply patches
apply(){
echo "" >> ${LOG_FILE}
echo "# APPLYING PATCHES" >> ${LOG_FILE}
echo -e " ${PNK}[${FIN}${GRN}applying${FIN}${PNK}]${FIN}";
if [[ "$FAMILY" == "allwinner" ]]; then
	for i in ../../${LINUX_PATCHDIR}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
fi
if [[ "$BOARD" == "lepotato" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${BOARD}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$BOARD" == "radxazero" ]]; then
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/${BOARD}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
		for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	else
		for i in ../../${LINUX_PATCHDIR}/${BOARD}/edge/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
		for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	if [ -e ../tobetter.txt ]; then
		:;
	else
		for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
	for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$BOARD" == "raspi4" ]]; then
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	else
		for i in ../../${LINUX_PATCHDIR}/edge/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	if [ -e ../hardkernel.txt ]; then
		:;
	else
		if [[ "$LINUX_VERSION" == "5.15" ]]; then
			for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
			for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
		else
			for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/edge/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
			for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
		fi
	fi
fi
}

# ALLWINNER
allwinner_patching(){
echo ""
# packaging
patch -p1 < ../../${PACKAGING}/general-packaging.patch > /dev/null 2>&1
if [[ "$FAMILY_EXT" == "sun8i" ]]; then
	allwinner-sun8i_packaging;
fi
if [[ "$FAMILY_EXT" == "sun50i" ]]; then
	allwinner-sun50i_packaging;
fi
# patching
dryrun; check; apply; user_patches;
cp -f ../../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch
echo ""
}

# AMLOGIC
amlogic_patching(){
echo ""
# packaging
patch -p1 < ../../${PACKAGING}/general-packaging.patch > /dev/null 2>&1
amlogic_packaging
# patching
dryrun; check; apply; user_patches;
cp -f ../../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch
echo ""
}

## BROADCOM
raspberrypi_patching(){
echo ""
# packaging
patch -p1 < ../../${PACKAGING}/general-packaging.patch > /dev/null 2>&1
raspberrypi_packaging
# patching
dryrun; check; apply; user_patches;
cp -f ../../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
echo ""
}

## ROCKCHIP
rockchip_patching(){
echo ""
# packaging
if [ -e ../hardkernel.txt ]; then
	patch -p1 < ../../${PACKAGING}/odroidm1-packaging.patch > /dev/null 2>&1;
else
	patch -p1 < ../../${PACKAGING}/general-packaging.patch > /dev/null 2>&1;
fi
rockchip_packaging
# patching
dryrun; check; apply; user_patches;
cp -f ../../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
echo ""
}
