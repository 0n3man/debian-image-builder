#!/bin/bash

git_download (){
if [[ `wget -S --spider ${GIT_URL}/${GIT_OWN}/${GIT_REPO}/${GIT_BLOB}/${GIT_BRANCH}/Makefile 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	git_option
	if [[ "$GIT_FAST" == "true" ]]; then git_verify; fi
	if [[ -d "${GIT_REPO}-${GIT_BRANCH}" ]] && [[ -d "${GIT_REPO}-${GIT_BRANCH}.backup" ]]; then
		echo -en "${GIT_REPO}-${GIT_BRANCH}"
		echo -en " ${PNK}[${FIN}${YLW}cleaning${FIN}${PNK}]${FIN}"
		rm -fdr ${GIT_REPO}-${GIT_BRANCH}
		echo -en " ${PNK}[${FIN}${WHT}restoring${FIN}${PNK}]${FIN}"
		mv -f ${GIT_REPO}-${GIT_BRANCH}.backup ${GIT_REPO}-${GIT_BRANCH}
		if [[ "$GIT_FAST" == "false" ]]; then
			cd ${GIT_REPO}-${GIT_BRANCH}; git pull -q; make clean; cd ..
		else
			cd ${GIT_REPO}-${GIT_BRANCH}; make clean; cd ..
		fi
		echo -en " ${PNK}[${FIN}${WHT}creating backup${FIN}${PNK}]${FIN}"
		cp -r ${GIT_REPO}-${GIT_BRANCH} ${GIT_REPO}-${GIT_BRANCH}.backup
		echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
	else
		echo -e "This may take a while ..."
		echo ""
		git clone ${GIT_OPT} -b ${GIT_BRANCH} ${GIT_URL}/${GIT_OWN}/${GIT_REPO}.git ${GIT_REPO}-${GIT_BRANCH}
		sleep .50
		cd ${GIT_REPO}-${GIT_BRANCH}; make clean; cd ..
		echo ""
		echo -en "${GIT_REPO}-${GIT_BRANCH}"
		echo -en " ${PNK}[${FIN}${WHT}creating backup${FIN}${PNK}]${FIN}"
		cp -r ${GIT_REPO}-${GIT_BRANCH} ${GIT_REPO}-${GIT_BRANCH}.backup
		echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
	fi
else
	echo ""
	echo -e "The git branch ${GIT_BRANCH} is not available?"
	exit 0
fi
}

git_setup (){
sleep .75
if [[ -d "${GIT_REPO}-${GIT_BRANCH}" ]]; then
	cd ${GIT_REPO}-${GIT_BRANCH}
	if [[ "$FAMILY" == "broadcom" ]]; then rpi_firmware; fi
	export ARCH=${ARCH}
	# remove builddeb and mkdebian scripts
	rm -f scripts/package/{builddeb,mkdebian}
	# add custom builddeb and mkdebian scripts
	cp -fr ../../packaging/{builddeb,mkdebian} scripts/package/
	chmod +x scripts/package/{builddeb,mkdebian}
else
	echo "NOTICE: Directory ${GIT_REPO}-${GIT_BRANCH} is MIA. Please make a report."
	echo ""
	exit 0
fi
}

git_option (){
GIT_HASH=`git ls-remote --heads ${GIT_URL}/${GIT_OWN}/${GIT_REPO}.git | grep -w "refs/heads/${GIT_BRANCH}" | sed -n '1p' | sed "s/refs\/heads\/${GIT_BRANCH}//g" | sed s/'\s'//g`
if [[ -f "../.cache/git_fast.${GIT_REPO}-${GIT_BRANCH}" ]]; then
	source ../.cache/git_fast.${GIT_REPO}-${GIT_BRANCH}
	if [[ "$GIT_FAST" == "true" ]]; then GIT_OPT="--depth 1"; else GIT_OPT=""; fi
else
	while :
	do
	echo -e "How would you like to handle downloads?"
	echo -e " 1) shallow clone (default)"
	echo -e " 2) full clone"
	echo -e ""
	read -t10 -s -p ""
	if [ $? -gt 128 ]; then
		echo -e "Default selected."
		mkdir -p ../.cache
		echo 'GIT_FAST="true"' > ../.cache/git_fast.${GIT_REPO}-${GIT_BRANCH}
		echo GIT_COMMIT='"'${GIT_HASH}'"' >> ../.cache/git_fast.${GIT_REPO}-${GIT_BRANCH}
		GIT_OPT="--depth 1"
		echo -e ""
		break
	fi
	case $REPLY in
		[1]*)
			mkdir -p ../.cache
			echo 'GIT_FAST="true"' > ../.cache/git_fast.${GIT_REPO}-${GIT_BRANCH}
			echo GIT_COMMIT='"'${GIT_HASH}'"' >> ../.cache/git_fast.${GIT_REPO}-${GIT_BRANCH}
			GIT_OPT="--depth 1"
			echo -e ""
			break
			;;
		[2]*)
			mkdir -p ../.cache
			echo 'GIT_FAST="false"' > ../.cache/git_fast.${GIT_REPO}-${GIT_BRANCH}
			GIT_OPT=""
			echo -e ""
			break
			;;
		*)
			echo -e "Enter 1 or 2"
			;;
		esac
	done
fi
}

git_verify (){
echo -en "commit"
if [[ "$GIT_COMMIT" == "$GIT_HASH" ]]; then
	echo -en " ${PNK}[${FIN}${WHT}${GIT_COMMIT}${FIN}${PNK}]${FIN}"
	echo -e " ${PNK}[${FIN}${GRN}ok${FIN}${PNK}]${FIN}"
else
	echo -en " ${PNK}[${FIN}${WHT}${GIT_HASH}${FIN}${PNK}]${FIN}"
	echo -en " ${PNK}[${FIN}${WHT}updating${FIN}${PNK}]${FIN}"
	sed -i 's/^GIT_COMMIT=.*/GIT_COMMIT="'"${GIT_HASH}"'"/' ../.cache/git_fast.${GIT_REPO}-${GIT_BRANCH}
	echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
	echo -en "${GIT_REPO}-${GIT_BRANCH}"
	echo -en " ${PNK}[${FIN}${YLW}purging${FIN}${PNK}]${FIN}"
	rm -fdr ${GIT_REPO}-${GIT_BRANCH} ${GIT_REPO}-${GIT_BRANCH}.backup
	echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
	echo ""
fi
}
