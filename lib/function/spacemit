#!/bin/bash

# ATF BINARY AND FIRMWARE
fw_dynamic (){ # place file.
if [[ -f "../opensbi/${OPENSBI_FIRMWARE}" ]]; then cp "../opensbi/${OPENSBI_FIRMWARE}" .; else report_opensbi_error; fi
}

spacemit_uboot_download (){
TAG="v1.0"
if [[ -d "${BOARD}-u-boot" ]]; then
	echo -en "${WHT}${BOARD}-u-boot${FIN} "
	echo -en "${PNK}[${FIN}${YLW}found${FIN}${PNK}]${FIN} "
	cd ${BOARD}-u-boot
	make clean
	#git config pull.rebase false
	git checkout ${TAG} &> /dev/null
	echo -en "${PNK}[${FIN}${WHT}restoring${FIN}${PNK}]${FIN} "
	cd ..; cp -r ${BOARD}-u-boot u-boot
	echo_bdone
else
	echo -en "${WHT}${BOARD}-u-boot${FIN} "
	echo -en "${PNK}[${FIN}${WHT}cloning${FIN}${PNK}]${FIN} "
	git clone -q -c advice.detachedHead=false -b ${TAG} ${GIT_UBOOT_URL} 
	if [[ -d "${BOARD}-u-boot" ]]; then
		cd ${BOARD}-u-boot; make clean; cd ..; cp -r ${BOARD}-u-boot u-boot
		echo_bdone
	else
		echo -e "${PNK}[${FIN}${RED}failed${FIN}${PNK}]${FIN}"; exit 1
	fi
fi
}

# U-BOOT
uboot_configs (){
# add default builder config options
if [[ -f "configs/${UBOOT_DEFCONFIG}" ]]; then
	if [[ `grep -w "CONFIG_SD_BOOT=y" "configs/${UBOOT_DEFCONFIG}"` ]]; then :; else echo "CONFIG_SD_BOOT=y" >> configs/${UBOOT_DEFCONFIG}; fi
	if [[ `grep -w "CONFIG_EXT4_WRITE=y" "configs/${UBOOT_DEFCONFIG}"` ]]; then :; else echo "CONFIG_EXT4_WRITE=y" >> configs/${UBOOT_DEFCONFIG}; fi
	if [[ `grep -w "CONFIG_FS_BTRFS=y" "configs/${UBOOT_DEFCONFIG}"` ]]; then :; else echo "CONFIG_FS_BTRFS=y" >> configs/${UBOOT_DEFCONFIG}; fi
	if [[ `grep -w "CONFIG_CMD_BTRFS=y" "configs/${UBOOT_DEFCONFIG}"` ]]; then :; else echo "CONFIG_CMD_BTRFS=y" >> configs/${UBOOT_DEFCONFIG}; fi
fi
}

uboot_output (){
if [[ -f "bootinfo_emmc.bin" ]] && [[ -f "u-boot.itb" ]] && [[ "fw_dynamic.itb " ]] && [[ "FSBL.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f bootinfo_emmc.bin ../../${OUTPUT}/
	cp -f FSBL.bin ../../${OUTPUT}/
	cp -f fw_dynamic.itb ../../${OUTPUT}/fw_dynamic.bin
	cp -f u-boot.itb ../../${OUTPUT}/u-boot.bin
	uboot_packaging
	echo ""
else
	report_error
fi
}

spacemit_uboot_run (){
sources_dir
opensbi_firmware
uboot_run
uboot_output
}

spacemit_uboot_packaging (){
cp -f bootinfo_emmc.bin ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/
cp -f FSBL.bin ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/
cp -f fw_dynamic.itb ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/fw_dynamic.bin
cp -f u-boot.itb ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/u-boot.bin
#cp -f ../../files/boot/env_k1-x.txt ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/
}

# STAGE1
flash_uboot (){
dd if=${OUTPUT}/bootinfo_emmc.bin of="${IMAGE_LOOP_DEV}" bs=512 conv=notrunc
dd if=${OUTPUT}/FSBL.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=1 conv=notrunc
dd if=${OUTPUT}/FSBL.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=512 conv=notrunc
dd if=${OUTPUT}/fw_dynamic.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=1280 conv=notrunc
dd if=${OUTPUT}/u-boot.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=2048 conv=notrunc
}

env_config (){
rm -f p1/env_k1-x.txt
cp -f files/boot/env_k1-x.txt p1/
if [[ "$P_VALUE" == "p1" ]]; then
	sed -i "s/^knl_name=.*/knl_name=boot\/Image.itb/" p1/env_k1-x.txt
	sed -i "s/^ramdisk_name=.*/ramdisk_name=boot\/initrd.gz/" p1/env_k1-x.txt
	sed -i "s/^dtb_dir=.*/dtb_dir=boot\/spacemit/" p1/env_k1-x.txt
fi
if [[ "$P_VALUE" == "p2" ]]; then
	sed -i "s/^knl_name=.*/knl_name=Image.itb/" p1/env_k1-x.txt
	sed -i "s/^ramdisk_name=.*/ramdisk_name=initrd.gz/" p1/env_k1-x.txt
	sed -i "s/^dtb_dir=.*/dtb_dir=spacemit/" p1/env_k1-x.txt
fi
sed -i "s/^mmc_rootfstype=.*/mmc_rootfstype=${FSTYPE}/" p1/env_k1-x.txt
sed -i "s/^partuuid=.*/partuuid=${ROOT_PARTUUID}/" p1/env_k1-x.txt
}

# STAGE2
bananapif3_bthelper (){
cd ~
echo -e ""; echo -e "Installing bluetooth helper ..."
git clone https://gitee.com/bianbu-linux/rtk_hciattach.git
cd rtk_hciattach
make -j4
if [[ -f "rtk_hciattach" ]]; then
	cp -f rtk_hciattach /usr/sbin/
	bananapif3_bt_service > /dev/null 2>&1
else
	echo "rtk_hciattach: build failed!"
fi
cd ..; rm -fdr rtk_hciattach
}
