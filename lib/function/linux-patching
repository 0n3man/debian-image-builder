#!/bin/bash

# PATCHING
linux_packaging(){
echo device_tree='"'$DEVICETREE'"' > "scripts/package/pkgvars"
echo platform='"'$PLATFORM'"' >> "scripts/package/pkgvars"
if [ $standard_packaging -eq 1 ]; then
	echo series_name='"'$COMMONNAME'"' >> "scripts/package/pkgvars"
	echo linux_name='"'$LINUXCOMMON'"' >> "scripts/package/pkgvars"
	echo headers_name='"'$HEADERSCOMMON'"' >> "scripts/package/pkgvars"
	echo linux_path='"'$COMMONPATH'"' >> "scripts/package/pkgvars"
	echo dtb_path='"'$COMMONDTREE'"' >> "scripts/package/pkgvars"
	echo overlays_path='"'$COMMONOLYS'"' >> "scripts/package/pkgvars"
else
	echo series_name='"'$LEGACYNAME'"' >> "scripts/package/pkgvars"
	echo linux_name='"'$LINUXLEGACY'"' >> "scripts/package/pkgvars"
	echo headers_name='"'$HEADERSLEGACY'"' >> "scripts/package/pkgvars"
	echo linux_path='"'$LEGACYPATH'"' >> "scripts/package/pkgvars"
	echo dtb_path='"'$LEGACYDTREE'"' >> "scripts/package/pkgvars"
	echo overlays_path='"'$LEGACYOLYS'"' >> "scripts/package/pkgvars"
fi
echo boot_path='"'$INSTALL_OLYS'"' >> "scripts/package/pkgvars"
echo install_devicetree='"'$INSTALL_DTB'"' >> "scripts/package/pkgvars"
echo install_overlays='"'$INSTALL_OLYS'"' >> "scripts/package/pkgvars"
}

user_patches(){
if [[ `ls ../../${USERPATCHES}/*.patch` ]] > /dev/null 2>&1; then
	echo ""
	echo -e "${WHT}Applying user patches${FIN} ..."
	for i in ../../${USERPATCHES}/*.patch; do patch -p1 < $i; done;
	echo_done;
fi
}

log_setup(){
LOG_DIR="../../output/logs"
LOG_FILE="${LOG_DIR}/${BOARD}-patch.log"
if [ -e ${LOG_FILE} ]; then
	mv -f ${LOG_FILE} ${LOG_FILE}.1;
	echo "Linux ${VERSION}" > ${LOG_FILE};
	echo `date` >> ${LOG_FILE};
else
	mkdir -p ${LOG_DIR};
	echo "Linux ${VERSION}" > ${LOG_FILE};
	echo `date` >> ${LOG_FILE};
fi
}

# create dry run log
dryrun(){
log_setup
echo ""
echo -en "${WHT}Patching${FIN} ${PNK}[${FIN}${YLW}dry run${FIN}${PNK}]${FIN}";
# apply across all boards
if [[ -d "../../${LPATCHESALL}/${LINUX_VERSION}" ]]; then
	if [[ `ls ../../${LPATCHESALL}/${LINUX_VERSION}/*.patch` ]] > /dev/null 2>&1; then
		for i in ../../${LPATCHESALL}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY" == "allwinner" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
fi
if [[ "$FAMILY" == "freescale" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
fi
if [[ "$BOARD" == "lepotato" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${BOARD}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$BOARD" == "radxazero" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${BOARD}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	if [[ "$FAMILY_EXT" == "rk3328" ]] || [[ "$FAMILY_EXT" == "rk3399" ]]; then
		for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
		for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
	if [[ "$FAMILY_EXT" == "rk356x" ]]; then
		for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/${BOARD}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
		for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY" == "samsung" ]] || [[ "$FAMILY_EXT" == "meson8b" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${LINUX_VERSION}/*.patch; do patch --dry-run -N -p1 < $i; done >> ${LOG_FILE};
fi
}

# check log and report
check(){
if [[ `grep "Skipping patch" "${LOG_FILE}"` ]]; then
	grep "Skipping patch" "${LOG_FILE}" | echo -en " ${PNK}[${FIN}"${WHT}skipping${FIN} ${WHT}`wc -l`${FIN}"${PNK}]${FIN}";
fi
if [[ `grep "FAILED" "${LOG_FILE}"` ]]; then
	grep "FAILED" "${LOG_FILE}" | echo -en " ${PNK}[${FIN}"${RED}fails${FIN} ${WHT}`wc -l`${FIN}"${PNK}]${FIN}";
	if [ $verbose -eq 1 ]; then
		exit 0;
	fi
fi
}

# apply patches
apply(){
echo "" >> ${LOG_FILE}
echo "# APPLYING PATCHES" >> ${LOG_FILE}
echo -e " ${PNK}[${FIN}${GRN}applying${FIN}${PNK}]${FIN}";
# apply across all boards
if [[ -d "../../${LPATCHESALL}/${LINUX_VERSION}" ]]; then
	if [[ `ls ../../${LPATCHESALL}/${LINUX_VERSION}/*.patch` ]] > /dev/null 2>&1; then
		for i in ../../${LPATCHESALL}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY" == "allwinner" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
fi
if [[ "$FAMILY" == "freescale" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
fi
if [[ "$BOARD" == "lepotato" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${BOARD}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$BOARD" == "radxazero" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${BOARD}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	if [[ "$LINUX_VERSION" == "5.15" ]]; then
		for i in ../../${LINUX_PATCHDIR}/misc/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	if [[ "$FAMILY_EXT" == "rk3328" ]] || [[ "$FAMILY_EXT" == "rk3399" ]]; then
		for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
		for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
	if [[ "$FAMILY_EXT" == "rk356x" ]]; then
		for i in ../../${LINUX_PATCHDIR}/${FAMILY_EXT}/${BOARD}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
		for i in ../../${LINUX_PATCHDIR}/all/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
	fi
fi
if [[ "$FAMILY" == "samsung" ]] || [[ "$FAMILY_EXT" == "meson8b" ]]; then
	for i in ../../${LINUX_PATCHDIR}/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE};
fi
}

linux_patching(){
# packaging
if [[ "$VERSION" == "4.9.y" ]]; then
	patch -p1 < ../../${PACKAGING}/vendor-4.9-packaging.patch > /dev/null 2>&1;
fi
if [[ "$VERSION" == "4.19.y" ]]; then
	patch -p1 < ../../${PACKAGING}/vendor-4.19-packaging.patch > /dev/null 2>&1;
fi
linux_packaging
# patching
if [[ ! -z $REPO_KERNEL ]]; then
	user_patches;
else
	dryrun; check; apply; user_patches;
fi
cp -f ../../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch
if [[ "$BOARD" == "odroidxu4" ]] && [[ -e "../../files/firmware/edid" ]]; then
	mkdir -p firmware
	cp -fr ../../files/firmware/edid firmware/;
fi
echo ""
}
