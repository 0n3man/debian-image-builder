p1_partition(){
if [[ "$FAMILY" == "allwinner" ]]; then
	OFFSET="2048";
fi
if [[ "$FAMILY" == "amlogic" ]]; then
	OFFSET="2248";
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	OFFSET="32767";
fi
truncate -s ${IMGSIZE} "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
echo -e "o
n
p
1
${OFFSET}
a
t
b
5859374

p
w" | fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
IMAGE_LOOP_DEV="$(losetup --show -P -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
flash_uboot
sync
umount p1
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

p2_partition(){
truncate -s ${IMGSIZE} "${IMAGE_FOLDER}${IMAGE_FILE_NAME}";
if [[ "$FAMILY" == "broadcom" ]]; then
	echo -e "o
	n
	p
	1
	2048
	526335
	a
	c
	t
	b
	n
	p
	2
	526336
	
	p
	w" | fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}";
else
	if [[ "$FAMILY" == "amlogic" ]]; then
		OFFSET="2248";
	fi
	if [[ "$FAMILY" == "rockchip" ]]; then
		OFFSET="2048";
	fi
	echo -e "o
	n
	p
	1
	${OFFSET}
	526335
	n
	p
	2
	526336

	p
	w" | fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}";
fi
IMAGE_LOOP_DEV="$(losetup --show -P -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_BOOT="${IMAGE_LOOP_DEV}p1"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p2"
partprobe "${IMAGE_LOOP_DEV}"
if [[ "$FAMILY" == "broadcom" ]]; then
	mkfs.vfat -n BOOT "${IMAGE_LOOP_DEV_BOOT}"
else
	mkfs.ext2 -L BOOT "${IMAGE_LOOP_DEV_BOOT}";
fi
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1 p2
mount "${IMAGE_LOOP_DEV_BOOT}" p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p2
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	flash_vendor-uboot;
fi
sync
umount p2
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p2
}

p1_uuid(){
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
echo ROOT_UUID='"'$ROOT_UUID'"' > part-uuid.txt

source part-uuid.txt
}

p2_uuid(){
BOOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_BOOT}" | sed -ne 's/^UUID=//p')
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
ROOT_PARTUUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^PARTUUID=//p')

echo BOOT_UUID='"'$BOOT_UUID'"' > part-uuid.txt
echo ROOT_UUID='"'$ROOT_UUID'"' >> part-uuid.txt
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' >> part-uuid.txt

source part-uuid.txt
}

p1_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

p2_fstab(){
if [[ "$FAMILY" == "broadcom" ]]; then
	FSTYPE="vfat	defaults 0 2";
else
	FSTYPE="ext2	rw,relatime,errors=continue 0 2";
fi
tee p2/etc/fstab <<EOF
UUID=${BOOT_UUID}	/boot	${FSTYPE}
UUID=${ROOT_UUID}	/	ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs	/tmp		tmpfs	defaults,nosuid 0 0
EOF
}

p1_setup(){
if [ $verbose -eq 1 ]; then
	p1_partition;
else
	p1_partition > /dev/null 2>&1;
fi
if [ $verbose -eq 1 ]; then
	p1_uuid;
else
	p1_uuid > /dev/null 2>&1;
fi
if [ -e ${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz ]; then
	echo -en "${WHT}Extracting rootfs${FIN} ";
	tar -xf ${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz -C p1/;
	echo_bdone;
else
	echo -e "${YLW}Missing rootfs tarball!${FIN}";
	make cleanup > /dev/null 2>&1;
	exit;
fi

mkdir -p p1/etc/apt/apt.conf.d p1/etc/dpkg/dpkg.cfg.d
echo "force-unsafe-io" > "p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io"
mkdir -p p1/usr/bin
cp $(command -v "${STATIC}") p1/usr/bin;
if [ $verbose -eq 1 ]; then
	choose_release;
else
	choose_release > /dev/null 2>&1;
fi
if [ $verbose -eq 1 ]; then
	p1_fstab;
else
	p1_fstab > /dev/null 2>&1;
fi
if [ -n "$PROXY" ]; then
	tee "p1/etc/apt/apt.conf.d/30proxy" <<EOF
Acquire::http::proxy "http://127.0.0.1:3142";
EOF
fi
}

p2_setup(){
if [ $verbose -eq 1 ]; then
	p2_partition;
else
	p2_partition > /dev/null 2>&1;
fi
if [ $verbose -eq 1 ]; then
	p2_uuid;
else
	p2_uuid > /dev/null 2>&1;
fi
if [[ "$FAMILY" == "broadcom" ]]; then
	bcm2711_config > /dev/null 2>&1;
	if [ -e output/raspi4/u-boot.bin ]; then
		install -v -m 0644 output/raspi4/u-boot.bin p1/ > /dev/null 2>&1;
	else
		echo -e "${YLW}Missing u-boot.bin${FIN}."
		exit;
	fi
fi
if [ -e ${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz ]; then
	echo -en "${WHT}Extracting rootfs${FIN} ";
	tar -xf ${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz -C p2/;
	echo_bdone;
else
	echo -e "${YLW}Missing rootfs tarball${FIN}.";
	make cleanup > /dev/null 2>&1;
	exit;
fi
mkdir -p p2/etc/apt/apt.conf.d p2/etc/dpkg/dpkg.cfg.d
echo "force-unsafe-io" > "p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io"
mkdir -p p2/usr/bin
cp $(command -v "${STATIC}") p2/usr/bin
if [ $verbose -eq 1 ]; then
	choose_release;
else
	choose_release > /dev/null 2>&1;
fi
if [ $verbose -eq 1 ]; then
	p2_fstab;
else
	p2_fstab > /dev/null 2>&1;
fi
if [ -n "$PROXY" ]; then
	tee "p2/etc/apt/apt.conf.d/30proxy" <<EOF
Acquire::http::proxy "http://127.0.0.1:3142";
EOF
fi
}

p1_files(){
cp lib/function/services p1/root/services.txt
cp lib/source p1/root/source.txt
cp userdata.txt p1/root
cp board.txt p1/root
cp files/misc/* p1/root
cp -R files/scripts/* p1/root
cp files/users/* p1/root
cp firmware/{fw-0a5c_21e8.hcd,UPDATE.mem} p1/root
if [[ "$DISTRO" == "devuan" ]]; then
	cp files/inits/*.init p1/root;
fi
}

p2_files(){
cp lib/function/services p2/root/services.txt
cp lib/source p2/root/source.txt
cp userdata.txt p2/root
cp board.txt p2/root
cp files/misc/* p2/root
cp -R files/scripts/* p2/root
cp files/users/* p2/root
if [[ "$BOARD" == "raspi4" ]]; then
	cp files/raspi4/* p2/root;
fi
cp firmware/{fw-0a5c_21e8.hcd,UPDATE.mem} p2/root
if [[ "$DISTRO" == "devuan" ]]; then
	cp files/inits/*.init p2/root;
fi
}

p1_extlinux(){
FDT="../${FAMILY}/${DTB}.dtb"
FDTDIR="../${FAMILY}/"
CMDLINE="append earlyprintk ${CONSOLE} rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 fsck.repair=yes loglevel=1 ${EXTRA} init=/sbin/init"
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label default
	kernel ../Image
	initrd ../uInitrd
	fdtdir ${FDTDIR}
	fdt ${FDT}
	#fdtoverlays
	${CMDLINE}
EOF
if [[ "$BOARD" == "pine64" ]]; then
	sed -i '/initrd ..\/uInitrd/d' p1/boot/extlinux/extlinux.conf;
fi
if [[ "$BOARD" == "radxazero" ]]; then
	sed -i 's/#fdtoverlays/fdtoverlays ..\/amlogic\/overlays\/meson-g12a-opp-2ghz.dtbo/g' p1/boot/extlinux/extlinux.conf;
fi
if [[ "$BOARD" == "nanopc" ]]; then
	sed -i 's/#fdtoverlays/fdtoverlays ..\/rockchip\/overlays\/rockchip-rk3399-opp-2ghz.dtbo/g' p1/boot/extlinux/extlinux.conf;
fi
if [[ "$BOARD" == "rockpro64" ]]; then
	sed -i 's/#fdtoverlays/fdtoverlays ..\/rockchip\/overlays\/rockchip-rk3399-opp-2ghz.dtbo/g' p1/boot/extlinux/extlinux.conf;
fi
}

p2_extlinux(){
# broadcom
if [[ "$BOARD" == "raspi4" ]]; then
	CMDLINE="append ${CONSOLE} rw root=PARTUUID=${ROOT_PARTUUID} rootfstype=ext4 fsck.repair=yes ${EXTRA} rootwait";
fi
mkdir -p p1/extlinux
tee p1/extlinux/extlinux.conf <<EOF
label default
	kernel /Image
	${CMDLINE}
EOF
}
