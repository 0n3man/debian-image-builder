# UBOOT
roc_source(){
mkdir -p ${ROCSRC}
cp -f board.txt ${ROCSRC}/
cd ${ROCSRC}
rm -fdr u-boot
}

rk_armtrusted_firmware(){
if ls arm-trusted-firmware > /dev/null 2>&1
	then atf_clean && cd arm-trusted-firmware;
	else atf_dl && git clone https://github.com/ARM-software/arm-trusted-firmware.git && cd arm-trusted-firmware;
fi
echo
echo -e "${RED}Compiling ATF${FIN}."
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then export CROSS_COMPILE=aarch64-linux-gnu-;
	else export ARCH=arm64;
fi
make realclean > /dev/null 2>&1
case `grep -Fx "renegade" "../board.txt" >/dev/null; echo $?` in
  0)
echo "rk3328"
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} PLAT=rk3328 bl31;
	else make -j${CORES} CC=${NATIVE} PLAT=rk3328 bl31;
fi
    ;;
esac
case `grep -Fx "rock64" "../board.txt" >/dev/null; echo $?` in
  0)
echo "rk3328"
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} PLAT=rk3328 bl31;
	else make -j${CORES} CC=${NATIVE} PLAT=rk3328 bl31;
fi
    ;;
esac
case `grep -Fx "nanopc" "../board.txt" >/dev/null; echo $?` in
  0)
echo "rk3399"
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} PLAT=rk3399 bl31;
	else make -j${CORES} CC=${NATIVE} PLAT=rk3399 bl31;
fi
    ;;
esac
cd ..
echo_done
}

rockchip_uboot(){
echo
echo_duboot
if ls u-boot-${UBOOT_VERSION}.tar.gz > /dev/null 2>&1
	then echo -e "${YLW}u-boot-${UBOOT_VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/u-boot-${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz && echo_bdone;
fi
rkbuild_uboot
}

rock64_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/rock64-rk3328_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/rock64-rk3328_defconfig
}

renegade_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/roc-cc-rk3328_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/roc-cc-rk3328_defconfig
}

nanopct4_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/nanopc-t4-rk3399_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/nanopc-t4-rk3399_defconfig
echo CONFIG_DISPLAY_ROCKCHIP_EDP=y >> configs/nanopc-t4-rk3399_defconfig
}

rkbuild_uboot(){
echo
echo_extract
pv u-boot-${UBOOT_VERSION}.tar.gz | tar -xzf - -C .
mv -f u-boot-${UBOOT_VERSION} u-boot
cp -f board.txt u-boot/
cd u-boot
if `grep -Fx "renegade" "../board.txt" >/dev/null;`
	then cp ../arm-trusted-firmware/build/rk3328/release/bl31/bl31.elf bl31.elf;
fi
if `grep -Fx "rock64" "../board.txt" >/dev/null;`
	then cp ../arm-trusted-firmware/build/rk3328/release/bl31/bl31.elf bl31.elf;
fi
if `grep -Fx "nanopc" "../board.txt" >/dev/null;`
	then cp ../arm-trusted-firmware/build/rk3399/release/bl31/bl31.elf bl31.elf;
fi
echo
for i in ../${RKUBOOT}/*.patch; do patch -p1 < $i; done
export ARCH=arm64
case `grep -Fx "renegade" "../board.txt" >/dev/null; echo $?` in
  0)
renegade_defconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu- roc-cc-rk3328_defconfig;
	else make -j${CORES} CC=${NATIVE} roc-cc-rk3328_defconfig;
fi
    ;;
esac
case `grep -Fx "rock64" "../board.txt" >/dev/null; echo $?` in
  0)
rock64_defconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu- rock64-rk3328_defconfig;
	else make -j${CORES} CC=${NATIVE} rock64-rk3328_defconfig;
fi
    ;;
esac
case `grep -Fx "nanopc" "../board.txt" >/dev/null; echo $?` in
  0)
nanopct4_defconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu- nanopc-t4-rk3399_defconfig;
	else make -j${CORES} CC=${NATIVE} nanopc-t4-rk3399_defconfig;
fi
    ;;
esac
case `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
echo
echo_menuconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu- menuconfig;
	else make -j${CORES} CC=${NATIVE} menuconfig;
fi
    ;;
esac
echo
echo_cuboot
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make -j${CORES} CC=${ARM64_CROSS} CROSS_COMPILE=aarch64-linux-gnu-;
	else make -j${CORES} CC=${NATIVE};
fi
}

renegade_binary(){
mkdir -p ../${BINRNG}
cp -f idbloader.img ../${BINRNG}/idbloader.bin
cp -f u-boot.itb ../${BINRNG}/
echo_done
echo
}

rock64_binary(){
mkdir -p ../${BINR64}
cp -f idbloader.img ../${BINR64}/idbloader.bin
cp -f u-boot.itb ../${BINR64}/
echo_done
echo
}

nanopc_binary(){
mkdir -p ../${BINNPC}
cp -f idbloader.img ../${BINNPC}/idbloader.bin
cp -f u-boot.itb ../${BINNPC}/
echo_done
echo
}

rockchip_uboot_string(){
roc_source
rk_armtrusted_firmware
rockchip_uboot
if `grep -Fx "renegade" "../board.txt" >/dev/null;`
	then renegade_binary;
fi
if `grep -Fx "rock64" "../board.txt" >/dev/null;`
	then rock64_binary;
fi
if `grep -Fx "nanopc" "../board.txt" >/dev/null;`
	then nanopc_binary;
fi
}

## KERNEL
roc_kernel(){
mkdir -p ${ROCSRC}
cp -f board.txt ${ROCSRC}/
cd ${ROCSRC}
}

rk3328_patches(){
if `grep "5.10" "../../userdata.txt" >/dev/null;`
	then for i in ../${RK3328}/5.10.y/*.patch; do patch -p1 < $i; done
fi
if `grep "5.11" "../../userdata.txt" >/dev/null;`
	then for i in ../${RK3328}/5.11.y/*.patch; do patch -p1 < $i; done
fi
}


rk3328_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/rockchip-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/rockchip-nc-packaging.patch ;
fi
rk3328_patches
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

rk3399_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/rockchip-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/rockchip-nc-packaging.patch ;
fi
for i in ../${RK3399}/*.patch; do patch -p1 < $i; done
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

renegade_check(){
if ls ${BINRNG}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINRNG}/tmp && mv -f ${BINRNG}/*.deb ${BINRNG}/tmp;
fi
}

rock64_check(){
if ls ${BINR64}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINR64}/tmp && mv -f ${BINR64}/*.deb ${BINR64}/tmp;
fi
}

nanopc_check(){
if ls ${BINNPC}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINNPC}/tmp && mv -f ${BINNPC}/*.deb ${BINNPC}/tmp;
fi
}

rockchip_output(){
if `grep -Fx "renegade" "../board.txt" >/dev/null;`
	then renegade_check && mkdir -p ../output/renegade && mv -f *.deb ../output/renegade/;
fi
if `grep -Fx "rock64" "../board.txt" >/dev/null;`
	then rock64_check && mkdir -p ../output/rock64 && mv -f *.deb ../output/rock64/;
fi
if `grep -Fx "nanopc" "../board.txt" >/dev/null;`
	then nanopc_check && mkdir -p ../output/nanopc && mv -f *.deb ../output/nanopc/;
fi
}

## STAGE1
renegade_flashbin(){
dd if=output/renegade/idbloader.bin of="${IMAGE_LOOP_DEV}" seek=64
dd if=output/renegade/u-boot.itb of="${IMAGE_LOOP_DEV}" seek=16384
}

rock64_flashbin(){
dd if=output/rock64/idbloader.bin of="${IMAGE_LOOP_DEV}" seek=64
dd if=output/rock64/u-boot.itb of="${IMAGE_LOOP_DEV}" seek=16384
}

nanopc_flashbin(){
dd if=output/nanopc/idbloader.bin of="${IMAGE_LOOP_DEV}" seek=64
dd if=output/nanopc/u-boot.itb of="${IMAGE_LOOP_DEV}" seek=16384
}

partition(){
image_size
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
32767
a
t
b
4101561

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
if `grep -Fx "renegade" "board.txt" >/dev/null;`
   then renegade_flashbin;
fi
if `grep -Fx "rock64" "board.txt" >/dev/null;`
   then rock64_flashbin;
fi
if `grep -Fx "nanopc" "board.txt" >/dev/null;`
   then nanopc_flashbin;
fi
sync
umount p1
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

partition_uuid(){
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
echo ROOT_UUID='"'$ROOT_UUID'"' > part-uuid.txt

source part-uuid.txt
}

create_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

## STAGE2
rock64_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/rockchip/
    fdt /boot/rockchip/rk3328-rock64.dtb
    append earlyprintk console=tty1 console=ttyS2,115200n8 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 init=/sbin/init
EOF
echo Done.
}

nanopc_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/rockchip/
    fdt /boot/rockchip/rk3399-nanopc-t4.dtb
    append earlyprintk console=tty1 console=ttyS2,115200n8 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 usb-storage.quirks=0x1d6b:0x0003:u,0x1f75:0x0621:u,0x1058:0x259b:u init=/sbin/init
EOF
echo Done.
}

renegade_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/rockchip/
    fdt /boot/rockchip/rk3328-roc-cc.dtb
    append earlyprintk console=tty1 console=ttyS2,1500000 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 init=/sbin/init
EOF
echo Done.
}

rock64_led_trigger(){
echo
echo Creating LED triggers.
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
# led trigger
if ls /sys/class/leds/standby/brightness > /dev/null 2>&1;
        then echo 0 > /sys/class/leds/standby/brightness;
fi
if ls /sys/class/leds/led-1/brightness  > /dev/null 2>&1;
        then echo 0 > /sys/class/leds/led-1/brightness;
fi
EOF
}

renegade_led_trigger(){
echo
echo Creating LED triggers.
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
# led triggers
echo 0 > /sys/class/leds/firefly:blue:power/brightness
EOF
}

rockchip_led_service(){
echo
echo Creating led service.
sleep 1s
tee /etc/systemd/system/leds.service <<EOF
[Unit]
Description=Turn off Light-emitting diode
ConditionPathExists=/usr/local/sbin/led-trigger
[Service]
Type=forking
ExecStart=/usr/local/sbin/led-trigger &>/dev/null
[Install]
WantedBy=multi-user.target
EOF
systemctl enable leds
}

enable_services(){
sleep 1s
systemctl enable rc-local
systemctl enable ifplugd
if `grep -Fx 'DISTRO="debian"' "/root/userdata.txt" >/dev/null;`
	then systemctl enable resolvconf;
fi
if `grep -Fx 'DISTRO="kali"' "/root/userdata.txt" >/dev/null;`
	then systemctl enable resolvconf;
fi
systemctl enable haveged
systemctl enable zramswap
update-rc.d firstboot defaults 2
systemctl enable firstboot
systemctl enable governor
disable_ondemand
}
