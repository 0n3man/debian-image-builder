# KERNEL
kernel-source(){
mkdir -p ${SRC}
cp -f board.txt ${SRC}/
cd ${SRC}
}

rk3328_patch(){
echo
echo_patch
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	patch -p1 < ../${PACKAGING}/rockchip-packaging.patch;
else
	patch -p1 < ../${PACKAGING}/rockchip-nc-packaging.patch;
fi
for i in ../${RK3328}/*.patch; do patch -p1 < $i; done
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

rk3399_patch(){
echo
echo_patch
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	patch -p1 < ../${PACKAGING}/rockchip-packaging.patch;
else
	patch -p1 < ../${PACKAGING}/rockchip-nc-packaging.patch;
fi
if [[ `grep "5.10" "../../userdata.txt"` ]]; then
	for i in ../${RK3399}/*.patch; do patch -p1 < $i; done;
else
	for i in ../${RK3399}/edge/*.patch; do patch -p1 < $i; done;
fi
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch;
fi
echo_done
echo
}

renegade_check(){
if [[ `ls ${BINRNG}/*.deb` ]]; then
	mkdir -p ${BINRNG}/tmp
	mv -f ${BINRNG}/*.deb ${BINRNG}/tmp;
fi
}

rock64_check(){
if [[ `ls ${BINR64}/*.deb` ]]; then
	mkdir -p ${BINR64}/tmp
	mv -f ${BINR64}/*.deb ${BINR64}/tmp;
fi
}

nanopc_check(){
if [[ `ls ${BINNPC}/*.deb` ]]; then
	mkdir -p ${BINNPC}/tmp
	mv -f ${BINNPC}/*.deb ${BINNPC}/tmp;
fi
}

rockchip_output(){
if [[ `grep -w "renegade" "../board.txt"` ]]; then
	renegade_check
	mkdir -p ../output/renegade
	mv -f *.deb ../output/renegade/;
fi
if [[ `grep -w "rock64" "../board.txt"` ]]; then
	rock64_check
	mkdir -p ../output/rock64
	mv -f *.deb ../output/rock64/;
fi
if [[ `grep -w "nanopc" "../board.txt"` ]]; then
	nanopc_check
	mkdir -p ../output/nanopc
	mv -f *.deb ../output/nanopc/;
fi
}

## STAGE1
renegade_flashbin(){
dd if=output/renegade/idbloader.bin of="${IMAGE_LOOP_DEV}" seek=64
dd if=output/renegade/u-boot.itb of="${IMAGE_LOOP_DEV}" seek=16384
}

rock64_flashbin(){
dd if=output/rock64/idbloader.bin of="${IMAGE_LOOP_DEV}" seek=64
dd if=output/rock64/u-boot.itb of="${IMAGE_LOOP_DEV}" seek=16384
}

nanopc_flashbin(){
dd if=output/nanopc/idbloader.bin of="${IMAGE_LOOP_DEV}" seek=64
dd if=output/nanopc/u-boot.itb of="${IMAGE_LOOP_DEV}" seek=16384
}

partition(){
image_size
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
32767
a
t
b
4101561

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
if `grep -Fx "renegade" "board.txt" >/dev/null;`
   then renegade_flashbin;
fi
if `grep -Fx "rock64" "board.txt" >/dev/null;`
   then rock64_flashbin;
fi
if `grep -Fx "nanopc" "board.txt" >/dev/null;`
   then nanopc_flashbin;
fi
sync
umount p1
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

partition_uuid(){
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
echo ROOT_UUID='"'$ROOT_UUID'"' > part-uuid.txt

source part-uuid.txt
}

create_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

## STAGE2
rock64_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/rockchip/
    fdt /boot/rockchip/rk3328-rock64.dtb
    append earlyprintk console=tty1 console=ttyS2,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

nanopc_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/rockchip/
    fdt /boot/rockchip/rk3399-nanopc-t4.dtb
    append earlyprintk console=tty1 console=ttyS2,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 usb-storage.quirks=0x1d6b:0x0003:u,0x1f75:0x0621:u,0x1058:0x259b:u loglevel=1 init=/sbin/init
EOF
echo Done.
}

renegade_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/rockchip/
    fdt /boot/rockchip/rk3328-roc-cc.dtb
    append earlyprintk console=tty1 console=ttyS2,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 loglevel=1 video=HDMI-A-1:1920x1080@60 init=/sbin/init
EOF
echo Done.
}

rock64_led_triggers(){
echo
echo Creating LED triggers.
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
# led trigger
if ls /sys/class/leds/standby/brightness > /dev/null 2>&1;
        then echo 0 > /sys/class/leds/standby/brightness;
fi
if ls /sys/class/leds/led-1/brightness  > /dev/null 2>&1;
        then echo 0 > /sys/class/leds/led-1/brightness;
fi
EOF
}

renegade_led_triggers(){
echo
echo Creating LED triggers.
cd ~
mv -f renegade /usr/local/sbin/led-trigger
chmod +x /usr/local/sbin/led-trigger
chown -R root:root /usr/local/sbin/
echo Done.
}

nanopc_led_triggers(){
echo
echo Creating LED triggers.
cd ~
mv -f nanopc /usr/local/sbin/led-trigger
chmod +x /usr/local/sbin/led-trigger
chown -R root:root /usr/local/sbin/
echo Done.
}

led_service(){
echo
echo Creating led service.
sleep 1s
tee /etc/systemd/system/leds.service <<EOF
[Unit]
Description=Set LEDs
ConditionPathExists=/usr/local/sbin/led-trigger

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/sbin/led-trigger &>/dev/null

[Install]
WantedBy=multi-user.target
EOF
systemctl enable leds
}

enable_services(){
sleep 1s
systemctl enable rc-local
systemctl enable ifplugd
if `grep -Fx 'DISTRO="debian"' "/root/userdata.txt" >/dev/null;`
	then systemctl enable resolvconf;
fi
if `grep -Fx 'DISTRO="kali"' "/root/userdata.txt" >/dev/null;`
	then systemctl enable resolvconf;
fi
systemctl enable haveged
systemctl enable zramswap
update-rc.d firstboot defaults 2
systemctl enable firstboot
systemctl enable governor
if ls /etc/systemd/system/multi-user.target.wants/ondemand.service
	then systemctl disable ondemand;
fi
}
