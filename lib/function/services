#!/bin/bash

# rc-local
rc-local_service(){
tee /etc/systemd/system/rc-local.service <<EOF
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
EOF

tee /etc/rc.local <<EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

exit 0
EOF
chmod +x /etc/rc.local
}

# governor
governor_service(){
tee /etc/systemd/system/governor.service <<EOF
[Unit]
Description=Governor
ConditionPathExists=/sys/devices/system/cpu/online
After=rc-local.service

[Service]
ExecStart=/usr/local/bin/governor -r &>/dev/null
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
}

# pine64 bluetooth
pine64_bt_service(){
tee /etc/systemd/system/pine64-bthelper.service <<EOF
[Unit]
Description=Bluetooth Helper
ConditionPathExists=/usr/local/sbin/pine64-bthelper

[Service]
Type=forking
ExecStart=/usr/local/sbin/pine64-bthelper &>/dev/null

[Install]
WantedBy=multi-user.target
EOF
systemctl enable pine64-bthelper
}

# nanopi bluetooth
nanopi_bt_service(){
tee /etc/systemd/system/nanopi-bthelper.service <<EOF
[Unit]
Description=Bluetooth Helper
Before=bluetooth.service

[Service]
Type=oneshot
ExecStart=/usr/local/sbin/nanopi-bthelper -s
ExecStop=/usr/local/sbin/nanopi-bthelper -k
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl enable nanopi-bthelper
}

# leds
led_service(){
tee /etc/systemd/system/leds.service <<EOF
[Unit]
Description=LEDs
ConditionPathExists=/usr/local/sbin/led-trigger

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/sbin/led-trigger &>/dev/null

[Install]
WantedBy=multi-user.target
EOF
systemctl enable leds
}

# tweaks
tweaks_service(){
cd ~
if [[ "$BOARD" == "cubietruck" || "$BOARD" == "cuboxi" || "$BOARD" == "lepotato" || "$BOARD" == "radxazero" ]]; then
	echo "overclock=0" > /etc/opt/overclock.txt;
	mv -f ${BOARD}-tweaks /usr/bin/${BOARD}-tweaks;
	chmod +x /usr/bin/${BOARD}-tweaks;
	chown root:root /usr/bin/${BOARD}-tweaks;
fi
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	echo "overclock=0" > /etc/opt/overclock.txt;
	mv -f odroid-tweaks /usr/bin/odroid-tweaks;
	mv -f irq-tweaks /usr/bin/irq-tweaks;
	chmod +x /usr/bin/odroid-tweaks;
	chmod +x /usr/bin/irq-tweaks;
	chown root:root /usr/bin/odroid-tweaks;
	chown root:root /usr/bin/irq-tweaks;
fi
if [[ "$FAMILY_EXT" == "rk3399" || "$FAMILY_EXT" == "rk3328" ]]; then
	echo "overclock=0" > /etc/opt/overclock.txt;
	mv -f rk-tweaks /usr/bin/rk-tweaks;
	chmod +x /usr/bin/rk-tweaks;
	chown root:root /usr/bin/rk-tweaks;
fi
if [[ "$BOARD" == "nanopir5s" ]]; then
	mv -f nanopir5s-tweaks /usr/bin/nanopir5s-tweaks;
	chmod +x /usr/bin/nanopir5s-tweaks;
	chown root:root /usr/bin/nanopir5s-tweaks;
fi

lepotato_systemd(){
tee /etc/systemd/system/tweaks.service <<EOF
[Unit]
Description=Le Potato Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/lepotato-tweaks
After=network.target network-online.target ifup@.service

[Service]
Type=forking
ExecStart=/usr/bin/lepotato-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable tweaks
}

odroid_systemd(){
tee /etc/systemd/system/tweaks.service <<EOF
[Unit]
Description=ODROID Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/odroid-tweaks
After=network.target network-online.target

[Service]
Type=forking
ExecStart=/usr/bin/odroid-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable tweaks

tee /etc/systemd/system/irq-tweaks.service <<EOF
[Unit]
Description=ODROID IRQ Tweaks
ConditionFileIsExecutable=/usr/bin/irq-tweaks
After=rc-local.service tweaks.service
Before=getty.target

[Service]
Type=simple
ExecStart=/usr/bin/irq-tweaks
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
systemctl enable irq-tweaks
}

rockchip_systemd(){
tee /etc/systemd/system/tweaks.service <<EOF
[Unit]
Description=Rockchip Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/rk-tweaks
After=sysinit.target local-fs.target

[Service]
Type=forking
ExecStart=/usr/bin/rk-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable tweaks
}

radxazero_systemd(){
tee /etc/systemd/system/tweaks.service <<EOF
[Unit]
Description=Radxa Zero Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/radxazero-tweaks
After=sysinit.target local-fs.target network.target bluetooth.target

[Service]
Type=forking
ExecStart=/usr/bin/radxazero-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable tweaks
}

nanopir5s_systemd(){
tee /etc/systemd/system/tweaks.service <<EOF
[Unit]
Description=NanoPi R5S Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/nanopir5s-tweaks
After=sysinit.target local-fs.target network.target bluetooth.target

[Service]
Type=forking
ExecStart=/usr/bin/nanopir5s-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable tweaks
}

cubietruck_systemd(){
tee /etc/systemd/system/tweaks.service <<EOF
[Unit]
Description=Cubietruck Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/cubietruck-tweaks
After=sysinit.target local-fs.target

[Service]
Type=forking
ExecStart=/usr/bin/cubietruck-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable tweaks
}

cuboxi_systemd(){
tee /etc/systemd/system/tweaks.service <<EOF
[Unit]
Description=Cubox-i Specific System Tweaks
ConditionFileIsExecutable=/usr/bin/cuboxi-tweaks
After=sysinit.target local-fs.target

[Service]
Type=forking
ExecStart=/usr/bin/cuboxi-tweaks
TimeoutSec=0
RemainAfterExit=yes
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF
systemctl enable tweaks
}

if [[ "$DISTRO" == "devuan" ]]; then
	mv -f tweaks.init /etc/init.d/tweaks
	chmod +x /etc/init.d/tweaks
	chown root:root /etc/init.d/tweaks;
else
	if [[ "$BOARD" == "cubietruck" || "$BOARD" == "cuboxi" || "$BOARD" == "lepotato" || "$BOARD" == "nanopir5s" || "$BOARD" == "radxazero" ]]; then
		${BOARD}_systemd;
	fi
	if [[ "$FAMILY_EXT" == "odroid" ]]; then
		odroid_systemd;
	fi
	if [[ "$FAMILY_EXT" == "rk3328" || "$FAMILY_EXT" == "rk3399" ]]; then
		rockchip_systemd;
	fi
fi
}

# credentials
credentials_service(){
tee /etc/systemd/system/credentials.service <<EOF
[Unit]
Description=Credentials
After=firstboot.service network.target
Before=rc-local.service
ConditionPathExists=/usr/local/bin/credentials

[Service]
Type=oneshot
ExecStart=/usr/local/bin/credentials > /dev/null 2>&1
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl enable credentials
}

# first boot
firstboot_service(){
tee /etc/systemd/system/firstboot.service <<EOF
[Unit]
Description=First Boot
After=systemd-remount-fs.service
Before=credentials.service
ConditionPathExists=/usr/local/sbin/firstboot

[Service]
ExecStart=/usr/local/sbin/firstboot
Type=oneshot
RemainAfterExit=no

[Install]
WantedBy=multi-user.target
EOF
}

# kali force start service
kali_hack(){
tee /etc/systemd/system/kali-hack.service <<EOF
[Unit]
Description=Kali hack
After=rc-local.service
ConditionPathExists=/usr/local/sbin/kali-hack

[Service]
ExecStart=/usr/local/sbin/kali-hack > /dev/null 2>&1
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

tee /usr/local/sbin/kali-hack <<EOF
#!/bin/bash

service ssh start
sleep 3s
service avahi-daemon start
sleep 2s
service bluetooth start
sleep 10s
service ntp start
EOF
chmod +x /usr/local/sbin/kali-hack
systemctl enable kali-hack
}

enable_sysvinit(){
chmod +x /etc/init.d/governor
chmod +x /etc/init.d/firstboot
if [ -f /usr/local/sbin/led-trigger ]; then
	chmod +x /etc/init.d/leds;
	update-rc.d leds defaults 2;
fi
if [[ "$BOARD" == "pine64" || "$BOARD" == "nanopi" ]]; then
	chmod +x /etc/init.d/bthelper;
	update-rc.d bthelper defaults 2;
fi
if [[ "$FAMILY" == "amlogic" ]]; then
	if [[ "$FAMILY_EXT" == "meson8b" || "$BOARD" == "bananapim5" ]]; then
		:;
	else
		chmod +x /etc/init.d/tweaks;
		update-rc.d tweaks defaults 2;
	fi
fi
if [[ "$BOARD" == "cubietruck" || "$BOARD" == "cuboxi" || "$FAMILY_EXT" == "rk3328" || "$FAMILY_EXT" == "rk3399" || "$BOARD" == "nanopir5s" ]]; then
	chmod +x /etc/init.d/tweaks;
	update-rc.d tweaks defaults 2;
fi
chmod +x /etc/init.d/zramswap
if [ $networkmanager -eq 0 ]; then
	chmod +x /etc/init.d/network;
	update-rc.d -f networking remove;
fi
chmod +x /etc/init.d/credentials
update-rc.d -f hwclock.sh remove
update-rc.d firstboot defaults S
update-rc.d governor defaults 2
update-rc.d zramswap defaults 2
update-rc.d credentials defaults 2
}

enable_systemd(){
systemctl enable rc-local
systemctl enable ifplugd
if [[ "$DISTRO" == "debian" || "$DISTRO" == "kali" ]]; then
	systemctl enable resolvconf;
fi
systemctl enable zramswap
systemctl enable firstboot
systemctl enable governor
if [ -e /etc/systemd/system/multi-user.target.wants/ondemand.service ]; then
	systemctl disable ondemand;
fi
#systemctl enable serial-getty@ttyUSB0.service
}
