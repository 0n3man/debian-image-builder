# KERNEL
kernel-source(){
mkdir -p ${SRC}
cp -f board.txt ${SRC}/
cd ${SRC}
}

# TRITIUM
tritium_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/allwinner-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/allwinner-nc-packaging.patch ;
fi
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

# PINE64
pine64_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/allwinner-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/allwinner-nc-packaging.patch ;
fi
for i in ../${PINE}/cpufreq/*.patch; do patch -p1 < $i; done
for i in ../${PINE}/wifibt/*.patch; do patch -p1 < $i; done
for i in ../${PINE}/misc/*.patch; do patch -p1 < $i; done
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

# NANOPI
nanopi_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/allwinner-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/allwinner-nc-packaging.patch ;
fi
if `grep "5.10" "../../userdata.txt" >/dev/null;`
	then for i in ../${NANOPI}/*.patch; do patch -p1 < $i; done;
	else for i in ../${NANOPI}/edge/*.patch; do patch -p1 < $i; done;
fi
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

tritium_check(){
if ls ${BINTRI}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINTRI}/tmp && mv -f ${BINTRI}/*.deb ${BINTRI}/tmp;
fi
}

pine64_check(){
if ls ${BINPINE}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINPINE}/tmp && mv -f ${BINPINE}/*.deb ${BINPINE}/tmp;
fi
}

nanopi_check(){
if ls ${BINNPI}/*.deb > /dev/null 2>&1
	then mkdir -p ${BINNPI}/tmp && mv -f ${BINNPI}/*.deb ${BINNPI}/tmp;
fi
}

allwinner_output(){
if `grep -Fx "tritium" "../board.txt" >/dev/null;`
	then tritium_check && mkdir -p ../output/tritium && mv -f *.deb ../output/tritium/;
fi
if `grep -Fx "pine64" "../board.txt" >/dev/null;`
	then pine64_check && mkdir -p ../output/pine64 && mv -f *.deb ../output/pine64/;
fi
if `grep -Fx "nanopi" "../board.txt" >/dev/null;`
	then nanopi_check && mkdir -p ../output/nanopi && mv -f *.deb ../output/nanopi/;
fi
}

## STAGE1
partition(){
image_size
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
2048
a
t
b
4101561

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
sync
umount p1
if `grep -Fx "tritium" "board.txt" >/dev/null;`
   then tritium_flashbin
fi
if `grep -Fx "nanopi" "board.txt" >/dev/null;`
   then nanopi_flashbin
fi
if `grep -Fx "pine64" "board.txt" >/dev/null;`
   then pine64_flashbin
fi
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

tritium_flashbin(){
dd if=output/tritium/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

nanopi_flashbin(){
dd if=output/nanopi/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

pine64_flashbin(){
dd if=output/pine64/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

partition_uuid(){
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
echo ROOT_UUID='"'$ROOT_UUID'"' > part-uuid.txt

source part-uuid.txt
}

create_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

## STAGE2
allwinner_firstboot(){
echo
echo Creating firstboot.
tee /usr/local/sbin/firstboot <<EOF
#!/bin/bash
### Functions
grow_mmcblk(){
bash growpart /dev/mmcblk0 1 > /dev/null 2>&1
sleep 1s
resize2fs /dev/mmcblk0p1 > /dev/null 2>&1
}

grow_mmcblk1(){
bash growpart /dev/mmcblk1 1 > /dev/null 2>&1
sleep 1s
resize2fs /dev/mmcblk1p1 > /dev/null 2>&1
}

grow_mmcblk2(){
bash growpart mmcblk2 1 > /dev/null 2>&1
sleep 1s
resize2fs mmcblk2p1 > /dev/null 2>&1
}

### Grow Partition
if touch -c /dev/mmcblk0 2>/dev/null; then grow_mmcblk;
        else : &>/dev/null;
fi
if touch -c /dev/mmcblk1 2>/dev/null; then grow_mmcblk1;
        else : &>/dev/null;
fi
if touch -c /dev/mmcblk2 2>/dev/null; then grow_mmcblk2;
        else : &>/dev/null;
fi

### Clean up
systemctl disable firstboot > /dev/null 2>&1
update-rc.d firstboot remove > /dev/null 2>&1
rm -f /var/cache/debconf/*
rm -f /usr/local/sbin/firstboot
exit 0
EOF
}

tritium_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun50i-h5-libretech-all-h3-cc.dtb
    append earlyprintk console=tty1 console=ttyS0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

nanopi_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun50i-h5-nanopi-neo-plus2.dtb
    append earlyprintk console=tty1 console=ttyS0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

pine64_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun50i-a64-pine64-plus.dtb
    append earlyprintk console=tty1 console=ttyS2,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

tritium_led_triggers(){
echo
echo Creating LED triggers.
cd ~
mv -f tritium /usr/local/sbin/led-trigger
chmod +x /usr/local/sbin/led-trigger
chown -R root:root /usr/local/sbin/
echo Done.
}

nanopi_led_triggers(){
echo
echo Creating LED triggers.
cd ~
mv -f nanopi /usr/local/sbin/led-trigger
chmod +x /usr/local/sbin/led-trigger
chown -R root:root /usr/local/sbin/
echo Done.
}

led_service(){
echo
echo Creating led service.
sleep 1s
tee /etc/systemd/system/leds.service <<EOF
[Unit]
Description=Set LEDs
ConditionPathExists=/usr/local/sbin/led-trigger

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/sbin/led-trigger &>/dev/null

[Install]
WantedBy=multi-user.target
EOF
systemctl enable leds
}

cypress_firmware(){
echo
echo Adding brcm firmware from cypress.
sleep 1s
mkdir cypress
cd cypress
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://github.com/pyavitz/debian-image-builder/releases/download/cypress-fmac/cypress-fmac-v5.4.18-2020_0402.zip
unzip -qq cypress-fmac-v5.4.18-2020_0402.zip
tar -xf cypress-firmware-v5.4.18-2020_0402.tar.gz
rm -f firmware/*pcie*
cp -f firmware/* /lib/firmware/brcm/
cd ~
rm -fdr cypress
echo Done.
}

pine64_bt_helper(){
echo
echo Creating bluetooth helper.
tee /usr/local/sbin/start-bluetooth <<EOF
#!/bin/bash
echo 1 > /sys/class/rfkill/rfkill0/state
sleep 1s
rtk_hciattach /dev/ttyS1 rtk_h5
sleep 2s
hciconfig hci0 up
EOF
}

pine64_bt_install(){
echo
echo Installing bluetooth helper.
sleep 1s
git clone https://github.com/lwfinger/rtl8723bs_bt.git
cd rtl8723bs_bt
make
make install
mv rtk_hciattach /usr/local/bin/
cd ~
rm -fdr rtl8723bs_bt
echo Done.
}

pine64_wifi_bt(){
echo
echo Bluetooth and wifi help.
sleep 1s
tee /etc/modules-load.d/pine64.conf <<EOF
r8723bs
hci_uart

EOF

tee /etc/modprobe.d/wifi-pwrmgnt.conf <<EOF
options r8723bs rtw_power_mgnt=0

EOF
}

pine64_bt_service(){
echo
echo Creating bluetooth service.
sleep 1s
tee /etc/systemd/system/bluetooth-module.service <<EOF
[Unit]
Description=Enable Bluetooth
ConditionPathExists=/usr/local/sbin/start-bluetooth
[Service]
Type=forking
ExecStart=/usr/local/sbin/start-bluetooth &>/dev/null
[Install]
WantedBy=multi-user.target
EOF
systemctl enable bluetooth-module
}

enable_services(){
sleep 1s
systemctl enable rc-local
systemctl enable ifplugd
if `grep -Fx 'DISTRO="debian"' "/root/userdata.txt" >/dev/null;`
	then systemctl enable resolvconf;
fi
if `grep -Fx 'DISTRO="kali"' "/root/userdata.txt" >/dev/null;`
	then systemctl enable resolvconf;
fi
systemctl enable haveged
systemctl enable zramswap
update-rc.d firstboot defaults 2
systemctl enable firstboot
systemctl enable governor
if ls /etc/systemd/system/multi-user.target.wants/ondemand.service
	then systemctl disable ondemand;
fi
}
