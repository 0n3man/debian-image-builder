# STAGE1
partition(){
image_size
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
2048
a
t
b
5859374

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
sync
umount p1
if [[ `grep -w "tritium" "board.txt"` ]]; then
	tritium_flashbin;
else
	if [[ `grep -w "nanopi" "board.txt"` ]]; then
		nanopi_flashbin;
	else
		if [[ `grep -w "pine64" "board.txt"` ]]; then
			pine64_flashbin;
		fi
	fi
fi
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

tritium_flashbin(){
dd if=output/tritium/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

nanopi_flashbin(){
dd if=output/nanopi/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

pine64_flashbin(){
dd if=output/pine64/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

partition_uuid(){
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
echo ROOT_UUID='"'$ROOT_UUID'"' > part-uuid.txt

source part-uuid.txt
}

create_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

# STAGE2
tritium_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun50i-h5-libretech-all-h3-cc.dtb
    append earlyprintk console=tty1 console=ttyS0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 fsck.repair=yes net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

nanopi_extlinux(){
echo
echo Creating extlinux file.
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun50i-h5-nanopi-neo-plus2.dtb
    append earlyprintk console=tty1 console=ttyS0,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 fsck.repair=yes net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

pine64_extlinux(){
echo
echo Adding extlinux file.
sleep 1s
mkdir -p p1/boot/extlinux
tee p1/boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun50i-a64-pine64-plus.dtb
    append earlyprintk console=tty1 console=ttyS2,115200n8 console=both rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 fsck.repair=yes net.ifnames=0 loglevel=1 init=/sbin/init
EOF
echo Done.
}

tritium_led_triggers(){
echo
echo Creating LED triggers.
cd ~
mv -f tritium /usr/local/sbin/led-trigger
chmod +x /usr/local/sbin/led-trigger
chown -R root:root /usr/local/sbin/
echo Done.
}

nanopi_led_triggers(){
echo
echo Creating LED triggers.
cd ~
mv -f nanopi /usr/local/sbin/led-trigger
chmod +x /usr/local/sbin/led-trigger
chown -R root:root /usr/local/sbin/
echo Done.
}

cypress_firmware(){
echo
echo Adding brcm firmware from cypress.
sleep 1s
mkdir cypress
cd cypress
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://github.com/pyavitz/debian-image-builder/releases/download/cypress-fmac/cypress-fmac-v5.4.18-2020_0402.zip
unzip -qq cypress-fmac-v5.4.18-2020_0402.zip
tar -xf cypress-firmware-v5.4.18-2020_0402.tar.gz
rm -f firmware/*pcie*
cp -f firmware/* /lib/firmware/brcm/
cd ~
rm -fdr cypress
echo Done.
}

nanopi_firmware(){
echo
echo Adding NanoPi NEO Plus2 firmware.
cd ~
git clone -b nanopi https://github.com/pyavitz/firmware.git
rm -f firmware/README.md
cp -fr firmware/* /lib/firmware
if [ -e fw-0a5c_21e8.hcd ]; then 
	mv fw-0a5c_21e8.hcd /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
	cp /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
	chown root:root /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
	chown root:root /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd;
fi
if [ -e UPDATE.mem ]; then
	install -Dm644 UPDATE.mem /lib/firmware/renesas_usb_fw.mem
	rm -f UPDATE.mem;
fi
rm -fdr firmware
echo Done.
}

pine64_bthelper(){
echo
echo Creating bluetooth helper.
tee /usr/local/sbin/pine64-bt <<EOF
#!/bin/bash
echo 1 > /sys/class/rfkill/rfkill0/state
sleep 1s
rtk_hciattach /dev/ttyS1 rtk_h5
sleep 2s
hciconfig hci0 up
EOF
}

pine64_bthelper2(){
echo
echo Installing bluetooth helper.
sleep 1s
git clone https://github.com/lwfinger/rtl8723bs_bt.git
cd rtl8723bs_bt
make
make install
mv rtk_hciattach /usr/local/bin/
cd ~
rm -fdr rtl8723bs_bt
mkdir -p /etc/modules-load.d/
echo "r8723bs" > /etc/modules-load.d/pine64.conf
echo "hci_uart" >> /etc/modules-load.d/pine64.conf
mkdir -p /etc/modprobe.d/
echo "options r8723bs rtw_power_mgnt=0" > /etc/modprobe.d/wifi-pwrmgnt.conf
echo Done.
}

enable_services(){
sleep 1s
systemctl enable rc-local
systemctl enable ifplugd
if [[ `grep -w 'DISTRO="debian"' "/root/userdata.txt"` ]]; then
	systemctl enable resolvconf;
else
	if [[ `grep -w 'DISTRO="kali"' "/root/userdata.txt"` ]]; then
		systemctl enable resolvconf;
	fi
fi
systemctl enable haveged
systemctl enable zramswap
systemctl enable firstboot
systemctl enable governor
if [ -e /etc/systemd/system/multi-user.target.wants/ondemand.service ]; then
	systemctl disable ondemand;
fi
}
