# UBOOT
all_source(){
mkdir -p ${ALLSRC}
cp -f board.txt ${ALLSRC}/
cd ${ALLSRC}
rm -fdr u-boot
}

# ATF
armtrusted_firmware(){
if ls arm-trusted-firmware > /dev/null 2>&1
	then atf_clean && cd arm-trusted-firmware;
	else atf_dl && git clone https://github.com/ARM-software/arm-trusted-firmware.git && cd arm-trusted-firmware;
fi
echo
echo -e "${RED}Compiling ATF${FIN}."
export CROSS_COMPILE=aarch64-linux-gnu-
make realclean > /dev/null 2>&1
make -j${CORES} PLAT=sun50i_a64 DEBUG=1 bl31 &> /dev/null
cd ..
echo_done
}

tritium_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/libretech_all_h3_cc_h5_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/libretech_all_h3_cc_h5_defconfig
}

pine64_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/pine64_plus_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/pine64_plus_defconfig
}

nanopi_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/nanopi_neo_plus2_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/nanopi_neo_plus2_defconfig
}

opir1_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/orangepi_r1_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/orangepi_r1_defconfig
}

# UBOOT
allwinner_uboot(){
echo
echo_duboot
if ls u-boot-${UBOOT_VERSION}.tar.gz > /dev/null 2>&1
	then echo -e "${YLW}u-boot-${UBOOT_VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/u-boot-${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz && echo_bdone;
fi
echo
echo_extract
tar xf u-boot-${UBOOT_VERSION}.tar.gz
echo_done
mv -f u-boot-${UBOOT_VERSION} u-boot
cp arm-trusted-firmware/build/sun50i_a64/debug/bl31.bin u-boot/bl31.bin
cp board.txt u-boot/
cd u-boot
echo
echo_cuboot
export CROSS_COMPILE=aarch64-linux-gnu-
if `grep -Fx "tritium" "../board.txt" >/dev/null;`
	then tritium_defconfig && make libretech_all_h3_cc_h5_defconfig;
fi
if `grep -Fx "pine64" "../board.txt" >/dev/null;`
	then pine64_defconfig && make pine64_plus_defconfig;
fi
if `grep -Fx "nanopi" "../board.txt" >/dev/null;`
	then nanopi_defconfig && make nanopi_neo_plus2_defconfig;
fi
if `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null;`
    then make menuconfig;
fi
make -j${CORES}
}

opir1_uboot(){
echo
echo_duboot
if ls u-boot-${UBOOT_VERSION}.tar.gz > /dev/null 2>&1
	then echo -e "${YLW}u-boot-${UBOOT_VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/u-boot-${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz && echo_ok;
fi
echo
echo_extract
tar xf u-boot-${UBOOT_VERSION}.tar.gz
echo_done
mv -f u-boot-${UBOOT_VERSION} u-boot
cp board.txt u-boot/
cd u-boot
echo
echo_cuboot
export CROSS_COMPILE=arm-linux-gnueabihf-
opir1_defconfig && make orangepi_r1_defconfig
if `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null;`
    then make menuconfig;
fi
make -j${CORES}
}

# BINARY
npineoplus2_binary(){
mkdir -p ../${BINNPI}
cp -f u-boot-sunxi-with-spl.bin ../${BINNPI}/
cp -f tools/mkimage ../${BINNPI}/
echo_done
echo
}

pine64_binary(){
mkdir -p ../${BINPINE}
cp -f u-boot-sunxi-with-spl.bin ../${BINPINE}/
cp -f tools/mkimage ../${BINPINE}/
echo_done
}

tritium_binary(){
mkdir -p ../${BINTRI}
cp -f u-boot-sunxi-with-spl.bin ../${BINTRI}/
cp -f tools/mkimage ../${BINTRI}/
echo_done
echo
}

opir1_binary(){
mkdir -p ../${BINR1}
cp -f u-boot-sunxi-with-spl.bin ../${BINR1}/
cp -f tools/mkimage ../${BINR1}/
echo_done
echo
}

allwinner_uboot_string(){
all_source
armtrusted_firmware
allwinner_uboot
if `grep -Fx "tritium" "../board.txt" >/dev/null;`
	then tritium_binary;
fi
if `grep -Fx "pine64" "../board.txt" >/dev/null;`
	then pine64_binary;
fi
if `grep -Fx "nanopi" "../board.txt" >/dev/null;`
	then npineoplus2_binary;
fi
}

orangepi-r1_uboot_string(){
all_source
opir1_uboot
opir1_binary
}

## KERNEL
all_kernel(){
mkdir -p ${ALLSRC}
cp -f board.txt ${ALLSRC}/
cd ${ALLSRC}
}

# TRITIUM
tritium_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/allwinner-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/allwinner-nc-packaging.patch ;
fi
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

# PINE64
pine64_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/allwinner-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/allwinner-nc-packaging.patch ;
fi
for i in ../${PINE}/cpufreq/*.patch; do patch -p1 < $i; done
for i in ../${PINE}/wifibt/*.patch; do patch -p1 < $i; done
for i in ../${PINE}/misc/*.patch; do patch -p1 < $i; done
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

# NANOPI
nanopi_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/allwinner-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/allwinner-nc-packaging.patch ;
fi
for i in ../${NANOPI}/*.patch; do patch -p1 < $i; done
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

# ORANGEPI R1
opir1_patch(){
echo
echo_patch
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/allwinner-v7-packaging.patch ;
	else patch -p1 < ../${PACKAGING}/allwinner-v7-nc-packaging.patch ;
fi
for i in ../${SUN8I}/*.patch; do patch -p1 < $i; done
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch ;
fi
echo_done
echo
}

allwinner_output(){
if `grep -Fx "tritium" "../board.txt" >/dev/null;`
	then mkdir -p ../output/tritium && mv -f *.deb ../output/tritium/;
fi
if `grep -Fx "pine64" "../board.txt" >/dev/null;`
	then mkdir -p ../output/pine64 && mv -f *.deb ../output/pine64/;
fi
if `grep -Fx "nanopi" "../board.txt" >/dev/null;`
	then mkdir -p ../output/nanopi && mv -f *.deb ../output/nanopi/;
fi
if `grep -Fx "opir1" "../board.txt" >/dev/null;`
	then mkdir -p ../output/opir1 && mv -f *.deb ../output/opir1/;
fi
}

## STAGE1
partition(){
image_size
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
2048
a
t
b
if `grep -Fx 'DEBIAN_VERSION="buster"' "userdata.txt" >/dev/null;`
	then 3613280
fi
if `grep -Fx 'DEBIAN_VERSION="bullseye"' "userdata.txt" >/dev/null;`
	then 4296874
fi
if `grep -Fx 'DEBIAN_VERSION="unstable"' "userdata.txt" >/dev/null;`
	then 4296874
fi
if `grep -Fx 'DEBIAN_VERSION="sid"' "userdata.txt" >/dev/null;`
	then 4296874
fi

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
sync
umount p1
if `grep -Fx "tritium" "board.txt" >/dev/null;`
   then tritium_flashbin
fi
if `grep -Fx "nanopi" "board.txt" >/dev/null;`
   then nanopi_flashbin
fi
if `grep -Fx "pine64" "board.txt" >/dev/null;`
   then pine64_flashbin
fi
if `grep -Fx "opir1" "board.txt" >/dev/null;`
   then opir1_flashbin
fi
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

tritium_flashbin(){
dd if=output/tritium/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

nanopi_flashbin(){
dd if=output/nanopi/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

pine64_flashbin(){
dd if=output/pine64/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

opir1_flashbin(){
dd if=output/opir1/u-boot-sunxi-with-spl.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1024 seek=8
}

partition_uuid(){
echo 'ROOT_UUID="' > root1
blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p' > root2
echo '"' > root3
paste -d '\0' root1 root2 root3  > root-id.txt
rm -f root1 root2 root3

echo 'ROOT_PARTUUID="' > root1
blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^PARTUUID=//p' > root2
echo '"' > root3
paste -d '\0' root1 root2 root3  > root-pid.txt
rm -f root1 root2 root3

source root-id.txt
source root-pid.txt
}

create_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

## STAGE2
allwinner_firstboot(){
echo
echo Creating firstboot.
tee /usr/local/sbin/firstboot <<EOF
#!/bin/bash
### Functions
grow_mmcblk () {
bash growpart /dev/mmcblk0 1 > /dev/null 2>&1
sleep 1s
resize2fs /dev/mmcblk0p1 > /dev/null 2>&1
}

grow_mmcblk1 () {
bash growpart /dev/mmcblk1 1 > /dev/null 2>&1
sleep 1s
resize2fs /dev/mmcblk1p1 > /dev/null 2>&1
}

grow_mmcblk2 () {
bash growpart mmcblk2 1 > /dev/null 2>&1
sleep 1s
resize2fs mmcblk2p1 > /dev/null 2>&1
}

### Grow Partition
if touch -c /dev/mmcblk0 2>/dev/null; then grow_mmcblk;
        else echo "" &>/dev/null;
fi

if touch -c /dev/mmcblk1 2>/dev/null; then grow_mmcblk1;
        else echo "" &>/dev/null;
fi

if touch -c /dev/mmcblk2 2>/dev/null; then grow_mmcblk2;
        else echo "" &>/dev/null;
fi

### Renew SSH keys
sleep 1s
/bin/rm -v /etc/ssh/ssh_host_* > /dev/null 2>&1
dpkg-reconfigure openssh-server > /dev/null 2>&1
systemctl restart ssh > /dev/null 2>&1

### Clean up
systemctl disable firstboot > /dev/null 2>&1
update-rc.d firstboot remove > /dev/null 2>&1
rm -f /var/cache/debconf/*
rm -f /usr/local/sbin/firstboot
EOF
}

orangepir1_firstboot(){
echo
echo Adding firstboot script.
mkdir -p /usr/local/sbin
mv -f opir1-firstboot /usr/local/sbin/firstboot
chmod +x /usr/local/sbin/firstboot
chown root:root /usr/local/sbin/firstboot
echo Done.
}

tritium_extlinux(){
cd ~
echo
echo Adding extlinux file.
sleep 1s
mkdir -p /boot/extlinux
tee /boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun50i-h5-libretech-all-h3-cc.dtb
    append earlyprintk console=tty1 console=ttyS0,115200n8 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 init=/sbin/init
EOF
echo Done
}

nanopi_extlinux(){
cd ~
echo
echo Creating extlinux file.
mkdir -p /boot/extlinux
tee /boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun50i-h5-nanopi-neo-plus2.dtb
    append earlyprintk console=tty1 console=ttyS0,115200n8 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 init=/sbin/init
EOF
echo Done
}

pine64_extlinux(){
cd ~
echo
echo Adding extlinux file.
sleep 1s
mkdir -p /boot/extlinux
tee /boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun50i-a64-pine64-plus.dtb
    append earlyprintk console=ttyS2,115200n8 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 init=/sbin/init
EOF
echo Done.
}

opir1_extlinux(){
cd ~
echo
echo Adding extlinux file.
sleep 1s
mkdir -p /boot/extlinux
tee /boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    initrd /boot/uInitrd
    fdtdir /boot/allwinner/
    fdt /boot/allwinner/sun8i-h2-plus-orangepi-r1.dtb
    append earlyprintk console=tty1 console=ttyS0,115200n8 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 net.ifnames=0 init=/sbin/init
EOF
echo Done.
}

tritium_led_triggers(){
echo
echo Creating LED triggers.
tee /usr/local/sbin/led-triggers <<EOF
#!/bin/bash
# led triggers
echo 0 > /sys/class/leds/librecomputer:green:pwr/brightness
echo 1 > /sys/class/leds/librecomputer:blue:status/brightness
sleep 2s
echo 0 > /sys/class/leds/librecomputer:blue:status/brightness
EOF
}

tritium_led_service(){
echo
echo Creating led service.
sleep 1s
tee /etc/systemd/system/leds.service <<EOF
[Unit]
Description=Set LEDs
ConditionPathExists=/usr/local/sbin/led-triggers
[Service]
Type=forking
ExecStart=/usr/local/sbin/led-triggers &>/dev/null
[Install]
WantedBy=multi-user.target
EOF
systemctl enable leds
}

nanopi_led_triggers(){
echo
echo Creating LED triggers.
tee /usr/local/sbin/led-triggers <<EOF
#!/bin/bash
# led triggers
echo 1 > /sys/class/leds/nanopi:green:status/brightness
sleep 2s
echo 0 > /sys/class/leds/nanopi:green:status/brightness
echo 0 > /sys/class/leds/nanopi:red:pwr/brightness
EOF
}

nanopi_led_service(){
echo
echo Creating led service.
sleep 1s
tee /etc/systemd/system/leds.service <<EOF
[Unit]
Description=Set LEDs
ConditionPathExists=/usr/local/sbin/led-triggers
[Service]
Type=forking
ExecStart=/usr/local/sbin/led-triggers &>/dev/null
[Install]
WantedBy=multi-user.target
EOF
systemctl enable leds
}

cypress_firmware(){
echo
echo Adding brcm firmware from cypress.
sleep 1s
mkdir cypress
cd cypress
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://github.com/pyavitz/debian-image-builder/releases/download/cypress-fmac/cypress-fmac-v5.4.18-2020_0402.zip
unzip -qq cypress-fmac-v5.4.18-2020_0402.zip
tar -xf cypress-firmware-v5.4.18-2020_0402.tar.gz
rm -f firmware/*pcie*
cp -f firmware/* /lib/firmware/brcm/
cd ~
rm -fdr cypress
echo Done.
}

extra_firmware(){
echo
echo Adding extra firmware.
sleep 1s
mkdir -p /lib/firmware/brcm
cd /lib/firmware/brcm
wget -cq --show-progress https://raw.githubusercontent.com/buildroot/buildroot/master/board/friendlyarm/nanopi-neo-plus2/rootfs_overlay/lib/firmware/brcm/brcmfmac43430-sdio.friendlyarm%2Cnanopi-neo-plus2.txt
cd ~
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://github.com/armbian/firmware/archive/master.tar.gz
tar xf firmware-master.tar.gz
cp -R firmware-master/* /lib/firmware
rm -fdr firmware-master firmware-master.tar.gz master.tar.gz
mv fw-0a5c_21e8.hcd /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
cp /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
install -Dm644 UPDATE.mem /usr/lib/firmware/renesas_usb_fw.mem
rm -f UPDATE.mem
echo Done.
}

pine64_bt_helper(){
echo
echo Creating bluetooth helper.
tee /usr/local/sbin/start-bluetooth <<EOF
#!/bin/bash
echo 1 > /sys/class/rfkill/rfkill0/state
sleep 1s
rtk_hciattach /dev/ttyS1 rtk_h5
sleep 2s
hciconfig hci0 up
EOF
}

pine64_bt_install(){
echo
echo Installing bluetooth helper.
sleep 1s
git clone https://github.com/lwfinger/rtl8723bs_bt.git
cd rtl8723bs_bt
make
make install
mv rtk_hciattach /usr/local/bin/
cd ~
rm -fdr rtl8723bs_bt
echo Done.
}

pine64_wifi_bt(){
echo
echo Bluetooth and wifi help.
sleep 1s
tee /etc/modules-load.d/pine64.conf <<EOF
r8723bs
hci_uart

EOF

tee /etc/modprobe.d/wifi-pwrmgnt.conf <<EOF
options r8723bs rtw_power_mgnt=0

EOF
}

pine64_bt_service(){
echo
echo Creating bluetooth service.
sleep 1s
tee /etc/systemd/system/bluetooth-module.service <<EOF
[Unit]
Description=Enable Bluetooth
ConditionPathExists=/usr/local/sbin/start-bluetooth
[Service]
Type=forking
ExecStart=/usr/local/sbin/start-bluetooth &>/dev/null
[Install]
WantedBy=multi-user.target
EOF
systemctl enable bluetooth-module
}
