# U-BOOT

odroidc4_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/odroid-c4_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/odroid-c4_defconfig
}

odroidn2_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/odroid-n2_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/odroid-n2_defconfig
}

lepotato_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/libretech-cc_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/libretech-cc_defconfig
}

amlogic_uboot(){
# original - https://gitlab.com/superna9999/amlogic-boot-fip/-/archive/master/amlogic-boot-fip-master.tar.gz
echo_bootbits
if ls amlogic-boot-fip-master.tar.gz  > /dev/null 2>&1
	then echo -e "${YLW}amlogic-boot-fip-master.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/amlogic-boot-fip/amlogic-boot-fip-master.tar.gz && echo_bdone;
fi
echo
echo_duboot
if ls u-boot-${UBOOT_VERSION}.tar.gz  > /dev/null 2>&1
	then echo -e "${YLW}u-boot-${UBOOT_VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/u-boot-${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz && echo_bdone;
fi
echo
echo_extracts
tar -xf amlogic-boot-fip-master.tar.gz
tar -xf u-boot-${UBOOT_VERSION}.tar.gz
echo_done
mv -f u-boot-${UBOOT_VERSION} u-boot
cp board.txt u-boot/
cd u-boot
echo
echo_cuboot
for i in ../${AMLUBOOT}/*.patch; do patch -p1 < $i; done
export ARCH=arm64
if `grep -Fx "odroidc4" "../board.txt" >/dev/null;`
	then odroidc4_defconfig && make odroid-c4_defconfig;
fi
if `grep -Fx "odroidn2" "../board.txt" >/dev/null;`
	then odroidn2_defconfig && make odroid-n2_defconfig;
fi
if `grep -Fx "lepotato" "../board.txt" >/dev/null;`
	then lepotato_defconfig && make libretech-cc_defconfig;
fi
if `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null;`
    then make menuconfig;
fi
make -j${CORES} CROSS_COMPILE=aarch64-linux-gnu-
}

# FIP
lepotato_fip(){
export FIPDIR=$PWD/fip
mkdir -p fip
cp -f ../amlogic-boot-fip-master/lepotato/* fip/
cp -f u-boot.bin fip/bl33.bin

$FIPDIR/blx_fix.sh \
	fip/bl30.bin \
	fip/zero_tmp \
	fip/bl30_zero.bin \
	fip/bl301.bin \
	fip/bl301_zero.bin \
	fip/bl30_new.bin \
	bl30

$FIPDIR/acs_tool.pyc \
	fip/bl2.bin \
	fip/bl2_acs.bin \
	fip/acs.bin 0

$FIPDIR/blx_fix.sh \
	fip/bl2_acs.bin \
	fip/zero_tmp \
	fip/bl2_zero.bin \
	fip/bl21.bin \
	fip/bl21_zero.bin \
	fip/bl2_new.bin \
	bl2

$FIPDIR/aml_encrypt_gxl --bl3enc \
	--input fip/bl30_new.bin

$FIPDIR/aml_encrypt_gxl --bl3enc \
	--input fip/bl31.img

$FIPDIR/aml_encrypt_gxl --bl3enc \
	--input fip/bl33.bin

$FIPDIR/aml_encrypt_gxl --bl2sig \
	--input fip/bl2_new.bin \
	--output fip/bl2.n.bin.sig

$FIPDIR/aml_encrypt_gxl --bootmk \
	--output fip/u-boot.bin \
	--bl2 fip/bl2.n.bin.sig \
	--bl30 fip/bl30_new.bin.enc \
	--bl31 fip/bl31.img.enc \
	--bl33 fip/bl33.bin.enc
}

odroidc4_fip(){
export FIPDIR=$PWD/fip
mkdir -p fip
cp -f ../amlogic-boot-fip-master/odroid-c4/* fip/
cp -f u-boot.bin fip/bl33.bin

$FIPDIR/blx_fix.sh \
	fip/bl30.bin \
	fip/zero_tmp \
	fip/bl30_zero.bin \
	fip/bl301.bin \
	fip/bl301_zero.bin \
	fip/bl30_new.bin \
	bl30

$FIPDIR/blx_fix.sh \
	fip/bl2.bin \
	fip/zero_tmp \
	fip/bl2_zero.bin \
	fip/acs.bin \
	fip/bl21_zero.bin \
	fip/bl2_new.bin \
	bl2

$FIPDIR/aml_encrypt_g12a --bl30sig --input fip/bl30_new.bin \
					--output fip/bl30_new.bin.g12a.enc \
					--level v3
$FIPDIR/aml_encrypt_g12a --bl3sig --input fip/bl30_new.bin.g12a.enc \
					--output fip/bl30_new.bin.enc \
					--level v3 --type bl30
$FIPDIR/aml_encrypt_g12a --bl3sig --input fip/bl31.img \
					--output fip/bl31.img.enc \
					--level v3 --type bl31
$FIPDIR/aml_encrypt_g12a --bl3sig --input fip/bl33.bin --compress lz4 \
					--output fip/bl33.bin.enc \
					--level v3 --type bl33 --compress lz4
$FIPDIR/aml_encrypt_g12a --bl2sig --input fip/bl2_new.bin \
					--output fip/bl2.n.bin.sig
$FIPDIR/aml_encrypt_g12a --bootmk \
		--output fip/u-boot.bin \
		--bl2 fip/bl2.n.bin.sig \
		--bl30 fip/bl30_new.bin.enc \
		--bl31 fip/bl31.img.enc \
		--bl33 fip/bl33.bin.enc \
		--ddrfw1 fip/ddr4_1d.fw \
		--ddrfw2 fip/ddr4_2d.fw \
		--ddrfw3 fip/ddr3_1d.fw \
		--ddrfw4 fip/piei.fw \
		--ddrfw5 fip/lpddr4_1d.fw \
		--ddrfw6 fip/lpddr4_2d.fw \
		--ddrfw7 fip/diag_lpddr4.fw \
		--ddrfw8 fip/aml_ddr.fw \
		--ddrfw9 fip/lpddr3_1d.fw \
		--level v3
}

odroidn2_fip(){
export FIPDIR=$PWD/fip
mkdir -p fip
cp -f ../amlogic-boot-fip-master/odroid-n2/* fip/
cp -f u-boot.bin fip/bl33.bin

$FIPDIR/blx_fix.sh \
	fip/bl30.bin \
	fip/zero_tmp \
	fip/bl30_zero.bin \
	fip/bl301.bin \
	fip/bl301_zero.bin \
	fip/bl30_new.bin \
	bl30

$FIPDIR/blx_fix.sh \
	fip/bl2.bin \
	fip/zero_tmp \
	fip/bl2_zero.bin \
	fip/acs.bin \
	fip/bl21_zero.bin \
	fip/bl2_new.bin \
	bl2

$FIPDIR/aml_encrypt_g12b --bl30sig --input fip/bl30_new.bin \
					--output fip/bl30_new.bin.g12a.enc \
					--level v3
$FIPDIR/aml_encrypt_g12b --bl3sig --input fip/bl30_new.bin.g12a.enc \
					--output fip/bl30_new.bin.enc \
					--level v3 --type bl30
$FIPDIR/aml_encrypt_g12b --bl3sig --input fip/bl31.img \
					--output fip/bl31.img.enc \
					--level v3 --type bl31
$FIPDIR/aml_encrypt_g12b --bl3sig --input fip/bl33.bin --compress lz4 \
					--output fip/bl33.bin.enc \
					--level v3 --type bl33 --compress lz4
$FIPDIR/aml_encrypt_g12b --bl2sig --input fip/bl2_new.bin \
					--output fip/bl2.n.bin.sig
$FIPDIR/aml_encrypt_g12b --bootmk \
		--output fip/u-boot.bin \
		--bl2 fip/bl2.n.bin.sig \
		--bl30 fip/bl30_new.bin.enc \
		--bl31 fip/bl31.img.enc \
		--bl33 fip/bl33.bin.enc \
		--ddrfw1 fip/ddr4_1d.fw \
		--ddrfw2 fip/ddr4_2d.fw \
		--ddrfw3 fip/ddr3_1d.fw \
		--ddrfw4 fip/piei.fw \
		--ddrfw5 fip/lpddr4_1d.fw \
		--ddrfw6 fip/lpddr4_2d.fw \
		--ddrfw7 fip/diag_lpddr4.fw \
		--ddrfw8 fip/aml_ddr.fw \
		--ddrfw9 fip/lpddr3_1d.fw \
		--level v3
}

# BINARY
lepotato_binary(){
mkdir -p ../${BINLEP}
cp -f fip/u-boot.bin ../${BINLEP}
cp -f fip/u-boot.bin.sd.bin ../${BINLEP}
cp -f tools/mkimage ../${BINLEP}
echo_done
}

odroidc4_binary(){
mkdir -p ../${BINODC4}
cp -f fip/u-boot.bin ../${BINODC4}
cp -f fip/u-boot.bin.sd.bin ../${BINODC4}
cp -f tools/mkimage ../${BINODC4}
echo_done
}

odroidn2_binary(){
mkdir -p ../${BINODN2}
cp -f fip/u-boot.bin ../${BINODN2}
cp -f fip/u-boot.bin.sd.bin ../${BINODN2}
cp -f tools/mkimage ../${BINODN2}
echo_done
}

aml_source(){
echo
mkdir -p ${AMLSRC}
cp -f board.txt ${AMLSRC}/
cd ${AMLSRC}
rm -fdr amlogic-boot-fip-master blobs/amlogic-u-boot u-boot
}

amlogic_uboot_string(){
aml_source
amlogic_uboot
if `grep -Fx "odroidc4" "../board.txt" >/dev/null;`
	then odroidc4_fip && odroidc4_binary;
fi
if `grep -Fx "odroidn2" "../board.txt" >/dev/null;`
	then odroidn2_fip && odroidn2_binary;
fi
if `grep -Fx "lepotato" "../board.txt" >/dev/null;`
	then lepotato_fip && lepotato_binary;
fi
}

### KERNEL
aml_kernel(){
echo
mkdir -p ${AMLSRC}
cp -f board.txt ${AMLSRC}/
cd ${AMLSRC}
}

# LE POTATO
potato_patch(){
echo
echo_patch
if `grep -Fx "lepotato" "../board.txt" >/dev/null;`
	then patch -p1 < ../${PACKAGING}/amlogic-noc4-packaging.patch;
fi
for i in ../${AMLOGIC}/*.patch; do patch -p1 < $i; done
cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch
echo_done
echo
}

# ODROIDC4
odroidc4_patch(){
echo
echo_patch
patch -p1 < ../${PACKAGING}/amlogic-packaging.patch
for i in ../${AMLOGIC}/*.patch; do patch -p1 < $i; done
cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch
echo_done
echo
}

# ODROIDN2
odroidn2_patch(){
echo
echo_patch
if `grep -Fx "odroidn2" "../board.txt" >/dev/null;`;
	then patch -p1 < ../${PACKAGING}/amlogic-noc4-packaging.patch;
fi
for i in ../${AMLOGIC}/*.patch; do patch -p1 < $i; done
cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch
echo_done
echo
}

amlogic_output(){
if `grep -Fx "lepotato" "../board.txt" >/dev/null;`
	then mkdir -p ../output/lepotato && mv -f *.deb ../output/lepotato/;
fi
if `grep -Fx "odroidn2" "../board.txt" >/dev/null;`
	then mkdir -p ../output/odroidn2 && mv -f *.deb ../output/odroidn2/;
fi
if `grep -Fx "odroidc4" "../board.txt" >/dev/null;`
	then mkdir -p ../output/odroidc4 && mv -f *.deb ../output/odroidc4/;
fi
}

### STAGE1
lepotato_flashbin(){
dd if=output/lepotato/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1 count=442
dd if=output/lepotato/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=512 skip=1 seek=1
}

odroidc4_flashbin(){
dd if=output/odroidc4/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=1 count=442 conv=fsync
dd if=output/odroidc4/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=512 skip=1 seek=1 conv=fsync
}

odroidn2_flashbin(){
case `grep -Fx "emmc=1" "userdata.txt" >/dev/null; echo $?` in
  0)
    dd if=files/boot/u-boot.bin.odroid-n2 of="${IMAGE_LOOP_DEV}" bs=512 seek=1
    ;;
  1)
    dd if=output/odroidn2/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=1 count=442 conv=fsync
    dd if=output/odroidn2/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" bs=512 skip=1 seek=1 conv=fsync
    ;;
esac
}

partition_uuid(){
echo 'ROOT_UUID="' > root1
blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p' > root2
echo '"' > root3
paste -d '\0' root1 root2 root3  > root-id.txt
rm -f root1 root2 root3

echo 'ROOT_PARTUUID="' > root1
blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^PARTUUID=//p' > root2
echo '"' > root3
paste -d '\0' root1 root2 root3  > root-pid.txt
rm -f root1 root2 root3

source root-id.txt
source root-pid.txt
}

choose_release(){
case `grep -Fx 'DEBIAN_VERSION="unstable"' "userdata.txt" >/dev/null; echo $?` in
  0)
tee p1/etc/apt/sources.list <<EOF
deb http://deb.debian.org/debian ${DEBIAN_VERSION} main contrib non-free
EOF
    ;;
   1)
tee p1/etc/apt/sources.list <<EOF
deb http://deb.debian.org/debian ${DEBIAN_VERSION} main contrib non-free
deb http://deb.debian.org/debian ${DEBIAN_VERSION}-updates main contrib non-free
deb http://security.debian.org/debian-security ${DEBIAN_VERSION}/updates main contrib non-free
deb http://deb.debian.org/debian/ ${DEBIAN_VERSION}-backports main contrib non-free
EOF
   ;;
esac
}

### STAGE2
lepotato_extlinux(){
cd ~
echo
echo Creating extlinux file.
mkdir -p /boot/extlinux
tee /boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    fdt /boot/amlogic/meson-gxl-s905x-libretech-cc.dtb
    append  earlyprintk console=ttyAML0,115200 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 init=/sbin/init
EOF
echo Done.
}

odroidc4_extlinux(){
cd ~
echo
echo Creating extlinux file.
mkdir -p /boot/extlinux
tee /boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    fdt /boot/amlogic/meson-sm1-odroid-c4.dtb
    append  earlyprintk console=ttyAML0,115200 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 init=/sbin/init
EOF
echo Done.
}

odroidn2_extlinux(){
cd ~
echo
echo Creating extlinux file.
mkdir -p /boot/extlinux
tee /boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    fdt /boot/amlogic/meson-g12b-odroid-n2.dtb
    append  earlyprintk console=ttyAML0,115200 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 init=/sbin/init
EOF
echo Done.
}

lepotato_led_triggers(){
echo
echo Creating led trigger
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
echo 0 > /sys/class/leds/librecomputer:system-status/brightness
echo 1 > /sys/class/leds/librecomputer:blue/brightness
sleep 2s
echo 0 > /sys/class/leds/librecomputer:blue/brightness
EOF
echo Done.
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/
}

odroidc4_led_triggers(){
echo
echo Creating led trigger
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
echo 0 > /sys/class/leds/blue:status/brightness
EOF
echo Done.
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/
}

odroidn2_led_triggers(){
echo
echo Creating led trigger
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
echo "none" >> /sys/class/leds/../../devices/platform/leds/leds/n2:blue/trigger
EOF
echo Done.
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/
}

htop_stable(){
echo
echo Installing htop with cpufreq and thermal support.
sleep 1s
git clone https://github.com/leeadama/htop.git
cd htop
./autogen.sh
./configure --prefix=/usr
make -j4
make install
cd ~
rm -fdr htop
echo Done.
}

htop_unstable(){
echo
echo Installing htop with cpufreq and thermal support.
sleep 1s
git clone https://github.com/leeadama/htop.git
cd htop
./autogen.sh
./configure --prefix=/usr
make -j4 CC=gcc-9
make install
cd ~
rm -fdr htop
echo Done..
}
