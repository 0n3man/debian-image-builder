# tmp
ALLSRC="sources"
AMLSRC="sources"
ROCSRC="sources"
BCMSRC="sources"

# output
BINPINE="../output/pine64"
BINTRI="../output/tritium"
BINODC4="../output/odroidc4"
BINODN2="../output/odroidn2"
BINODN2P="../output/odroidn2plus"
BINLEP="../output/lepotato"
BINNPI="../output/nanopi"
BINR1="../output/opir1"
BINRNG="../output/renegade"
BINR64="../output/rock64"
BINNPC="../output/nanopc"
BINRPI4="../output/raspi4"

CORES=`nproc`
DEF="../defconfig"

PACKAGING="../patches/packaging"
ALLWINNER="../patches/allwinner"
NANOPI="../patches/allwinner/nanopi"
SUN8I="../patches/allwinner/sun8i"
AMLOGIC="../patches/amlogic"
OC4UBOOT="../patches/amlogic/uboot/odroidc4"
ON2PUBOOT="../patches/amlogic/uboot/odroidn2plus"
PINE="../patches/allwinner/pine64"
RKUBOOT="../patches/rockchip/uboot"
RK3328="../patches/rockchip/3328"
RK3399="../patches/rockchip/3399"
BROADCOM="../patches/broadcom"
MISC="../patches/misc"
# do not edit above this line

# kernel
KERNEL="linux"

# stage1
IMGSIZE="2100MB"

# stage 2
PKGS1="tzdata keyboard-configuration sudo man-db dbus initramfs-tools \
       e2fsprogs u-boot-tools fonty-rg patch wget apt-transport-https \
       dirmngr rsync psmisc parted hdparm aria2 dosfstools pv"


PKGS2="bluetooth rfkill haveged resolvconf git build-essential net-tools \
       ifplugd fuse wpasupplicant wireless-tools usbutils alsa-utils gettext wget \
       mc nano figlet toilet curl dialog openssh-client openssh-server ntfs-3g bc \
       bison flex libssl-dev zram-tools python3 python3-setuptools avahi-utils \
       libncursesw5-dev autopoint autoconf automake pkg-config libtool fake-hwclock \
       distro-info-data lsb-release libell0"

RPI="curl cmake zip unzip"
EEPROM_VERSION="11.9"

FIRMWARE="firmware-linux-nonfree firmware-linux \
          firmware-misc-nonfree firmware-realtek firmware-ralink"

set_locales(){
apt install -y locales
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=C.UTF-8
locale-gen en_US.UTF-8
}

set_timezone(){
ln -snf /usr/share/zoneinfo/America/New_York /etc/localtime
echo -n 'America/New_York' > /etc/timezone
}

# do not edit below this line
# uinitrd
uinitrd(){
cd ~
echo
echo Adding uInitrd script.
mkdir -p /etc/initramfs/post-update.d/
mv -f 99-uboot /etc/initramfs/post-update.d/
chmod +x /etc/initramfs/post-update.d/99-uboot
chown root:root /etc/initramfs/post-update.d/99-uboot
}

# wireless
rtl88x2bu_conf(){
mkdir -p /usr/lib/NetworkManager/conf.d/
tee /usr/lib/NetworkManager/conf.d/rtl88x2bu.conf <<EOF
# Certain drivers are known not to support changing the MAC address.
# Disable touching the MAC address on such devices.

[device-rtl88x2bu]
match-device=driver:rtl88x2bu
wifi.scan-rand-mac-address=no
wifi.cloned-mac-address=preserve
ethernet.cloned-mac-address=preserve
EOF
chown root:root /usr/lib/NetworkManager/conf.d/rtl88x2bu.conf
}

rtl8821cu_conf(){
mkdir -p /usr/lib/NetworkManager/conf.d/
tee /usr/lib/NetworkManager/conf.d/rtl8821cu.conf <<EOF
# Certain drivers are known not to support changing the MAC address.
# Disable touching the MAC address on such devices.

[device-rtl8821cu]
match-device=driver:rtl8821cu
wifi.scan-rand-mac-address=no
wifi.cloned-mac-address=preserve
ethernet.cloned-mac-address=preserve
EOF
chown root:root /usr/lib/NetworkManager/conf.d/rtl8821cu.conf
}

# zramswap
zramswap_config(){
sed -i 's/#ALLOCATION=256/ALLOCATION=1024/g' /etc/default/zramswap
sed -i 's/#SIZE=256/SIZE=1024/g' /etc/default/zramswap
sed -i 's/#PRIORITY=100/PRIORITY=100/g' /etc/default/zramswap
}

# grab kernel version
fetch_version(){
echo 'INSTALLED_KERNEL="' > /root/kernel1
cat /usr/src/linux-headers*/include/config/kernel.release > /root/kernel2
echo '"' > /root/kernel3
paste -d '\0' kernel1 kernel2 kernel3  > /root/kernel.txt
rm -f kernel1 kernel2 kernel3
}

# shrink image
shrink(){
echo
scripts/shrink -s ${DEVICE_SOC}-debian-${DEBIAN_VERSION}-${IMAGE_DATE}.img
}

# add kernel version to img
rename_image(){
source kernel.txt
mv -f ${DEVICE_SOC}-debian-${DEBIAN_VERSION}-${IMAGE_DATE}.img ${DEVICE_SOC}-debian-${DEBIAN_VERSION}-${INSTALLED_KERNEL}-${IMAGE_DATE}.img
}

# compress image to img.xz
compress_image(){
source kernel.txt
mv -f ${DEVICE_SOC}-debian-${DEBIAN_VERSION}-${IMAGE_DATE}.img ${DEVICE_SOC}-debian-${DEBIAN_VERSION}-${INSTALLED_KERNEL}-${IMAGE_DATE}.img
xz -zev --threads=${CORES} ${DEVICE_SOC}-debian-${DEBIAN_VERSION}-${INSTALLED_KERNEL}-${IMAGE_DATE}.img
}

# setup network
network_setup(){
echo
echo Adding network configs and rules.
sleep 1s
rm -f /etc/network/interfaces
mv -f credentials.txt /boot/rename_to_credentials.txt
mv -f credentials /usr/local/bin/
chmod +x /usr/local/bin/credentials
chown root:root /usr/local/bin/credentials
mkdir -p /etc/modprobe.d
echo "options 8821cu rtw_power_mgnt=0 rtw_enusbss=0 rtw_switch_usb_mode=1" > /etc/modprobe.d/8821cu.conf
chown root:root /etc/modprobe.d/8821cu.conf
rtl88x2bu_conf
rtl8821cu_conf

tee /etc/opt/interfaces.manual <<EOF
### Interfaces
source /etc/network/interfaces.d/*

### Loopback network interface
auto lo
iface lo inet loopback

### Ethernet
allow-hotplug eth0
iface eth0 inet dhcp
    #address 10.0.0.10
    #netmask 255.255.255.0
    #gateway 10.0.0.1
    #dns-nameservers 8.8.8.8 8.8.4.4

### Mobile tether
#allow-hotplug usb0
#iface usb0 inet dhcp

### Wifi
allow-hotplug wlan0
iface wlan0 inet dhcp
	wireless-power off
	#address 10.0.0.10
	#netmask 255.255.255.0
	#gateway 10.0.0.1
	#dns-nameservers 8.8.8.8 8.8.4.4
	wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

EOF

tee /etc/opt/interfaces <<EOF
### Interfaces
source /etc/network/interfaces.d/*

### Loopback network interface
auto lo
iface lo inet loopback

### Ethernet
allow-hotplug eth0
iface eth0 inet dhcp
    #address 10.0.0.10
    #netmask 255.255.255.0
    #gateway 10.0.0.1
    #dns-nameservers 8.8.8.8 8.8.4.4

### Mobile tether
#allow-hotplug usb0
#iface usb0 inet dhcp

### Wifi
allow-hotplug wlan0
iface wlan0 inet dhcp
	wireless-power off
	wlan_address 10.0.0.10
	wlan_netmask 255.255.255.0
	wlan_gateway 10.0.0.1
	wlan_dns-nameservers 8.8.8.8 8.8.4.4
	wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

EOF

tee /etc/opt/wpa_supplicant.manual <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
	ssid="mywifissid"
	scan_ssid=1
	key_mgmt=WPA-PSK
	psk="wifipasskey"
}
EOF

tee /etc/opt/wpa_supplicant.conf <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=

network={
	name=
	scan_ssid=1
	key_mgmt=WPA-PSK
	password=
}
EOF

echo
echo Creating wifi credentials.
sleep 1s
tee /etc/systemd/system/credentials.service <<EOF
[Unit]
Description=Credentials
After=firstboot.service network.target
Before=rc-local.service
ConditionPathExists=/usr/local/bin/credentials
[Service]
ExecStart=/usr/local/bin/credentials > /dev/null 2>&1
Type=oneshot
RemainAfterExit=yes
[Install]
WantedBy=multi-user.target
EOF

systemctl enable credentials
echo Done.
}

# first boot service
firstboot_service(){
echo
echo Creating first boot.
sleep 1s
tee /etc/systemd/system/firstboot.service <<EOF
[Unit]
Description=First Boot
After=systemd-remount-fs.service
Before=credentials.service
ConditionPathExists=/usr/local/sbin/firstboot

[Service]
ExecStart=/etc/init.d/firstboot start > /dev/null 2>&1
Type=oneshot
RemainAfterExit=no

[Install]
WantedBy=multi-user.target
EOF
}
