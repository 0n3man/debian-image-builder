# KERNEL
gcc_woes () {
sed -i 's/CONFIG_CRYPTO_AEGIS128=m/# CONFIG_CRYPTO_AEGIS128 is not set/g' arch/arm64/configs/amlogic_defconfig
sed -i 's/CONFIG_CRYPTO_AEGIS128=m/# CONFIG_CRYPTO_AEGIS128 is not set/g' arch/arm64/configs/allwinner_defconfig
}

stable_download () {
echo
echo_stable
aria2c -c --show-files=false https://cdn.kernel.org/pub/linux/kernel/v5.x/${KERNEL}-${VERSION}.tar.xz
}

mainline_download () {
echo
echo_mainline
aria2c -c --show-files=false https://git.kernel.org/torvalds/t/${KERNEL}-${VERSION}.tar.gz
}

stable_extract () {
echo
echo_extract
tar xf ${KERNEL}-${VERSION}.tar.xz
#rm -f ${KERNEL}-${VERSION}.tar.xz #remove archive
echo_done
}

mainline_extract () {
echo
echo_extract
tar xf ${KERNEL}-${VERSION}.tar.gz
#rm -f ${KERNEL}-${VERSION}.tar.gz #remove archive
echo_done
}

setup () {
sleep 1s
cd ${KERNEL}-${VERSION}
export ARCH=arm64
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
cp -R ../${PACKAGING}/builddeb scripts/package/
cp -R ../${PACKAGING}/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
#make clean
#make mrproper
}

setupv7 () {
sleep 1s
cd ${KERNEL}-${VERSION}
export ARCH=arm
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
cp -R ../${PACKAGING}/builddeb scripts/package/
cp -R ../${PACKAGING}/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
#make clean
#make mrproper
}

cconfig () {
    echo_cconfig
    cp -f ../${DEF}/${MYCONFIG} arch/arm64/configs/
    make ARCH=arm64 ${MYCONFIG} &> /dev/null
    echo_done
}

cconfigv7 () {
    echo_cconfig
    cp -f ../${DEF}/${MYCONFIG} arch/arm/configs/
    make KBUILD_DEBARCH=armhf ARCH=arm ${MYCONFIG} &> /dev/null
    echo_done
}

menu_config () {
    echo
    echo_menuconfig
    sleep 1s
    make menuconfig
}

ccompile () {
    echo -- CC
    echo_build
    echo 'y' | make -j${CORES} ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bindeb-pkg
}

ncompile () {
    echo -- NC
    echo_build
    echo 'y' | make -j${CORES} ARCH=arm64 bindeb-pkg
}

ccompilev7 () {
    echo -- CC
    echo_build
    echo 'y' | make -j${CORES} KBUILD_DEBARCH=armhf  ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bindeb-pkg
}

ncompilev7 () {
    echo -- NC
    echo_build
    echo 'y' | make -j${CORES} KBUILD_DEBARCH=armhf ARCH=arm bindeb-pkg
}

# AMLOGIC
amlogic_defconfig () {
    echo_defconfig
    cp -f ../${DEF}/amlogic_defconfig arch/arm64/configs/
    case `grep -Fx 'GCC="8.3.0"' "../../userdata.txt" >/dev/null; echo $?` in
     0)
       echo -e "\e[1;32mGCC . . . OK! \e[0m"
       ;;
     1)
       echo -e "\e[1;31mGCC version not officially supported. \e[0m"
       echo -e "\e[1;31mWARNING: Removing CRYPTO_AEGIS128. \e[0m"
       gcc_woes &> /dev/null
       ;;
    esac
    make ARCH=arm64 amlogic_defconfig &> /dev/null
    echo_done
}

### LE POTATO
le_potato () {
potato_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    amlogic_defconfig
    ;;
esac
}

### ODROID C4
odroid_c4 () {
odroidc4_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    amlogic_defconfig
    ;;
esac
}

### ODROID N2
odroid_n2 () {
odroidn2_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    amlogic_defconfig
    ;;
esac
}

# ALLWINNER
allwinner_defconfig () {
    echo_defconfig
    cp -f ../${DEF}/allwinner_defconfig arch/arm64/configs/
    case `grep -Fx 'GCC="8.3.0"' "../../userdata.txt" >/dev/null; echo $?` in
     0)
       echo -e "\e[1;32mGCC . . . OK! \e[0m"
       ;;
     1)
       echo -e "\e[1;31mGCC version not officially supported. \e[0m"
       echo -e "\e[1;31mWARNING: Removing CRYPTO_AEGIS128. \e[0m"
       gcc_woes &> /dev/null
       ;;
    esac
    make ARCH=arm64 allwinner_defconfig &> /dev/null
    echo_done
}

allwinner-r1_defconfig () {
    echo_defconfig
    cp -f ../${DEF}/allwinner-r1_defconfig arch/arm/configs/
    case `grep -Fx 'GCC="8.3.0"' "../../userdata.txt" >/dev/null; echo $?` in
     0)
       echo -e "\e[1;32mGCC . . . OK! \e[0m"
       ;;
     1)
       echo -e "\e[1;31mGCC version not officially supported. \e[0m"
       echo -e "\e[1;31mWARNING: Removing CRYPTO_AEGIS128. \e[0m"
       gcc_woes &> /dev/null
       ;;
    esac
    make ARCH=arm allwinner-r1_defconfig &> /dev/null
    echo_done
}

### TRITIUM
tritium_h5 () {
tritium_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    allwinner_defconfig
    ;;
esac
}

### PINEA64 PLUS
pine_a64 () {
pine64_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    allwinner_defconfig
    ;;
esac
}

### NANOPI NEO PLUS2
nanopi_neo_plus2 () {
nanopi_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    allwinner_defconfig
    ;;
esac
}

### ORANGEPI R1
orangepi_r1 () {
opir1_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfigv7
    ;;
  1)
    allwinner-r1_defconfig
    ;;
esac
}

### ROCKCHIP
rockchip_defconfig () {
    echo_defconfig
    cp -f ../${DEF}/rockchip64_defconfig arch/arm64/configs/
    case `grep -Fx 'GCC="8.3.0"' "../../userdata.txt" >/dev/null; echo $?` in
     0)
       echo -e "\e[1;32mGCC . . . OK! \e[0m"
       ;;
     1)
       echo -e "\e[1;31mGCC version not officially supported. \e[0m"
       echo -e "\e[1;31mWARNING: Removing CRYPTO_AEGIS128. \e[0m"
       gcc_woes &> /dev/null
       ;;
    esac
    make ARCH=arm64 rockchip64_defconfig &> /dev/null
    echo_done
}

rk3328_roc_cc (){
rockchip_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    rockchip_defconfig
    ;;
esac
}

rk3328_rock64 (){
rockchip_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    rockchip_defconfig
    ;;
esac
}

architecture_v8 () {
case `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    ccompile
    ;;
  1)
    ncompile
    ;;
esac
}

architecture_v7 () {
case `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    ccompilev7
    ;;
  1)
    ncompilev7
    ;;
esac
}
