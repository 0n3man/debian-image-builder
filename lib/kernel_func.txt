# KERNEL
stable_download () {
echo
echo Downloading stable linux.
aria2c -c --show-files=false https://cdn.kernel.org/pub/linux/kernel/v5.x/${KERNEL}-${VERSION}.tar.xz
#echo Done.
}

mainline_download () {
echo
echo Downloading mainline linux.
aria2c -c --show-files=false https://git.kernel.org/torvalds/t/${KERNEL}-${VERSION}.tar.gz
#echo Done.
}

stable_extract () {
echo
echo Extracting archive.
tar xf ${KERNEL}-${VERSION}.tar.xz
#rm -f ${KERNEL}-${VERSION}.tar.xz #remove archive
echo Done.
}

mainline_extract () {
echo
echo Extracting archive.
tar xf ${KERNEL}-${VERSION}.tar.gz
#rm -f ${KERNEL}-${VERSION}.tar.gz #remove archive
echo Done.
}

setup () {
sleep 1s
cd ${KERNEL}-${VERSION}
export ARCH=arm64
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
cp -R ../${PACKAGING}/builddeb scripts/package/
cp -R ../${PACKAGING}/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
#make clean
#make mrproper
}

cconfig () {
    echo Making ${MYCONFIG}.
    cp -f ../${DEF}/${MYCONFIG} arch/arm64/configs/
    make ARCH=arm64 ${MYCONFIG} &> /dev/null
    echo Done.
}

menu_config () {
    echo
    echo Opening menuconfig.
    sleep 1s
    make menuconfig
}

ccompile () {
    echo -- CC
    echo --- Building deb packages.
    make -j${CORES} ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bindeb-pkg
}

ncompile () {
    echo -- NC
    echo --- Building deb packages.
    make -j${CORES} ARCH=arm64 bindeb-pkg
}

# AMLOGIC
### LE POTATO
le_potato () {
potato_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    potato_defconfig
    ;;
esac
}

### ODROID C4
odroid_c4 () {
odroidc4_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    odroidc4_defconfig
    ;;
esac
}

### ODROID N2
odroid_n2 () {
odroidn2_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    odroidn2_defconfig
    ;;
esac
}

# ALLWINNER
### TRITIUM
tritium_h5 () {
tritium_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    tritium_defconfig
    ;;
esac
}

### PINEA64 PLUS
pine_a64 () {
pine64_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    pine64_defconfig
    ;;
esac
}

### NANOPI NEO PLUS2
nanopi_neo_plus2 () {
nanopi_patch
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    cconfig
    ;;
  1)
    nanopi_defconfig
    ;;
esac
}
