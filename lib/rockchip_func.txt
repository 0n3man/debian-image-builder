# UBOOT
roc_source(){
mkdir -p ${ROCSRC}
cp -f board.txt ${ROCSRC}/
cd ${ROCSRC}
rm -fdr u-boot
}

rk_armtrusted_firmware(){
if ls arm-trusted-firmware > /dev/null 2>&1
	then atf_clean && cd arm-trusted-firmware;
	else atf_dl && git clone https://github.com/ARM-software/arm-trusted-firmware.git && cd arm-trusted-firmware;
fi
echo
echo -e "${COL}Compiling ATF${FIN}."
export CROSS_COMPILE=aarch64-linux-gnu-
make realclean > /dev/null 2>&1
if `grep -Fx "renegade" "../board.txt" >/dev/null;`
	then echo "rk3328" && make -j${CORES} PLAT=rk3328 bl31 > /dev/null 2>&1;
fi
if `grep -Fx "rock64" "../board.txt" >/dev/null;`
	then echo "rk3328" && make -j${CORES} PLAT=rk3328 bl31 > /dev/null 2>&1;
fi
if `grep -Fx "nanopc" "../board.txt" >/dev/null;`
	then echo "rk3399" && make -j${CORES} PLAT=rk3399 bl31 > /dev/null 2>&1;
fi
cd ..
echo_done
}

rockchip_uboot(){
echo
echo_duboot
if ls u-boot-v2020.07.tar.gz > /dev/null 2>&1
	then echo -e "${YLW}u-boot-v2020.07.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/u-boot-v2020.07/u-boot-v2020.07.tar.gz && echo_bdone;
fi
rkbuild_uboot
}

rock64_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/rock64-rk3328_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/rock64-rk3328_defconfig
}

renegade_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/roc-cc-rk3328_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/roc-cc-rk3328_defconfig
}

nanopct4_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/nanopc-t4-rk3399_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/nanopc-t4-rk3399_defconfig
echo CONFIG_DISPLAY_ROCKCHIP_EDP=y >> configs/nanopc-t4-rk3399_defconfig
}

rkbuild_uboot(){
echo
echo_extract
tar -xf u-boot-v2020.07.tar.gz
echo_done
mv -f u-boot-v2020.07 u-boot
cp -f board.txt u-boot/
cd u-boot
if `grep -Fx "renegade" "../board.txt" >/dev/null;`
	then cp ../arm-trusted-firmware/build/rk3328/release/bl31/bl31.elf bl31.elf;
fi
if `grep -Fx "rock64" "../board.txt" >/dev/null;`
	then cp ../arm-trusted-firmware/build/rk3328/release/bl31/bl31.elf bl31.elf;
fi
if `grep -Fx "nanopc" "../board.txt" >/dev/null;`
	then cp ../arm-trusted-firmware/build/rk3399/release/bl31/bl31.elf bl31.elf;
fi
echo
for i in ../${RKUBOOT}/*.patch; do patch -p1 < $i; done
export ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-
if `grep -Fx "renegade" "../board.txt" >/dev/null;`
	then renegade_defconfig && make roc-cc-rk3328_defconfig;
fi
if `grep -Fx "rock64" "../board.txt" >/dev/null;`
	then rock64_defconfig && make rock64-rk3328_defconfig;
fi
if `grep -Fx "nanopc" "../board.txt" >/dev/null;`
	then nanopct4_defconfig && make nanopc-t4-rk3399_defconfig;
fi
if `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null;`
    then make menuconfig;
fi
make -j${CORES}
}

renegade_binary(){
mkdir -p ../${BINRNG}
cp -f idbloader.img ../${BINRNG}/idbloader.bin
cp -f u-boot.itb ../${BINRNG}/
echo_done
echo
}

rock64_binary(){
mkdir -p ../${BINR64}
cp -f idbloader.img ../${BINR64}/idbloader.bin
cp -f u-boot.itb ../${BINR64}/
echo_done
echo
}

nanopc_binary(){
mkdir -p ../${BINNPC}
cp -f idbloader.img ../${BINNPC}/idbloader.bin
cp -f u-boot.itb ../${BINNPC}/
echo_done
echo
}

rockchip_uboot_string(){
roc_source
rk_armtrusted_firmware
rockchip_uboot
if `grep -Fx "renegade" "../board.txt" >/dev/null;`
	then renegade_binary;
fi
if `grep -Fx "rock64" "../board.txt" >/dev/null;`
	then rock64_binary;
fi
if `grep -Fx "nanopc" "../board.txt" >/dev/null;`
	then nanopc_binary;
fi
}

## KERNEL
roc_kernel(){
mkdir -p ${ROCSRC}
cp -f board.txt ${ROCSRC}/
cd ${ROCSRC}
}

rk3328_patch(){
    echo
    echo_patch
    patch -p1 < ../${PACKAGING}/rockchip-packaging.patch
    for i in ../${RK3328}/*.patch; do patch -p1 < $i; done
    cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch
    echo_done
    echo
}

rk3399_patch(){
    echo
    echo_patch
    patch -p1 < ../${PACKAGING}/rockchip-packaging.patch
    for i in ../${RK3399}/*.patch; do patch -p1 < $i; done
    cp -f ../${PACKAGING}/headers-byteshift.patch headers-byteshift.patch
    echo_done
    echo
}

rockchip_output(){
if `grep -Fx "renegade" "../board.txt" >/dev/null;`
	then mkdir -p ../output/renegade && mv -f *.deb ../output/renegade/;
fi
if `grep -Fx "rock64" "../board.txt" >/dev/null;`
	then mkdir -p ../output/rock64 && mv -f *.deb ../output/rock64/;
fi
if `grep -Fx "nanopc" "../board.txt" >/dev/null;`
	then mkdir -p ../output/nanopc && mv -f *.deb ../output/nanopc/;
fi
}

## STAGE1
renegade_flashbin(){
dd if=output/renegade/idbloader.bin of="${IMAGE_LOOP_DEV}" seek=64
dd if=output/renegade/u-boot.itb of="${IMAGE_LOOP_DEV}" seek=16384
}

rock64_flashbin(){
dd if=output/rock64/idbloader.bin of="${IMAGE_LOOP_DEV}" seek=64
dd if=output/rock64/u-boot.itb of="${IMAGE_LOOP_DEV}" seek=16384
}

nanopc_flashbin(){
dd if=output/nanopc/idbloader.bin of="${IMAGE_LOOP_DEV}" seek=64
dd if=output/nanopc/u-boot.itb of="${IMAGE_LOOP_DEV}" seek=16384
}

partition(){
case `grep -Fx 'DEBIAN_VERSION="unstable"' "userdata.txt" >/dev/null; echo $?` in
  0)
    truncate -s ${IMGSIZE_UNSTABLE} "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
    ;;
  1)
    truncate -s ${IMGSIZE} "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
    ;;
esac
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
32767
a
t
b
3613280
p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
if `grep -Fx "renegade" "board.txt" >/dev/null;`
   then renegade_flashbin;
fi
if `grep -Fx "rock64" "board.txt" >/dev/null;`
   then rock64_flashbin;
fi
if `grep -Fx "nanopc" "board.txt" >/dev/null;`
   then nanopc_flashbin;
fi
sync
umount p1
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

partition_uuid(){
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
ROOT_PARTUUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^PARTUUID=//p')

echo ROOT_UUID='"'$ROOT_UUID'"' >> part-uuid.txt
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' >> part-uuid.txt

source part-uuid.txt
}

choose_release(){
case `grep -Fx 'DEBIAN_VERSION="unstable"' "userdata.txt" >/dev/null; echo $?` in
  0)
tee p1/etc/apt/sources.list <<EOF
deb http://deb.debian.org/debian ${DEBIAN_VERSION} main contrib non-free
EOF
    ;;
   1)
tee p1/etc/apt/sources.list <<EOF
deb http://deb.debian.org/debian ${DEBIAN_VERSION} main contrib non-free
deb http://deb.debian.org/debian ${DEBIAN_VERSION}-updates main contrib non-free
deb http://security.debian.org/debian-security ${DEBIAN_VERSION}/updates main contrib non-free
deb http://deb.debian.org/debian/ ${DEBIAN_VERSION}-backports main contrib non-free
EOF
   ;;
esac
}

create_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

## STAGE2
rock64_extlinux(){
cd ~
echo
echo Adding extlinux file.
sleep 1s
mkdir -p /boot/extlinux
tee /boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    fdt /boot/rockchip/rk3328-rock64.dtb
    append  earlyprintk console=ttyS2,115200n8 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 init=/sbin/init
EOF
echo Done
}

nanopc_extlinux(){
cd ~
echo
echo Adding extlinux file.
sleep 1s
mkdir -p /boot/extlinux
tee /boot/extlinux/extlinux.conf <<EOF
label kernel
    kernel /boot/Image
    fdt /boot/rockchip/rk3399-nanopc-t4.dtb
    append  earlyprintk console=ttyS2,115200n8 rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 usb-storage.quirks=0x1d6b:0x0003:u,0x1f75:0x0621:u,0x1058:0x259b:u init=/sbin/init
EOF
echo Done
}

renegade_uinitrd(){
cd ~
echo
echo  Adding needed boot files.
mkdir -p /etc/initramfs/post-update.d/
mv -f 99-uboot /etc/initramfs/post-update.d/
mv -f boot.cmd /boot/
chmod +x /etc/initramfs/post-update.d/99-uboot
chown root:root /etc/initramfs/post-update.d/99-uboot
}

renegade_bootcmd(){
tee /boot/bootEnv.txt <<EOF
verbosity=1
rootdev=PARTUUID=${ROOT_PARTUUID}
rootfstype=ext4
EOF
chown root:root /boot/bootEnv.txt
echo Done.
}

extra_firmware(){
echo
echo Adding extra firmware.
sleep 1s
mkdir -p /lib/firmware/brcm
cd /lib/firmware/brcm
wget -cq --show-progress https://raw.githubusercontent.com/buildroot/buildroot/master/board/friendlyarm/nanopi-neo-plus2/rootfs_overlay/lib/firmware/brcm/brcmfmac43430-sdio.friendlyarm%2Cnanopi-neo-plus2.txt
cd ~
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://github.com/armbian/firmware/archive/master.tar.gz
tar xf firmware-master.tar.gz
cp -R firmware-master/* /lib/firmware
rm -fdr firmware-master firmware-master.tar.gz master.tar.gz
mv fw-0a5c_21e8.hcd /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
cp /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
echo Done.
}

htop_stable(){
echo
echo Installing htop with cpufreq and thermal support.
sleep 1s
git clone https://github.com/leeadama/htop.git
cd htop
./autogen.sh
./configure --prefix=/usr
make -j4
make install
cd ~
rm -fdr htop
echo Done.
}

htop_unstable(){
echo
echo Installing htop with cpufreq and thermal support.
sleep 1s
git clone https://github.com/leeadama/htop.git
cd htop
./autogen.sh
./configure --prefix=/usr
make -j4 CC=gcc-9
make install
cd ~
rm -fdr htop
echo Done.
}

rock64_led_trigger(){
echo
echo Creating LED triggers.
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
# led trigger
if ls /sys/class/leds/standby/brightness > /dev/null 2>&1;
        then echo 0 > /sys/class/leds/standby/brightness;
fi
if ls /sys/class/leds/led-1/brightness  > /dev/null 2>&1;
        then echo 0 > /sys/class/leds/led-1/brightness;
fi
EOF
}

renegade_led_trigger(){
echo
echo Creating LED triggers.
tee /usr/local/sbin/led-trigger <<EOF
#!/bin/bash
# led triggers
echo 0 > /sys/class/leds/firefly:blue:power/brightness
EOF
}

rockchip_led_service(){
echo
echo Creating led service.
sleep 1s
tee /etc/systemd/system/leds.service <<EOF
[Unit]
Description=Turn off Light-emitting diode
ConditionPathExists=/usr/local/sbin/led-trigger
[Service]
Type=forking
ExecStart=/usr/local/sbin/led-trigger &>/dev/null
[Install]
WantedBy=multi-user.target
EOF
systemctl enable leds
}
