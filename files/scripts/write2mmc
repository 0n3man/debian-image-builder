#!/bin/bash
# Description: Install to eMMC
# Destination: /usr/local/bin/write2mmc

if [[ -f "/etc/opt/board.txt" ]]; then
	DIR="/usr/lib/u-boot"
	FSTYPE=`findmnt -v -n -o FSTYPE /`
	if [[ `lsblk | grep boot0` ]]; then
		MMC=`ls /dev/mmcblk*boot0 | sed 's/boot0//g'`
	fi
	source /etc/opt/board.txt
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Your board is not supported." 0 0
	exit 0
fi
if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
	:;
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Script requires a internet connection." 0 0
	exit 0
fi
if [[ "$P_VALUE" == "p2" ]]; then
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Partition scheme is not supported." 0 0
	exit 0
fi
if [[ "$FSTYPE" == "ext4" ]]; then
	:;
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    The $FSTYPE filesystem is not supported." 0 0
	exit 0
fi

# functions
supported_boards(){
if [[ "$BOARD" == "bananapip2zero" || "$BOARD" == "nanopineoplus2" ]]; then
	# allwinner
	supported=1;
fi
if [[ "$BOARD" == "bananapim5" || "$BOARD" == "lepotato" || "$BOARD" == "odroidc4" || "$BOARD" == "odroidn2" || "$BOARD" == "odroidn2plus" || "$BOARD" == "radxazero" || "$BOARD" == "x96air" ]]; then
	# amlogic
	supported=1;
fi
if [[ "$BOARD" == "pinebookpro" || "$BOARD" == "nanopct4" || "$BOARD" == "nanopir4se" || "$BOARD" == "nanopir5s" || "$BOARD" == "renegade" ]]; then
	# rockchip
	supported=1;
fi
if [[ "$BOARD" == "odroidxu4" ]]; then
	# samsung
	supported=1;
fi
}

# progress bar
check_progressbar(){
if [[ -f "/etc/opt/progressbar.txt" ]]; then
	:;
else
	mkdir -p /etc/opt
	wget -cq https://raw.githubusercontent.com/pyavitz/bash_progress_bar/master/progress_bar.sh -P /etc/opt/
	mv -f /etc/opt/progress_bar.sh /etc/opt/progressbar.txt
fi
}

# bind emmc
bind_emmc(){
if [[ "$BOARD" == "lepotato" ]]; then
	MMC_TARGET="d0074000.mmc"
	SOC_FAMILY="meson-gx-mmc"
fi
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	MMC_TARGET="ffe07000.mmc"
	SOC_FAMILY="meson-gx-mmc"
fi
if [[ "$BOARD" == "renegade" ]]; then
	MMC_TARGET="ff520000.mmc"
	SOC_FAMILY="dwmmc_rockchip"
fi
echo -n ${MMC_TARGET} > /sys/bus/platform/drivers/${SOC_FAMILY}/unbind
sleep .75
echo -n ${MMC_TARGET} > /sys/bus/platform/drivers/${SOC_FAMILY}/bind
sleep .75
lsblk -dno NAME,SIZE
}

# partition
partition(){
if [[ "$GPT" == "true" ]]; then
	dd if=/dev/zero of="${MMC}" bs=8M count=1
	parted --script "${MMC}" \
	mklabel gpt \
	mkpart 1 ext2 16MiB 100%
else
	dd if=/dev/zero of="${MMC}" bs=8M count=1
	echo -e "o
	n
	p
	1
	${OFFSET}
	a
	t
	b
	4101561

	p
	w" | fdisk "${MMC}"
fi
partprobe "${MMC}"
if [[ `ls "${MMC}p1"` ]]; then
	echo 'y' | mkfs.ext4 -L ROOTFS "${MMC}p1"
	sleep .50
	mount "${MMC}p1" /mnt
	sync
	umount /mnt
	sleep .50
	mount -o defaults,noatime "${MMC}p1" /mnt
	bash growpart ${MMC} 1
	sleep .75
	resize2fs "${MMC}p1"
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Partitioning failed!" 0 0
	exit 0
fi
}

# rsync
transfer(){
cd /
rsync -apvx --progress --stats --human-readable . /mnt > /dev/null 
}

transfer_to_emmc(){
source /etc/opt/progressbar.txt
enable_trapping
setup_scroll_area
for i in {0..100}
do
	if [ $i = 0 ]; then
		block_progress_bar $i
	else
		transfer
		draw_progress_bar $i
	fi
done
destroy_scroll_area
}

# uuid / partuuid
fetch_uuid(){
ROOT_UUID=$(blkid -o export -- ${MMC}p1 | sed -ne 's/^UUID=//p')
ROOT_PARTUUID=$(blkid -o export -- ${MMC}p1 | sed -ne 's/^PARTUUID=//p')

echo ROOT_UUID='"'$ROOT_UUID'"' > /etc/opt/part-uuid.txt
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' >> /etc/opt/part-uuid.txt
}

# fstab
create_fstab(){
rm -f /mnt/etc/fstab
tee /mnt/etc/fstab <<EOF
UUID=${ROOT_UUID}	/	ext4	defaults,noatime,commit=600,errors=remount-ro 0 1
tmpfs	/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

# extlinux
create_extlinux(){
FDT="../${FAMILY}/${DTB}.dtb"
FDTDIR="../${FAMILY}/"
CMDLINE="append earlyprintk ${CONSOLE} rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 fsck.repair=yes ${EXTRA} loglevel=1 init=/sbin/init"
mkdir -p /mnt/boot/extlinux
rm -f /mnt/boot/extlinux/extlinux.conf
tee /mnt/boot/extlinux/extlinux.conf <<EOF
label default
	kernel ../Image
	initrd ../uInitrd
	fdtdir ${FDTDIR}
	fdt ${FDT}
	#fdtoverlays
	${CMDLINE}
EOF
if [[ "$FAMILY_EXT" == "rk3399" ]]; then
	sed -i 's/#fdtoverlays/fdtoverlays ..\/rockchip\/overlays\/rockchip-rk3399-opp-2ghz.dtbo/g' /mnt/boot/extlinux/extlinux.conf
fi
}

# run script
if [ "$USER" != "root" ]; then
        echo "Please run this as root or with sudo privileges."
        exit 1
fi
supported_boards
if [ $supported -eq 1 ] > /dev/null 2>&1; then
	:;
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Your board is not supported." 0 0
	exit 0
fi
check_progressbar
if [[ "$BOARD" == "lepotato" || "$FAMILY_EXT" == "odroid" || "$BOARD" == "renegade" ]]; then
	echo ""
	echo "Binding eMMC ..."
	bind_emmc
	echo "Done."
fi

echo ""
if [[ `ls "${MMC}"` ]]; then
	echo -e "Partitioning "
	partition
	echo -e "[done]"
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Did you attach the eMMC module?" 0 0
	exit 0
fi

echo ""
echo -e "Please be patient as the root filesystem"
echo -e "is transferred over to the eMMC module."
transfer_to_emmc
sleep .75
clear -x

echo "Writing u-boot ..."
sleep .75
if [[ "$FAMILY" == "allwinner" ]]; then
	dd if=${DIR}/u-boot-sunxi-with-spl.bin of=${MMC} conv=fsync bs=1024 seek=8
fi
if [[ "$FAMILY" == "amlogic" ]]; then
	dd if=${DIR}/u-boot.bin of=${MMC} bs=512 seek=1
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	dd if=${DIR}/idbloader.bin of=${MMC} seek=64
	dd if=${DIR}/u-boot.itb of=${MMC} seek=16384
fi
if [[ "$FAMILY" == "samsung" ]]; then
	DEVICE=`ls /dev/mmcblk*boot0 | sed 's/^.....//'`
	echo 0 > /sys/block/${DEVICE}/force_ro
	sleep 1s
	dd if=${DIR}/bl1.bin of=/dev/${DEVICE} seek=0 conv=fsync
	dd if=${DIR}/bl2.bin of=/dev/${DEVICE} seek=30 conv=fsync
	dd if=${DIR}/u-boot.bin of=/dev/${DEVICE} seek=62 conv=fsync
	dd if=${DIR}/tzsw.bin of=/dev/${DEVICE} seek=1502 conv=fsync
	dd if=/dev/zero of=/dev/${DEVICE} seek=2015 bs=512 count=32 conv=fsync
fi
echo "Done."

echo ""
echo -en "Fetching UUID "
fetch_uuid
echo "[done]"

echo "Creating fstab and extlinux ..."
source /etc/opt/part-uuid.txt
create_fstab
create_extlinux
echo "Done."

echo ""
echo -en "Unmounting eMMC "
rm -f /etc/opt/part-uuid.txt
rm -fdr /mnt/mnt/*
umount /mnt
rm -fdr /mnt/*
echo "[done]"
echo ""
echo "You may now power down and remove the sdcard."
exit 0
