#!/bin/bash
# Description: Transfer to eMMC
# Destination: /usr/local/bin/write2mmc

# LANGUAGE
export LC_ALL=$(locale -a|grep -ix 'c.utf-\?8' || echo C)

# CAUTION
WARNING (){
export NEWT_COLORS='root=,black'
whiptail --msgbox "    $WARNING_MSG" 0 0
exit 0
}

if [ "$USER" != "root" ]; then
        echo "Please run this as root or with sudo privileges."
        exit 1
fi
if [[ -f "/etc/opt/board.txt" ]]; then
	. /etc/opt/board.txt
else
	WARNING_MSG="Your board is not supported."
	WARNING
fi
if [[ "$FAMILY" =~ ^(allwinner|amlogic|freescale|rockchip|samsung|spacemit)$ ]]; then
	:;
else
	PLATFORM=`echo $FAMILY | sed -e 's/\(.*\)/\U\1/'`
	WARNING_MSG="The $PLATFORM platform is currently not supported."
	WARNING
fi
if [[ "$BOOTINI" == "true" || "$EFI" == "true" || "$PETITBOOT" == "true" ]]; then
	WARNING_MSG="Only boards using BOOTCMD and EXTLINUX are currently supported at this time."
	WARNING
fi
if [[ -d "/usr/lib/u-boot" ]]; then
	UBOOT_DIR="/usr/lib/u-boot"
else
	WARNING_MSG="The '/usr/lib/u-boot' directory is missing?"
	WARNING
fi
if [[ -f "/etc/default/write2mmc" ]]; then
	. /etc/default/write2mmc
else
	echo 'DISCLAIMER="true"' | tee /etc/default/write2mmc > /dev/null 2>&1
	echo 'VERBOSITY="0"' | tee -a /etc/default/write2mmc > /dev/null 2>&1
	. /etc/default/write2mmc
fi

# STYLE
BLD="\033[1m"
ITL="\033[3m"
FIN="\033[0m"
EE="echo -e"
EN="echo -en"

$EE
$EE "${BLD}Would you like to transfer the current install to another drive?${FIN}"
$EN "${ITL}YES / NO:${FIN} "
read CHOICE
if [[ "$CHOICE" == "YES" || "$CHOICE" == "Yes" || "$CHOICE" == "yes" ]]; then
	if [[ "$DISCLAIMER" == "true" ]]; then
		export NEWT_COLORS='root=,black'
		whiptail --title "DISCLAIMER" --msgbox "The write2mmc script can transfer your current install to other drives besides the eMMC. Being able to boot from USB or NVME depends more on the maturity of U-Boot, than the ability to write the OS to those drives." 0 0
		sed -i 's/DISCLAIMER="true"/DISCLAIMER="false"/g' /etc/default/write2mmc
	fi
else
	$EE "Program Terminated."
	exit 0
fi

# BIND EMMC
if [[ "$BOARD" =~ ^(lepotato|renegade|rock64)$ || "$FAMILY_EXT" == "odroid" ]]; then
	$EE ""
	$EE "${BLD}If you haven't already, attach the eMMC module and select Bind.${FIN}"
	$EE "${BLD}If this doesn't apply to you, select Skip.${FIN}"
	options=("Bind" "Skip")
	select opt in "${options[@]}"
	do
		case $opt in
			"Bind")
				if [[ "$BOARD" == "lepotato" ]]; then
					MMC_TARGET="d0074000.mmc"
					SOC_FAMILY="meson-gx-mmc"
				fi
				if [[ "$FAMILY_EXT" == "odroid" ]]; then
					MMC_TARGET="ffe07000.mmc"
					SOC_FAMILY="meson-gx-mmc"
				fi
				if [[ "$BOARD" =~ ^(renegade|rock64)$ ]]; then
					MMC_TARGET="ff520000.mmc"
					SOC_FAMILY="dwmmc_rockchip"
				fi
				if [[ "$BOARD" =~ ^(lepotato|renegade|rock64)$ || "$FAMILY_EXT" == "odroid" ]]; then
					echo -n ${MMC_TARGET} > /sys/bus/platform/drivers/${SOC_FAMILY}/unbind
					sleep .75
					echo -n ${MMC_TARGET} > /sys/bus/platform/drivers/${SOC_FAMILY}/bind
					sleep .75
					#lsblk -dno NAME,SIZE
				fi
				break
				;;
			"Skip")
				break
				;;
			*) echo "invalid option $REPLY";;
		esac
	done
fi

# CURRENT
$EE ""
$EE "${BLD}${ITL}CURRENT PARTITION SCHEME${FIN}"
if [[ `findmnt -v -n -o SOURCE /boot` ]]; then
	CB_NODE=`findmnt -v -n -o SOURCE /boot`
	CB_FSTYPE=`findmnt -v -n -o FSTYPE /boot`
	$EN "BOOT: ${BLD}${CB_NODE}${FIN} "
	$EE "FSTYPE: ${BLD}${CB_FSTYPE}${FIN}"
fi
if [[ `findmnt -v -n -o SOURCE /` ]]; then
	CR_NODE=`findmnt -v -n -o SOURCE /`
	CR_FSTYPE=`findmnt -v -n -o FSTYPE /`
	$EN "ROOT: ${BLD}${CR_NODE}${FIN} "
	$EE "FSTYPE: ${BLD}${CR_FSTYPE}${FIN}"
fi

# AVAILABLE 
if [[ `ls /dev/sd*[a-z]` ]] > /dev/null 2>&1 || \
	[[ `ls /dev/nvme*[0-9]` ]] > /dev/null 2>&1 || \
		[[ `ls /dev/mmcblk[0-9]` ]] > /dev/null 2>&1; then
	$EE ""
	$EE "${BLD}${ITL}AVAILABLE DRIVES${FIN}"
	if [[ `ls /dev/sd*[a-z]` ]] > /dev/null 2>&1; then
		HD_CHK=`findmnt -v -n -o SOURCE / | sed 's/.$//'`
		ls /dev/sd*[a-z]
	fi
	if [[ `ls /dev/nvme*[0-9]` ]] > /dev/null 2>&1; then
		NVME_CHK=`findmnt -v -n -o SOURCE / | sed 's/..$//'`
		ls /dev/nvme*[0-9]n1
	fi
	if [[ `ls /dev/mmcblk[0-9]` ]] > /dev/null 2>&1; then
		MMC_CHK=`findmnt -v -n -o SOURCE / | sed 's/..$//'`
		ls /dev/mmcblk[0-9]
	fi
	if [[ `lsblk | grep boot0` ]]; then
		EMMC=`ls /dev/mmcblk*boot0 | sed 's/boot0//g'`
		if [[ "$EMMC" == "$MMC_CHK" ]]; then
			$EE ""
			$EE "${BLD}eMMC Detected:${FIN} $EMMC"
		fi
	fi
else
	$EE ""
	$EE "There are no available drives to transfer to."
	exit 0
fi

# CHOOSE DRIVE
$EE ""
$EE "${BLD}From the list of AVAILABLE DRIVES above, write in the device node"
$EN "you want to transfer the current install to:${FIN} "
$EN "/dev/"
read NODE
DEVICE_NODE="/dev/${NODE}"
if [[ -e "$DEVICE_NODE" ]]; then
	:;
else
	$EE
	$EE "${BLD}WARNING:${FIN} The drive you selected is not available or invalid."
	exit 0
fi
if [[ "$HD_CHK" == "$DEVICE_NODE" || "$NVME_CHK" == "$DEVICE_NODE" || "$MMC_CHK" == "$DEVICE_NODE" ]]; then
	$EE
	$EE "${BLD}WARNING:${FIN} The drive you selected is currently in use."
	exit 0
fi
if [[ "$EMMC" == "$DEVICE_NODE" ]]; then
	EMMC_TRUE="true"
else
	EMMC_TRUE="false"	
fi
	
# PARTITION SCHEME
$EE ""
$EE "${BLD}Select a Partition Scheme${FIN}"
options=("One Partition" "Two Partitions")
select opt in "${options[@]}"
do
	case $opt in
		"One Partition")
			P_VALUE="p1"
			break
			;;
		"Two Partitions")
			P_VALUE="p2"
			break
			;;
		*) echo "invalid option $REPLY";;
	esac
done

# FILESYSTEM TYPES
if [[ "$P_VALUE" == "p2" ]]; then
	$EE ""
	$EE "${BLD}Filesystem Types${FIN}"
	$EE "${ITL}BOOT OPTIONS: ${FIN}vfat ext2 ext4"
	$EE "${ITL}ROOT OPTIONS: ${FIN}btrfs ext4 f2fs xfs"
	$EE ""
	$EN "BOOT Partition: "
	read B_FSTYPE
	$EN "ROOT Partition: "
	read R_FSTYPE
else
	R_FSTYPE="ext4"
fi

# BOOT PARTITION VARIABLES
if [[ "$P_VALUE" == "p1" ]]; then
	P_ROOTFS="p1"
	LOADTYPE="ext4load"
	if [[ `ls $DEVICE_NODE | grep "/dev/sd"` ]]; then P_ROOTFS=`echo $P_ROOTFS | sed 's/p//g'`; fi
else
	if [[ "$B_FSTYPE" =~ ^(vfat|ext2|ext4)$ ]]; then
		if [[ "$P_VALUE" == "p2" ]]; then
			if [[ "$B_FSTYPE" == "vfat" ]]; then
				LOADTYPE="fatload"
				BOOTFS="mkfs.vfat -n"
				BOOTFS_TABLE="/boot	vfat	defaults,flush 0 2"
			fi
			if [[ "$B_FSTYPE" =~ ^(ext2|ext4)$ ]]; then
				LOADTYPE="${B_FSTYPE}load"
				EXTFS="${B_FSTYPE}"
				BOOTFS="mkfs.${EXTFS} -L"
				BOOTFS_TABLE="/boot	${EXTFS}	rw,relatime,errors=continue 0 2"
			fi
			P_BOOT="p1"
			P_ROOTFS="p2"
			BOOT_LABEL="BOOT"
			if [[ `ls $DEVICE_NODE | grep "/dev/sd"` ]]; then
				P_BOOT=`echo $P_BOOT | sed 's/p//g'`
				P_ROOTFS=`echo $P_ROOTFS | sed 's/p//g'`
			fi
			MAKE_BOOTFS="${BOOTFS} ${BOOT_LABEL} ${DEVICE_NODE}${P_BOOT}"
		fi
	else
		$EE ""
		$EE "Filesystem ${B_FSTYPE} is not supported or invalid."
		exit 0
	fi
fi

# ROOT PARTITION VARIABLES
if [[ "$R_FSTYPE" =~ ^(btrfs|ext4|f2fs|xfs)$ ]]; then
	if [[ "$R_FSTYPE" == "btrfs" ]]; then
		MAKE_ROOTFS="mkfs.btrfs -f -L ROOTFS ${DEVICE_NODE}${P_ROOTFS}"
		MOUNT_ROOTFS="mount -o compress=lzo,noatime,subvol=@ ${DEVICE_NODE}${P_ROOTFS} /mnt/${P_ROOTFS}"
		ROOTFS_TABLE="btrfs	defaults,compress=lzo,noatime,subvol=@ 0 1"
		ROOT_FSTYPE="rootfstype=btrfs rootflags=subvol=@"
		RESIZEFS="btrfs filesystem resize max /mnt/${P_ROOTFS}"
	fi
	if [[ "$R_FSTYPE" == "ext4" ]]; then
		MAKE_ROOTFS="mkfs.ext4 -L ROOTFS ${DEVICE_NODE}${P_ROOTFS}"
		MOUNT_ROOTFS="mount -o defaults,noatime ${DEVICE_NODE}${P_ROOTFS} /mnt/${P_ROOTFS}"
		ROOTFS_TABLE="ext4	defaults,noatime,commit=600,errors=remount-ro 0 1"
		ROOT_FSTYPE="rootfstype=ext4"
		RESIZEFS="resize2fs ${DEVICE_NODE}${P_ROOTFS}"
	fi
	if [[ "$R_FSTYPE" == "f2fs" ]]; then
		MAKE_ROOTFS="mkfs.f2fs -f -l ROOTFS ${DEVICE_NODE}${P_ROOTFS}"
		MOUNT_ROOTFS="mount -o rw,acl,active_logs=6,background_gc=on,user_xattr ${DEVICE_NODE}${P_ROOTFS} /mnt/${P_ROOTFS}"
		ROOTFS_TABLE="f2fs	rw,acl,active_logs=6,background_gc=on,user_xattr 0 0"
		ROOT_FSTYPE="rootfstype=f2fs"
		RESIZEFS="resize.f2fs ${DEVICE_NODE}${P_ROOTFS}"
	fi
	if [[ "$R_FSTYPE" == "xfs" ]]; then
		MAKE_ROOTFS="mkfs.xfs -f -L ROOTFS ${DEVICE_NODE}${P_ROOTFS}"
		MOUNT_ROOTFS="mount -o defaults,noatime ${DEVICE_NODE}${P_ROOTFS} /mnt/${P_ROOTFS}"
		ROOTFS_TABLE="xfs	defaults,noatime 0 1"
		ROOT_FSTYPE="rootfstype=xfs"
		RESIZEFS="xfs_growfs -d /mnt/${P_ROOTFS}"
	fi
else
	$EE ""
	$EE "Filesystem ${R_FSTYPE} is not supported or invalid."
	exit 0
fi

# GUID PARTITION TABLE
if [[ "$FAMILY" == "rockchip" ]]; then
	$EE ""
	$EE "${BLD}GUID Partition Table${FIN} (recommended)"
	options=("Yes" "No")
	select opt in "${options[@]}"
	do
		case $opt in
			"Yes")
				GPT="true"
				break
				;;
			"No")
				GPT="false"
				break
				;;
			*) echo "invalid option $REPLY";;
		esac
	done
fi

# SUMMARY
$EE ""
$EE "${BLD}Summary List${FIN}"
$EE "Board: $DEFAULT_MOTD"
$EN "Platform: "; $EE "$FAMILY" | sed -e 's/\(.*\)/\U\1/'
$EE "Drive: $DEVICE_NODE"
$EN "Partitions: "; $EE "$P_VALUE" | sed 's/p//g'
if [[ "$FAMILY" == "rockchip" ]]; then
	$EN "GPT: "; $EE "$GPT"
fi
$EE "eMMC Transfer: $EMMC_TRUE"
if [[ "$P_VALUE" == "p2" ]]; then
	$EN "BOOT FSTYPE: "; $EE "$B_FSTYPE"
	$EN "ROOT FSTYPE: "; $EE "$R_FSTYPE"
else
	$EN "ROOT FSTYPE: "; $EE "$R_FSTYPE"
fi
$EE ""
options=("Continue" "Quit")
select opt in "${options[@]}"
do
	case $opt in
		"Continue")
			break
			;;
		"Quit")
			$EE "Program Terminated."
			exit 0
			;;
		*) echo "invalid option $REPLY";;
	esac
done

# PARTITION FUNCTIONS
one_partition (){
# wipe drive
sfdisk --delete $DEVICE_NODE
sleep 1
kpartx $DEVICE_NODE
sleep .25
kpartx -u $DEVICE_NODE
sleep 1
# fin
if [[ "$GPT" == "true" ]]; then
	parted --script "${DEVICE_NODE}" \
	mklabel gpt \
	mkpart 1 ext2 ${PART_OFFSET} 100%
else
	parted --script "${DEVICE_NODE}" \
	mklabel msdos \
	mkpart primary ext2 ${PART_OFFSET} 100%
fi
partprobe "${DEVICE_NODE}"
sleep 1.25
if [[ `ls "${DEVICE_NODE}${P_ROOTFS}"` ]]; then
	mkdir -p /mnt/${P_ROOTFS}
	echo 'y' | $MAKE_ROOTFS
	sleep .50
	mount "${DEVICE_NODE}${P_ROOTFS}" /mnt/${P_ROOTFS}
	sync
	umount /mnt/${P_ROOTFS}
	sleep .50
	$MOUNT_ROOTFS
	bash growpart ${DEVICE_NODE} 1
	sleep .75
	$RESIZEFS
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Partitioning failed!" 0 0
	exit 0
fi
}

two_partitions (){
# wipe drive
sfdisk --delete $DEVICE_NODE
sleep 1
kpartx $DEVICE_NODE
sleep .25
kpartx -u $DEVICE_NODE
sleep 1
# fin
if [[ "$B_FSTYPE" == "vfat" ]]; then
	if [[ "$GPT" == "true" ]]; then
		parted --script "${DEVICE_NODE}" \
		mklabel gpt \
		mkpart 1 fat32 ${PART_OFFSET} ${BSIZE} \
		mkpart 2 ext2 ${BSIZE} 100%
	else
		parted --script "${DEVICE_NODE}" \
		mklabel msdos \
		mkpart primary fat32 ${PART_OFFSET} ${BSIZE} \
		mkpart primary ext2 ${BSIZE} 100%
		parted --script "${DEVICE_NODE}" set 1 boot on
	fi
	if [[ "$EFI" == "true" ]]; then
		parted --script "${DEVICE_NODE}" set 1 esp on
	fi
fi
if [[ "$B_FSTYPE" == "ext2" || "$B_FSTYPE" == "ext4" ]]; then
	if [[ "$GPT" == "true" ]]; then
		parted --script "${DEVICE_NODE}" \
		mklabel gpt \
		mkpart 1 ext2 ${PART_OFFSET} ${BSIZE} \
		mkpart 2 ext2 ${BSIZE} 100%
	else
		parted --script "${DEVICE_NODE}" \
		mklabel msdos \
		mkpart primary ext2 ${PART_OFFSET} ${BSIZE} \
		mkpart primary ext2 ${BSIZE} 100%
	fi
fi
partprobe "${DEVICE_NODE}"
sleep 1.25
if [[ `ls "${DEVICE_NODE}${P_ROOTFS}"` ]]; then
	mkdir -p /mnt/${P_BOOT}
	mkdir -p /mnt/${P_ROOTFS}
	echo 'y' | $MAKE_BOOTFS
	echo 'y' | $MAKE_ROOTFS
	sleep .50
	mount "${DEVICE_NODE}${P_BOOT}" /mnt/${P_BOOT}
	mount "${DEVICE_NODE}${P_ROOTFS}" /mnt/${P_ROOTFS}
	if [[ "$R_FSTYPE" == "btrfs" ]]; then
		btrfs subvolume create /mnt/${P_ROOTFS}/@
	fi
	sync
	umount /mnt/${P_ROOTFS}
	sleep .50
	if [[ "$R_FSTYPE" == "f2fs" ]]; then
		$RESIZEFS
		sleep .75
	fi
	$MOUNT_ROOTFS
	if [[ "$R_FSTYPE" == "btrfs" || "$R_FSTYPE" == "ext4" || "$R_FSTYPE" == "xfs"  ]]; then
		bash growpart ${DEVICE_NODE} 2
		sleep .75
		$RESIZEFS
	fi
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Partitioning failed!" 0 0
	exit 0
fi
}

# OFFSET FIRST PARTITION BY
if [[ "$OFFSET" =~ ^(4096|8192)$ ]]; then PART_OFFSET="4MiB"; fi
if [[ "$OFFSET" == "32768" ]]; then PART_OFFSET="16MiB"; fi
if [[ "$OFFSET" == "204800" ]]; then PART_OFFSET="100MiB"; fi
# BOOT PARTITION SIZE
if [[ "$EFI" == "true" ]]; then BSIZE="128MiB"; else BSIZE="512MiB"; fi
# SETUP PARTITIONS
if [[ "$P_VALUE" == "p1" ]]; then
	if [[ "$VERBOSITY" = "1" ]]; then
		one_partition
	else
		$EE
		$EN "Partitioning ${BLD}${DEVICE_NODE}${FIN} "
		one_partition > /dev/null 2>&1
		$EE "[done]"
	fi
fi
if [[ "$P_VALUE" == "p2" ]]; then
	if [[ "$VERBOSITY" = "1" ]]; then
		two_partitions
	else
		$EE
		$EN "Partitioning ${BLD}${DEVICE_NODE}${FIN} "
		two_partitions > /dev/null 2>&1
		$EE "[done]"
	fi
fi

# TRANSFER
transfer (){
cd /
if [[ "$P_VALUE" == "p2" ]]; then
	cp -ax /boot/* /mnt/${P_BOOT}/
	if [[ "$FAMILY_EXT" == "ac2xx" ]]; then
		rm -f /mnt/${P_BOOT}/{aml_autoscript,aml_autoscript.cmd,s905_autoscript,s905_autoscript.cmd,chainload.bin}
		rm -fdr /mnt/${P_BOOT}/{LOST.DIR,Android}
	fi
fi
cp -axv . /mnt/${P_ROOTFS}
if [[ "$P_VALUE" == "p1" ]]; then
	mkdir -p /mnt/${P_ROOTFS}/boot
	cp -ax /boot/* /mnt/${P_ROOTFS}/boot/
	rm -fdr /mnt/${P_ROOTFS}/boot/lost+found
	if [[ "$FAMILY_EXT" == "ac2xx" ]]; then
		rm -f /mnt/${P_ROOTFS}/boot/{aml_autoscript,aml_autoscript.cmd,s905_autoscript,s905_autoscript.cmd,chainload.bin}
		rm -fdr /mnt/${P_ROOTFS}/boot/{LOST.DIR,Android}
	fi
fi
if [[ "$P_VALUE" == "p2" ]]; then
	rm -fdr /mnt/${P_ROOTFS}/boot/*
fi
}

if [[ "$VERBOSITY" = "1" ]]; then
	transfer
else
	$EN "Transferring to ${BLD}${DEVICE_NODE}${FIN} "
	transfer > /dev/null 2>&1
	$EE "[done]"
fi

# FLASH U-BOOT
flash_uboot (){
$EE "Writing u-boot ..."
sleep .75
if [[ "$FAMILY" == "allwinner" ]]; then
	dd if="${UBOOT_DIR}/u-boot-sunxi-with-spl.bin" of="${DEVICE_NODE}" conv=fsync bs=1024 seek=8
fi
if [[ "$FAMILY" == "freescale" ]]; then
	if [[ "$SERIES" == "imx6q" ]]; then
		dd if="${UBOOT_DIR}/sploader.bin" of="${DEVICE_NODE}" bs=1k seek=1 conv=sync
		dd if="${UBOOT_DIR}/u-boot.bin" of="${DEVICE_NODE}" bs=1k seek=69 conv=sync
	fi
	if [[ "$SERIES" == "imx8mp" ]]; then
		dd if="${UBOOT_DIR}/u-boot.bin" of="${DEVICE_NODE}" bs=1024 seek=32 conv=notrunc
	fi
fi
if [[ "$FAMILY" == "amlogic" ]]; then
	if [[ "$EMMC_TRUE" == "true" ]]; then
		dd if="${UBOOT_DIR}/u-boot.bin" of="${DEVICE_NODE}" bs=512 seek=1	
	else
		dd if="${UBOOT_DIR}/u-boot.bin.sd.bin" of="${DEVICE_NODE}" conv=fsync bs=1 count=442
		dd if="${UBOOT_DIR}/u-boot.bin.sd.bin" of="${DEVICE_NODE}" conv=fsync bs=512 skip=1 seek=1
	fi
fi
if [[ "$FAMILY" == "rockchip" ]] && [[ -f "${UBOOT_DIR}/u-boot-rockchip.bin" ]]; then
	dd if="${UBOOT_DIR}/u-boot-rockchip.bin" of="${DEVICE_NODE}" seek=64
fi
if [[ "$FAMILY" == "rockchip" ]] && [[ -f "${UBOOT_DIR}/idbloader.bin" ]] && [[ -f "${UBOOT_DIR}/u-boot.itb" ]]; then
	dd if="${UBOOT_DIR}/idbloader.bin" of="${DEVICE_NODE}" seek=64
	dd if="${UBOOT_DIR}/u-boot.itb" of="${DEVICE_NODE}" seek=16384
fi
if [[ "$FAMILY" == "samsung" ]]; then
	if [[ "$EMMC_TRUE" == "true" ]]; then
		DEVICE=`ls /dev/mmcblk*boot0 | sed 's/^.....//'`
		echo 0 > /sys/block/${DEVICE}/force_ro
		sleep 1s
		dd if="${UBOOT_DIR}/bl1.bin" of="/dev/${DEVICE}" seek=0 conv=fsync
		dd if="${UBOOT_DIR}/bl2.bin" of="/dev/${DEVICE}" seek=30 conv=fsync
		dd if="${UBOOT_DIR}/u-boot.bin" of="/dev/${DEVICE}" seek=62 conv=fsync
		dd if="${UBOOT_DIR}/tzsw.bin" of="/dev/${DEVICE}" seek=1502 conv=fsync
		dd if="/dev/zero" of="/dev/${DEVICE}" seek=2015 bs=512 count=32 conv=fsync
	else
		dd if="${UBOOT_DIR}/bl1.bin" of="${DEVICE_NODE}" seek=0 conv=fsync
		dd if="${UBOOT_DIR}/bl2.bin" of="${DEVICE_NODE}" seek=30 conv=fsync
		dd if="${UBOOT_DIR}/u-boot.bin" of="${DEVICE_NODE}" seek=62 conv=fsync
		dd if="${UBOOT_DIR}/tzsw.bin" of="${DEVICE_NODE}" seek=1502 conv=fsync
		dd if="/dev/zero" of="${DEVICE_NODE}" seek=2015 bs=512 count=32 conv=fsync
	fi
fi
if [[ "$FAMILY" == "spacemit" ]]; then
	sleep .50
	if [[ "$EMMC_TRUE" == "true" ]]; then
		DEVICE=`ls /dev/mmcblk*boot0 | sed 's/^.....//'`
		echo 0 > /sys/block/${DEVICE}/force_ro
		sleep .50
		dd if="${UBOOT_DIR}/bootinfo_emmc.bin" of="/dev/${DEVICE}" bs=512 conv=notrunc
		dd if="${UBOOT_DIR}/FSBL.bin" of="/dev/${DEVICE}" bs=512 seek=1 conv=notrunc
		dd if="${UBOOT_DIR}/FSBL.bin" of="/dev/${DEVICE}" bs=512 seek=512 conv=notrunc
	else
		dd if="${UBOOT_DIR}/bootinfo_emmc.bin" of="${DEVICE_NODE}" bs=512 conv=notrunc
		dd if="${UBOOT_DIR}/FSBL.bin" of="${DEVICE_NODE}" bs=512 seek=1 conv=notrunc
		dd if="${UBOOT_DIR}/FSBL.bin" of="${DEVICE_NODE}" bs=512 seek=512 conv=notrunc
	fi
	dd if="${UBOOT_DIR}/fw_dynamic.bin" of="${DEVICE_NODE}" bs=512 seek=1280 conv=notrunc
	dd if="${UBOOT_DIR}/u-boot.bin" of="${DEVICE_NODE}" bs=512 seek=2048 conv=notrunc
fi
}

if [[ `echo $NODE | grep "sd[a-z]"` ]] || [[ `echo $NODE | grep "nvme[0-9][a-z][0-9]"` ]] && \
	[[ -v "EMMC" ]] && [[ ! -z "$EMMC" ]]; then
	$EE ""
	$EE "Would you like to flash U-Boot to the eMMC?"
	options=("Yes" "No")
	select opt in "${options[@]}"
	do
		case $opt in
			"Yes")
				EMMC_TRUE="true"
				break
				;;
			"No")
				break
				;;
			*) echo "invalid option $REPLY";;
		esac
	done
fi

if [[ "$VERBOSITY" = "1" ]]; then
	flash_uboot
else
	$EN "Finishing "
	flash_uboot > /dev/null 2>&1
fi

env_config (){
if [[ "$P_VALUE" == "p1" ]]; then
	rm -f /mnt/${P_ROOTFS}/env_k1-x.txt
	rm -f /mnt/${P_ROOTFS}/boot/env_k1-x.txt
	cp -f ${UBOOT_DIR}/env_k1-x.txt /mnt/${P_ROOTFS}
	sed -i "s/^knl_name=.*/knl_name=boot\/Image.itb/" /mnt/${P_ROOTFS}/env_k1-x.txt
	sed -i "s/^ramdisk_name=.*/ramdisk_name=boot\/initrd.gz/" /mnt/${P_ROOTFS}/env_k1-x.txt
	sed -i "s/^dtb_dir=.*/dtb_dir=boot\/spacemit/" /mnt/${P_ROOTFS}/env_k1-x.txt
	sed -i "s/^mmc_rootfstype=.*/mmc_rootfstype=${R_FSTYPE}/" /mnt/${P_ROOTFS}/env_k1-x.txt
	sed -i "s/^partuuid=.*/partuuid=${ROOT_PARTUUID}/" /mnt/${P_ROOTFS}/env_k1-x.txt
fi
if [[ "$P_VALUE" == "p2" ]]; then
	rm -f /mnt/${P_BOOT}/env_k1-x.txt
	rm -f /mnt/${P_ROOTFS}/env_k1-x.txt
	cp -f ${UBOOT_DIR}/env_k1-x.txt /mnt/${P_BOOT}
	sed -i "s/^knl_name=.*/knl_name=Image.itb/" /mnt/${P_BOOT}/env_k1-x.txt
	sed -i "s/^ramdisk_name=.*/ramdisk_name=initrd.gz/" /mnt/${P_BOOT}/env_k1-x.txt
	sed -i "s/^dtb_dir=.*/dtb_dir=spacemit/" /mnt/${P_BOOT}/env_k1-x.txt
	sed -i "s/^mmc_rootfstype=.*/mmc_rootfstype=${R_FSTYPE}/" /mnt/${P_BOOT}/env_k1-x.txt
	sed -i "s/^partuuid=.*/partuuid=${ROOT_PARTUUID}/" /mnt/${P_BOOT}/env_k1-x.txt
fi
}

# FINISH
p1_boot (){
$EE
if [[ "$EXTLINUX" == "true" ]]; then
	$EE "extlinux.conf"
	sed -i "/append/c\\	${CMDLINE}" /mnt/${P_ROOTFS}/boot/extlinux/extlinux.conf
	cat /mnt/${P_ROOTFS}/boot/extlinux/extlinux.conf
fi
if [[ "$BOOTCMD" == "true" ]]; then
	sed -i 's/^setenv rootfstype.*/setenv rootfstype "'"${ROOT_FSTYPE}"'"/' /mnt/${P_ROOTFS}/boot/boot.cmd
	sed -i 's/^setenv loading.*/setenv loading "'"${LOADTYPE}"'"/' /mnt/${P_ROOTFS}/boot/boot.cmd
	mkimage -C none -A ${ARCH} -T script -d /mnt/${P_ROOTFS}/boot/boot.cmd /mnt/${P_ROOTFS}/boot/boot.scr
fi
#if [[ "$BOARD" == "bananapif3" ]]; then $EE "env_k1-x.txt"; env_config; fi
$EE
$EE "fstab"
rm -f /mnt/${P_ROOTFS}/etc/fstab
tee /mnt/${P_ROOTFS}/etc/fstab <<EOF
UUID=${ROOT_UUID}	/	${ROOTFS_TABLE}
tmpfs	/tmp		tmpfs	defaults,nosuid 0 0
EOF
}

p2_boot (){
$EE
if [[ "$EXTLINUX" == "true" ]]; then
	$EE "extlinux.conf"
	sed -i "/append/c\\	${CMDLINE}" /mnt/${P_BOOT}/extlinux/extlinux.conf
	cat /mnt/${P_BOOT}/extlinux/extlinux.conf
fi
if [[ "$BOOTCMD" == "true" ]]; then
	sed -i 's/^setenv rootfstype.*/setenv rootfstype "'"${ROOT_FSTYPE}"'"/' /mnt/${P_BOOT}/boot.cmd
	sed -i 's/^setenv loading.*/setenv loading "'"${LOADTYPE}"'"/' /mnt/${P_BOOT}/boot.cmd
	mkimage -C none -A ${ARCH} -T script -d /mnt/${P_BOOT}/boot.cmd /mnt/${P_BOOT}/boot.scr
fi
#if [[ "$BOARD" == "bananapif3" ]]; then $EE "env_k1-x.txt"; env_config; fi
$EE
$EE "fstab"
rm -f /mnt/${P_ROOTFS}/etc/fstab
tee /mnt/${P_ROOTFS}/etc/fstab <<EOF
UUID=${BOOT_UUID}	${BOOTFS_TABLE}
UUID=${ROOT_UUID}	/	${ROOTFS_TABLE}
tmpfs	/tmp		tmpfs	defaults,nosuid 0 0
EOF
}

BOOT_UUID=$(blkid -o export -- ${DEVICE_NODE}${P_BOOT} | sed -ne 's/^UUID=//p')
BOOT_PARTUUID=$(blkid -o export -- ${DEVICE_NODE}${P_BOOT} | sed -ne 's/^PARTUUID=//p')
ROOT_UUID=$(blkid -o export -- ${DEVICE_NODE}${P_ROOTFS} | sed -ne 's/^UUID=//p')
ROOT_PARTUUID=$(blkid -o export -- ${DEVICE_NODE}${P_ROOTFS} | sed -ne 's/^PARTUUID=//p')
if [[ -v "LOGLEVEL" ]]; then :; else LOGLEVEL="loglevel=1"; fi
CMDLINE="append earlyprintk ${CONSOLE} rw root=PARTUUID=${ROOT_PARTUUID} rootwait ${ROOT_FSTYPE} fsck.repair=yes ${LOGLEVEL} ${EXTRA} init=/sbin/init"
if [[ "$P_VALUE" == "p1" ]]; then
	if [[ "$VERBOSITY" = "1" ]]; then p1_boot; else p1_boot > /dev/null 2>&1; fi
	rm -fdr /mnt/${P_ROOTFS}/mnt/*
	umount /mnt/${P_ROOTFS}
	rm -fdr /mnt/${P_ROOTFS}
fi
if [[ "$P_VALUE" == "p2" ]]; then
	if [[ "$VERBOSITY" = "1" ]]; then p2_boot; else p2_boot > /dev/null 2>&1; fi
	rm -fdr /mnt/${P_ROOTFS}/mnt/*
	umount /mnt/${P_BOOT}
	umount /mnt/${P_ROOTFS}
	rm -fdr /mnt/${P_BOOT}
	rm -fdr /mnt/${P_ROOTFS}
fi

if [[ "$VERBOSITY" = "0" ]]; then $EE "[done]"; fi
$EE ""
$EE "${BLD}Transfer complete.${FIN}"

exit 0
