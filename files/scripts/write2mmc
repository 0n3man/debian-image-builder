#!/bin/bash

if [ -f /etc/opt/board.txt ]; then
	DIR="/usr/lib/u-boot"
	source /etc/opt/board.txt
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Your board is not supported." 0 0;
	exit 0;
fi
if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
	:;
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Script requires a internet connection." 0 0;
	exit 0;
fi
if [[ "$P_VALUE" == "p2" ]]; then
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Partition scheme is not supported." 0 0;
	exit 0;
fi

# functions
supported_boards(){
MMC=`ls /dev/mmcblk*boot0 | sed 's/boot0//g'`
if [[ "$BOARD" == "nanopi" ]]; then
	# allwinner (nanopi = /dev/mmcblk2)
	supported=1;
fi
if [[ "$BOARD" == "lepotato" ]] || [[ "$BOARD" == "odroidc4" ]] || [[ "$BOARD" == "odroidn2" ]] || [[ "$BOARD" == "odroidn2plus" ]] || [[ "$BOARD" == "radxazero" ]]; then
	# amlogic (amlogic = /dev/mmcblk1) (odroidn2/+ = /dev/mmcblk0)
	supported=1;
fi
if [[ "$BOARD" == "nanopc" ]] || [[ "$BOARD" == "renegade" ]]; then
	# rockchip (nanopc = /dev/mmcblk2) (renegade = /dev/mmcblk1)
	supported=1;
fi
if [[ "$BOARD" == "odroidxu4" ]]; then
	# samsung (odroidxu4 = /dev/mmcblk0)
	supported=1;
fi
}

# progress bar
check_progressbar(){
if [ -f /etc/opt/progressbar.txt ]; then
	:;
else
	mkdir -p /etc/opt
	wget -cq https://raw.githubusercontent.com/pyavitz/bash_progress_bar/master/progress_bar.sh -P /etc/opt/
	mv -f /etc/opt/progress_bar.sh /etc/opt/progressbar.txt
fi
}

# bind emmc
libre_bind_emmc(){
echo -n d0074000.mmc > /sys/bus/platform/drivers/meson-gx-mmc/unbind
sleep 1
echo -n d0074000.mmc > /sys/bus/platform/drivers/meson-gx-mmc/bind
sleep 1
lsblk -dno NAME,SIZE
}

odroid_bind_emmc(){
echo -n ffe07000.mmc > /sys/bus/platform/drivers/meson-gx-mmc/unbind
sleep 1
echo -n ffe07000.mmc > /sys/bus/platform/drivers/meson-gx-mmc/bind
sleep 1
lsblk -dno NAME,SIZE
}

renegade_bind_emmc(){
echo -n ff520000.mmc > /sys/bus/platform/drivers/dwmmc_rockchip/unbind
sleep 1
echo -n ff520000.mmc > /sys/bus/platform/drivers/dwmmc_rockchip/bind
sleep 1
lsblk -dno NAME,SIZE
}

# partition
partition(){
dd if=/dev/zero of=${MMC} bs=512 count=1
fdisk ${MMC} <<EOF
o
n
p
1
${OFFSET}
a
t
b
4101561
p
w
EOF

partprobe ${MMC}
echo 'y' | mkfs.ext4 -L ROOTFS ${MMC}p1
mount ${MMC}p1 /mnt
sync
umount /mnt
mount -o defaults,noatime ${MMC}p1 /mnt
bash growpart ${MMC} 1
sleep 1s
resize2fs ${MMC}p1
}

# rsync
transfer(){
cd /
rsync -apvx --progress --stats --human-readable . /mnt > /dev/null 
}

transfer_to_emmc(){
source /etc/opt/progressbar.txt
enable_trapping
setup_scroll_area
for i in {0..100}
do
	if [ $i = 0 ]; then
		block_progress_bar $i
	else
		transfer
		draw_progress_bar $i
	fi
done
destroy_scroll_area
}

# uuid / partuuid
fetch_uuid(){
ROOT_UUID=$(blkid -o export -- ${MMC}p1 | sed -ne 's/^UUID=//p')
ROOT_PARTUUID=$(blkid -o export -- ${MMC}p1 | sed -ne 's/^PARTUUID=//p')

echo ROOT_UUID='"'$ROOT_UUID'"' > /etc/opt/part-uuid.txt
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' >> /etc/opt/part-uuid.txt
}

# fstab
create_fstab(){
rm -f /mnt/etc/fstab
tee /mnt/etc/fstab <<EOF
UUID=${ROOT_UUID}	/	ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs	/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

# extlinux
create_extlinux(){
FDT="../${FAMILY}/${DTB}.dtb"
FDTDIR="../${FAMILY}/"
CMDLINE="append earlyprintk ${CONSOLE} rw root=PARTUUID=${ROOT_PARTUUID} rootwait rootfstype=ext4 fsck.repair=yes ${EXTRA} loglevel=1 init=/sbin/init"
mkdir -p /mnt/boot/extlinux
rm -f /mnt/boot/extlinux/extlinux.conf
tee /mnt/boot/extlinux/extlinux.conf <<EOF
label default
	kernel ../Image
	initrd ../uInitrd
	fdtdir ${FDTDIR}
	fdt ${FDT}
	#fdtoverlays
	${CMDLINE}
EOF
if [[ "$BOARD" == "radxazero" ]]; then
	sed -i 's/#fdtoverlays/fdtoverlays ..\/amlogic\/overlays\/meson-g12a-opp-2ghz.dtbo/g' /mnt/boot/extlinux/extlinux.conf;
fi
if [[ "$BOARD" == "nanopc" ]]; then
	sed -i 's/#fdtoverlays/#fdtoverlays ..\/rockchip\/overlays\/rockchip-rk3399-opp-2ghz.dtbo/g' /mnt/boot/extlinux/extlinux.conf;
fi
}

# flash u-boot
allwinner_flash_uboot(){ # allwinner
dd if=${DIR}/u-boot-sunxi-with-spl.bin of=${MMC} conv=fsync bs=1024 seek=8
sync
}

amlogic_flash_uboot(){ # amlogic
dd if=${DIR}/u-boot.bin of=${MMC} bs=512 seek=1
sync
}

rockchip_flash_uboot(){ # rockchip
dd if=${DIR}/idbloader.bin of=${MMC} seek=64
dd if=${DIR}/u-boot.itb of=${MMC} seek=16384
sync
}

samsung_flash_uboot(){ # samsung
DEVICE=`ls /dev/mmcblk*boot0 | sed 's/^.....//'`
echo 0 > /sys/block/${DEVICE}/force_ro
sleep 1s
dd if=${DIR}/bl1.bin of=/dev/${DEVICE} seek=0 conv=fsync
dd if=${DIR}/bl2.bin of=/dev/${DEVICE} seek=30 conv=fsync
dd if=${DIR}/u-boot.bin of=/dev/${DEVICE} seek=62 conv=fsync
dd if=${DIR}/tzsw.bin of=/dev/${DEVICE} seek=1502 conv=fsync
dd if=/dev/zero of=/dev/${DEVICE} seek=2015 bs=512 count=32 conv=fsync
}

# run script
if [ "$USER" != "root" ]; then
        echo "Please run this as root or with sudo privileges.";
        exit 1;
fi
supported_boards
if [ $supported -eq 1 ]; then
	:;
else
	export NEWT_COLORS='root=,black'
	whiptail --msgbox "    Your board is not supported." 0 0;
	clear -x;
	exit 0;
fi
check_progressbar
if [[ "$BOARD" == "lepotato" ]]; then
	echo ""
	echo "Binding eMMC ...";
	libre_bind_emmc;
	echo "Done.";
fi
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	echo ""
	echo "Binding eMMC ...";
	odroid_bind_emmc;
	echo "Done.";
fi
if [[ "$BOARD" == "renegade" ]]; then
	echo ""
	echo "Binding eMMC ...";
	renegade_bind_emmc;
	echo "Done.";
fi

echo ""
echo -en "Partitioning "
partition > /dev/null 2>&1
echo "[done]"

echo ""
echo -e "Please be patient as the root filesystem"
echo -e "is transferred over to the eMMC module."
transfer_to_emmc
sleep 1s
clear -x

echo "Writing u-boot ..."
sleep 1s
if [[ "$FAMILY" == "allwinner" ]]; then
	allwinner_flash_uboot;
fi
if [[ "$FAMILY" == "amlogic" ]]; then
	amlogic_flash_uboot;
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	rockchip_flash_uboot;
fi
if [[ "$FAMILY" == "samsung" ]]; then
	samsung_flash_uboot;
fi
echo "Done."

echo ""
echo -en "Fetching UUID "
fetch_uuid
echo "[done]"

echo "Creating fstab and extlinux ..."
source /etc/opt/part-uuid.txt
create_fstab
create_extlinux
echo "Done."

echo ""
echo -en "Unmounting eMMC "
rm -f /etc/opt/part-uuid.txt
rm -fdr /mnt/mnt/*
umount /mnt
rm -fdr /mnt/*
echo "[done]"
echo ""
echo "You may now power down and remove the sdcard."
exit 0
