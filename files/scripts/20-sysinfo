#!/bin/bash
# Description: Provides sysinfo on login
# Destination: /etc/update-motd.d/20-sysinfo

# variables
PRESENT=`cat /sys/devices/system/cpu/present`
CPU0=`lscpu | grep "Model name" | sed -n 1p | sed 's/Model name://g' | sed -r '1s/\s+//g'`
CPU0M=`lscpu | grep "CPU max MHz" | sed -n 1p | sed 's/CPU max MHz://g' | sed -r '1s/\s+//g' | sed 's/.0000//g'`
if [[ -f "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq" ]]; then
	CPU0C=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq | sed 's/...$//');
fi
CPU1=`lscpu | grep "Model name" | sed -n 2p | sed 's/Model name://g' | sed -r '1s/\s+//g'`
CPU1M=`lscpu | grep "CPU max MHz" | sed -n 2p | sed 's/CPU max MHz://g' | sed -r '1s/\s+//g' | sed 's/.0000//g'`
if [[ -f "/sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_cur_freq" ]]; then
	CPU1C=$(sudo cat /sys/devices/system/cpu/cpu4/cpufreq/cpuinfo_cur_freq | sed 's/...$//');
fi
if [[ -f "/sys/class/thermal/thermal_zone0/temp" ]]; then
	CPU0T=$(cat /sys/class/thermal/thermal_zone0/temp|cut -c1-2);
fi
if [[ -f "/sys/class/thermal/thermal_zone1/temp" ]]; then
	CPU1T=$(cat /sys/class/thermal/thermal_zone1/temp|cut -c1-2);
fi
if [[ -f "/sys/class/hwmon/hwmon2/fan1_input" ]] && [[ "/sys/class/hwmon/hwmon2/pwm1" ]]; then
	HWMON="hwmon2"
else
	if [[ -f "/sys/class/hwmon/hwmon3/fan1_input" ]] && [[ "/sys/class/hwmon/hwmon3/pwm1" ]]; then
		HWMON="hwmon3"
	fi
fi
NETWORK=$(ip -o -4 -br a | grep -v '^lo'| sed 's/^/ /' | sed 's/\/..//' | sed -r '1s/\s+/ /g' | sed -r '2s/\s+/ /g')
ETH=`echo -e Wired:`
WLAN=`echo -e Wireless:`
USB=`echo -e Tether:`
HA=`echo -e Hassio:`
DOCKER=`echo -e Docker:`

# functions
count_high (){
echo -en "Processors:  "$CPU0; echo -en " @ $CPU0M"; echo -en "MHz $CPU0T°C";
echo -en "," $CPU1; echo -en " @ $CPU1M"; echo -e "MHz $CPU1T°C";
echo -en "Cur freq:   " $CPU0C; echo -en "MHz $CPU1C"; echo -e "MHz"
}

count_low (){
echo -en "Processor:   "$CPU0; echo -en " @ $CPU0M"; echo -e "MHz $CPU0T°C";
echo -en "Cur freq:   " $CPU0C; echo -e "MHz";
}

cpu_hwinfo (){
if [[ "$PRESENT" == "0-7" || "$PRESENT" == "0-5" ]]; then
	count_high;
fi
if [[ "$PRESENT" == "0-3" || "$PRESENT" == "0-1" || "$PRESENT" == "0" ]]; then
	count_low;
fi
}

fan_pwr (){
RPM=`cat /sys/class/hwmon/${HWMON}/fan1_input`
PWM=`cat /sys/class/hwmon/${HWMON}/pwm1`
echo -e "Fan:         ${RPM} RPM ($PWM)"
}

# display
echo -e "== DISK"
df -h | egrep '(Filesystem)|(/dev/mmc)|(/dev/root)|(/dev/sd)|(/dev/nvme)'
echo ""
echo -e "== NETWORK"
echo -e "Hostname:    $(hostname)"
echo -e "$NETWORK" | sed "s/^[ \t]*//" | sed "s/eth0/$ETH       eth0/g" | sed "s/eth1/$ETH       eth1/g" | sed "s/eth2/$ETH       eth2/g" | sed "s/wlan0/$WLAN    wlan0/g" | sed "s/wlan1/$WLAN    wlan1/g" | sed "s/wlan2/$WLAN    wlan2/g" | sed "s/usb0/$USB      usb0/g" | sed "s/hassio/$HA      hassio/g" | sed "s/docker0/$DOCKER      docker0/g"
echo ""
echo -e "== SYSTEM"
if [[ -f "/sys/devices/system/cpu/present" ]]; then
	cpu_hwinfo;
fi
if [[ ! -z "$HWMON" ]]; then fan_pwr; fi
echo -e "Online:     " $(lscpu | grep -w "On-line CPU(s) list:" | sed "s/On-line CPU(s) list:/ /g" | sed -e "s/\s\{3,\}//g")
echo -e "Governor:   " $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
echo -e "Memory:     " $(free -h | sed 's/i//g' | sed 's/Mem://g' | awk '{print $1" "$2}' | sed -n 'n;p')
echo -e "Entropy:    " $(cat /proc/sys/kernel/random/entropy_avail)
echo -e "Uptime:     " $(uptime)
