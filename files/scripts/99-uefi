#!/bin/bash
# UEFI/GRUB post update file management

if [[ -f "/etc/opt/board.txt" ]]; then
	source /etc/opt/board.txt
else
	exit 0
fi

grub_cfg(){
if [[ "$GPT" == "true" ]]; then
	PTYPE="gpt"
else
	PTYPE="msdos"
fi
CBOARD=`echo "$BOARD" | sed -e 's/\(.*\)/\U\1/'`
cat <<EOF > /etc/opt/grub.cfg
set timeout=0
set default=0
menuentry $CBOARD {
	insmod gzio
	insmod part_${PTYPE}
	insmod ext2
	set root=hd0,${PTYPE}1
	echo Loading kernel ...
	linux (hd0,2)/boot/Image root=LABEL=ROOTFS ${CONSOLE} rw rootwait rootfstype=ext4 fsck.repair=yes loglevel=1 ${EXTRA}
	echo Loading ramdisk ...
	initrd (hd0,2)/boot/initrd.gz
}
EOF
}

if [[ -f "/etc/opt/grub.cfg" ]]; then
	:;
else
	grub_cfg > /dev/null 2>&1;
fi

if [[ -d "/boot/efi" ]]; then
	mkdir -p /boot/dtb/
	mkdir -p /boot/efi/EFI/BOOT
	if [[ -e "/boot/dtb/${FAMILY}" ]]; then
		:;
	else
		ln -s /boot/${FAMILY} /boot/dtb;
	fi
	if [[ -f "/boot/efi/EFI/BOOT/BOOTARM.EFI" ]]; then
		rm -f /boot/efi/EFI/BOOT/BOOTARM.BAK;
		mv -f /boot/efi/EFI/BOOT/BOOTARM.EFI /boot/efi/EFI/BOOT/BOOTARM.BAK;
	fi
	if [[ -f "/boot/efi/EFI/BOOT/BOOTAA64.EFI" ]]; then
		rm -f /boot/efi/EFI/BOOT/BOOTAA64.BAK;
		mv -f /boot/efi/EFI/BOOT/BOOTAA64.EFI /boot/efi/EFI/BOOT/BOOTAA64.BAK;
	fi
	if [[ "$ARCH" == "arm" ]]; then
		grub-mkstandalone -O arm-efi -o /boot/efi/EFI/BOOT/BOOTARM.EFI "/boot/grub/grub.cfg=/etc/opt/grub.cfg";
	fi
	if [[ "$ARCH" == "arm64" ]]; then
		grub-mkstandalone -O arm64-efi -o /boot/efi/EFI/BOOT/BOOTAA64.EFI "/boot/grub/grub.cfg=/etc/opt/grub.cfg";
	fi
fi
