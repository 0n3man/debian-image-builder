#!/bin/bash
# DEBIAN IMAGE BUILDER: SYSTEM MENU INTERFACE
# Description: SYSTEM MENU INTERFACE
# Destination: /usr/local/bin/menu-config
if [[ -f "/etc/opt/board.txt" ]]; then
	source /etc/opt/board.txt;
else
	export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray';
	whiptail --msgbox "    Your board is not supported." 0 0;
	exit 0
fi

# functions
supported_list(){
if [[ "$BOARD" == "bananapim5" ]]; then
	BOARD_PN="Banana Pi M5";
	supported_mixer=1;
fi
if [[ "$BOARD" == "odroidc4" ]]; then
	BOARD_PN="Odroid C4";
	supported_mixer=1;
fi
if [[ "$BOARD" == "odroidhc4" ]]; then
	BOARD_PN="Odroid HC4";
	supported_mixer=1;
fi
if [[ "$BOARD" == "odroidn2" ]]; then
	BOARD_PN="Odroid N2";
	supported_oc=1;
	supported_mixer=1;
	fan_ctrl=1;
fi
if [[ "$BOARD" == "odroidn2plus" ]]; then
	BOARD_PN="Odroid N2+";
	supported_oc=1;
	supported_mixer=1;
	fan_ctrl=1;
fi
if [[ "$BOARD" == "odroidxu4" ]]; then
	BOARD_PN="Odroid XU4";
	supported_oc=0;
	supported_mixer=0;
	fan_ctrl=1;
fi
if [[ "$BOARD" == "radxazero" ]]; then
	BOARD_PN="Radxa Zero";
	supported_oc=1;
	supported_mixer=1;
fi
if [[ "$BOARD" == "nanopc" ]]; then
	BOARD_PN="NanoPC-T4";
	supported_oc=1;
fi
if [[ "$BOARD" == "rockpro64" ]]; then
	BOARD_PN="RockPRO64";
	supported_oc=1;
fi
}

amlogic_audio(){
if [ $supported_mixer -eq 1 ] > /dev/null 2>&1; then
	echo "";
	echo "Running audio setup ...";
	sleep 1s;
	sudo amixer sset 'FRDDR_A SINK 1 SEL' 'OUT 1';
	sudo amixer sset 'FRDDR_A SRC 1 EN' 'on';
	sudo amixer sset 'TDMOUT_B SRC SEL' 'IN 0';
	sudo amixer sset 'TOHDMITX I2S SRC' 'I2S B';
	sudo amixer sset 'TOHDMITX' 'on';
	sudo amixer sset 'FRDDR_B SINK 1 SEL' 'OUT 2';
	sudo amixer sset 'FRDDR_B SRC 1 EN' 'on';
	sudo amixer sset 'FRDDR_C SINK 1 SEL' 'OUT 3';
	sudo amixer sset 'FRDDR_C SRC 1 EN' 'on';
	sudo alsactl store;
	echo "Done.";
	echo "";
	read -p "Press enter to continue.";
else
	export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray';
	whiptail --msgbox "    Your board is not supported." 0 0;
fi
}

overclock(){
echo "overclock=1" | sudo tee /etc/opt/overclock.txt
sudo service tweaks restart
}

overclocking(){
if [ $supported_oc -eq 1 ] > /dev/null 2>&1; then
	if (whiptail --backtitle "Board: $BOARD_PN" --title "$BOARD_PN" --yesno "   Overclock?" 0 0); then
		echo ""
		echo -e "Overclocking: $BOARD_PN ";
		echo "";
		echo -en "Running service: "
		overclock > /dev/null 2>&1;
		sleep 1s;
		echo -e "[done]";
		echo "";
		echo -e "Cores:" $(sudo cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq);
		echo "";
		read -p "You may need to reboot for it to take effect";
		clear -x
	fi
else
	whiptail --msgbox "    Your board is not supported." 0 0;
fi
}

change_password(){
while true; do
	export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray';
	PASSWD1=$(whiptail --backtitle "Menu Interface: User Password" --title "User: $USER" --passwordbox "Enter new password" --nocancel 8 78 3>&1 1>&2 2>&3)
	PASSWD2=$(whiptail --backtitle "Menu Interface: User Password" --title "User: $USER" --passwordbox "Enter new password (again)" --nocancel 8 78 3>&1 1>&2 2>&3)
	if [ "$PASSWD1" = "$PASSWD2" ]; then
		PASSWORD="${PASSWD1}";
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		if (whiptail --backtitle "Menu Interface: User Password: Confirm" --title "Confirm" --yesno "    Set the new password?" 0 0); then
			echo "$PASSWORD" | sed 's/.*/\0\n\0/' | sudo passwd -q $USER 2> /dev/null;
			whiptail --backtitle "Menu Interface: User Password: Confirmation" --title "Confirmation" --msgbox "    Password changed successfully." 0 0;
		else
			whiptail --title "Cancelled" --msgbox "    Hit enter to return to menu." 0 0;
		fi
	else
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray';
		whiptail --backtitle "" --msgbox "    Passwords don't match? Try again." 0 0;
		continue;
	fi
	break
	clear -x
done
}

change_hostname(){
CURRENT=`hostname`
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
NEWHOST=$(whiptail --backtitle "Menu Interface: Hostname" --title "Current: $CURRENT" --inputbox "Enter new hostname" --nocancel 8 78 3>&1 1>&2 2>&3)
HOSTNAME="${NEWHOST}"
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
if (whiptail --backtitle "Hostname: Confirm" --title "Confirm" --yesno "    Apply new hostname? ${HOSTNAME}" 0 0); then
	sudo sh -c "echo '$HOSTNAME' > /etc/hostname";
	sudo sed -i "2s/.*/127.0.1.1	$HOSTNAME/" /etc/hosts
	if [[ `grep -w "Devuan" "/etc/os-release"` ]]; then
		sudo service hostname.sh --full-restart;
		sudo service avahi-daemon restart;
	else
		sudo hostnamectl set-hostname $HOSTNAME;
		sudo systemctl restart avahi-daemon;
	fi
	whiptail --backtitle "Hostname: Confirmation" --title "Confirmation" --msgbox "    ${HOSTNAME} applied successfully." 0 0;
else
	whiptail --title "Cancelled" --msgbox "    Hit enter to return to menu." 0 0;
fi
clear -x
}

install_fanctrl(){
if [[ `command -v fan-ctrl` ]]; then
	:;
else
	sudo wget https://raw.githubusercontent.com/pyavitz/scripts/master/fan-ctrl -P /usr/local/bin;
	sudo chmod +x $(command -v fan-ctrl);
fi
}

systemd_fanctrl(){
if [[ -f "/etc/systemd/system/odroid-fan-ctrl.service" ]]; then
	:;
else
	sudo tee /etc/systemd/system/odroid-fan-ctrl.service <<EOF
[Unit]
Description=Odroid Fan Control
ConditionPathExists=/usr/local/bin/fan-ctrl

[Service]
ExecStart=/usr/local/bin/fan-ctrl -r &>/dev/null
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
	sudo systemctl enable odroid-fan-ctrl;
fi
}

sysvinit_fanctrl(){
if [[ -f "/etc/init.d/fan-ctrl" ]]; then
	:;
else
	sudo wget -cq https://raw.githubusercontent.com/pyavitz/scripts/master/fan-ctrl.init -P /etc/init.d -O /etc/init.d/fan-ctrl;
	sudo chmod +x /etc/init.d/fan-ctrl;
	sudo update-rc.d fan-ctrl defaults 2;
fi
}

HA_NOTES="The following install has been tested on the Odroid N2+ and Raspberry Pi 4B. \
I do not use audio out of my smart home controller, so I have not vailidated that \
the HA audio container works correctly. Other than that, this will give you a good \
platform for HA. If you use this install on the Raspberry Pi, I'd recommend using an \
"A1" SDCARD. On the Odroid N2+ I recommend using an eMMC. The OS is arm64, which matters \
when the final HA install script runs and you are asked to select the platform."

homeAssistant(){
clear -x
echo "Installing Home Assistant ..."
set -x
if [[ "$FAMILY" == "amlogic" ]]; then
	#Make sure sound is enabled on N2+
	sudo amixer sset 'FRDDR_A SINK 1 SEL' 'OUT 1'
	sudo amixer sset 'FRDDR_A SRC 1 EN' 'on'
	sudo amixer sset 'TDMOUT_B SRC SEL' 'IN 0'
	sudo amixer sset 'TOHDMITX I2S SRC' 'I2S B'
	sudo amixer sset 'TOHDMITX' 'on'
	sudo amixer sset 'FRDDR_B SINK 1 SEL' 'OUT 2'
	sudo amixer sset 'FRDDR_B SRC 1 EN' 'on'
	sudo amixer sset 'FRDDR_C SINK 1 SEL' 'OUT 3'
	sudo amixer sset 'FRDDR_C SRC 1 EN' 'on'
	sudo alsactl store
fi

# install docker
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
 "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]\
 https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update; sudo apt-get -y upgrade
sudo apt-get -y install docker-ce docker-ce-cli containerd.io

# install HA required packages
sudo apt -y install jq libglib2.0-bin udisks2
sudo apt -y install network-manager

# install agent required by ha
wget -cq --show-progress \
https://github.com/home-assistant/os-agent/releases/download/1.2.2/os-agent_1.2.2_linux_aarch64.deb
sudo dpkg -i os-agent_1.2.2_linux_aarch64.deb

# enabed service required by HA
sudo systemctl enable systemd-resolved.service
sudo systemctl start systemd-resolved.service

# need to fake grub so HA will install
sudo touch /etc/default/grub
echo '#!/bin/bash' | sudo tee /usr/bin/update-grub
echo 'echo got it'  |sudo tee -a /usr/bin/update-grub
sudo chmod 755 /usr/bin/update-grub

# enable use of GPIO pins
sudo apt install -y gpiod python3-libgpiod
echo 'KERNEL=="gpiochip0", MODE="0666"' |sudo tee -a /etc/udev/rules.d/99-perm.rules 
echo 'KERNEL=="gpiochip1", MODE="0666"' |sudo tee -a /etc/udev/rules.d/99-perm.rules 

# install tools useful for sensor scripts that communicate with HA mosquitto broker
sudo apt -y install netcat mosquitto-clients

# install tools that allow for using usb nic for backup communication path
sudo apt -y install networkd-dispatcher ifmetric

# remove avahi-daemon as it's not required
sudo apt -y remove --purge avahi-daemon

# add some kernel arguments, some that are required, some that look to make system more stable
if [ -f /boot/extlinux/extlinux.conf ]; then
	sudo sed -i '/append / s/$/ systemd.unified_cgroup_hierarchy=false systemd.legacy_systemd_cgroup_controller=false usbcore.autosuspend=-1 usbcore.autosuspend=-1 clk_ignore_unused  cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory apparmor=1 security=apparmor/' /boot/extlinux/extlinux.conf;
fi

# grab the HA supervisor package which will install HA
wget -cq --show-progress https://github.com/home-assistant/supervised-installer/releases/latest/download/homeassistant-supervised.deb
sudo dpkg -i homeassistant-supervised.deb

# clean
sleep 2s
if [ -f os-agent_1.2.2_linux_aarch64.deb ]; then rm -f os-agent_1.2.2_linux_aarch64.deb; fi
if [ -f homeassistant-supervised.deb ]; then rm -f homeassistant-supervised.deb; fi

# finish
echo ""
read -p "Press enter to continue."
}

# main menu
while [ 1 ]
do
CHOICE=$(
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
whiptail --backtitle "Menu Interface: System Settings" --title "System Menu Config" --menu "" --nocancel 0 25 0 \
	"W)" "Wireless          Configure wireless network interface" \
	"" "" \
	"1)" "Password          Change the default password" \
	"2)" "Hostname          Change the default hostname" \
	"3)" "Keyboard          Change keyboard layout" \
	"4)" "Locales           Change language settings" \
	"5)" "Timezone          Change regional settings" \
	"" "" \
	"6)" "Governor          Dynamic frequency scaling" \
	"7)" "Overclock         CPU operating speed" \
	"" "" \
	"8)" "Software          Third-party software installers" \
	"9)" "Miscellaneous     System settings" \
	"" "" \
	"U)" "Update            Menu interface configuration tool" \
	"Q)" "Quit .." 3>&2 2>&1 1>&3
)

case $CHOICE in
	"W)")
		clear -x
		if [[ `command -v nmtui` ]]; then
			sudo nmtui;
		else
			swh -m;
		fi
		;;
	"")
		;;
	"1)")
		change_password
		;;
	"2)")
		change_hostname
		;;
	"3)")
		clear -x
		sudo dpkg-reconfigure keyboard-configuration
		;;
	"4)")
		clear -x
		sudo dpkg-reconfigure locales
		;;
	"5)")
		clear -x
		sudo dpkg-reconfigure tzdata
		;;
	"")
		;;
	"6)")
		governor -m
		;;
	"7)")
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		supported_list
		overclocking
		;;
	"")
		;;
	"8)")
		while [ 1 ]
		do
		SOFTWARE=$(
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		whiptail --backtitle "Third-party: Applications" --title "Install" --menu "" --nocancel 0 0 0 \
			"HA)" "Home Assistant           Home automation software" \
			"E)" "Exit .." 3>&2 2>&1 1>&3
		)
		case $SOFTWARE in
			"HA)")
				export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
				if (whiptail --backtitle "Third-party: Home Assistant" --title "Install" --yesno "$HA_NOTES" 0 0); then
					homeAssistant;
				else
					whiptail --msgbox "    Hit enter to return to menu." 0 0;
				fi
				;;
			"E)")
				clear -x
				break
				;;
			esac
		done
		;;
	"9)")
		while [ 1 ]
		do
		MISC=$(
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		whiptail --backtitle "Miscellaneous Options" --title "Miscellaneous" --menu "" --nocancel 0 0 0 \
			"AA)" "Amlogic Audio            Amlogic audio mixer settings" \
			"FC)" "Fan Control              Set Odroid trip point" \
			"ST)" "Setup Tasksel            Tool for selecting tasks for installation" \
			"RZ)" "Radxa Zero Rev 1.5       Wifi (cap SDIO speed)" \
			"E)" "Exit .." 3>&2 2>&1 1>&3
		)
		case $MISC in
			"AA)")
				clear -x
				supported_list
				amlogic_audio
				;;
			"FC)")
				if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
					clear -x
					supported_list
					if [ $fan_ctrl -eq 1 ] > /dev/null 2>&1; then
						if [[ `grep -w "ID=debian" "/etc/os-release"` ]]; then
							systemd_fanctrl > /dev/null 2>&1;
							install_fanctrl > /dev/null 2>&1;
							fan-ctrl -m;
						fi
						if [[ `grep -w "ID=devuan" "/etc/os-release"` ]]; then
							sysvinit_fanctrl > /dev/null 2>&1;
							install_fanctrl > /dev/null 2>&1;
							fan-ctrl -m;
						fi
						if [[ `grep -w "ID=ubuntu" "/etc/os-release"` ]]; then
							systemd_fanctrl > /dev/null 2>&1;
							install_fanctrl > /dev/null 2>&1;
							fan-ctrl -m;
						fi
					else
						export NEWT_COLORS='root=,black'
						whiptail --msgbox "    Your board is not supported." 0 0;
					fi
				else
					export NEWT_COLORS='root=,black'
					whiptail --msgbox "    This requires a internet connection." 0 0;
				fi
				;;
			"ST)")
				if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
					clear -x
					echo -e "Running setup ...";
					if [[ `command -v tasksel` ]]; then
						:;
					else
						sudo apt update;
						sudo apt install -y tasksel;
					fi
					sleep 1s;
					sudo apt-get update;
					sudo apt-get install --reinstall debconf;
					sudo dpkg-reconfigure tasksel;
					echo "";
					echo -e "To use, run 'sudo tasksel --new-install' in a terminal";
					echo ""
					read -p "Press enter to continue.";
					clear -x;
				else
					export NEWT_COLORS='root=,black'
					whiptail --msgbox "    This requires a internet connection." 0 0;
				fi
				;;
			"RZ)")
				if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
					clear -x
					if [[ "$BOARD" == "radxazero" ]]; then
						if [[ `command -v dtc` ]]; then
							:;
						else
							sudo apt update;
							sudo apt install -y u-boot-tools;
						fi
						if [ -f /etc/initramfs/post-update.d/99-sdio-speed ]; then
							sudo rm -f /etc/initramfs/post-update.d/99-sdio-speed;
						fi
						echo -e "Running setup ...";
						sleep 1s;
						GHURL="https://raw.githubusercontent.com/pyavitz/debian-image-builder/feature/files/boot"
						sudo mkdir -p /etc/initramfs/post-update.d/
						sudo wget -cq $GHURL/99-sdio-speed -P /etc/initramfs/post-update.d/
						if [ -f /etc/initramfs/post-update.d/99-sdio-speed ]; then
							sudo chmod +x /etc/initramfs/post-update.d/99-sdio-speed;
							sudo chown root:root /etc/initramfs/post-update.d/99-sdio-speed;
							sudo /etc/initramfs/post-update.d/99-sdio-speed;
						fi
						echo ""
						read -p "Press enter to continue.";
						clear -x;
					else
						export NEWT_COLORS='root=,black'
						whiptail --msgbox "    Your board is not supported." 0 0;
					fi
				else
					export NEWT_COLORS='root=,black'
					whiptail --msgbox "    This requires a internet connection." 0 0;
				fi
				;;
			"E)")
				clear -x
				break
				;;
			esac
		done
		;;
	"")
		;;
	"U)")
		MCU=`command -v menu-config-update`
		MENUDIR="/usr/local/bin/"
		if [ -f $MCU ]; then
			sudo mv -f $MCU $MCU.orig > /dev/null 2>&1;
		fi
		sudo wget -cq https://raw.githubusercontent.com/pyavitz/debian-image-builder/feature/files/scripts/menu-config-update -P $MENUDIR
		sleep 1s
		sudo chmod +x $(command -v menu-config-update)
		if [ -f $MCU ]; then
			sudo rm -f $MCU.orig;
		else
			sudo mv -f $MCU.orig $MCU > /dev/null 2>&1;
		fi
		menu-config-update
		exec menu-config
		exit 0
		;;
	"Q)")
		clear -x
		exit 0
		;;
	esac
done
