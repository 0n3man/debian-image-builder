#!/bin/bash
# DEBIAN IMAGE BUILDER: SYSTEM MENU INTERFACE
# Description: SYSTEM MENU INTERFACE
# Destination: /usr/local/bin/menu-config
DISTRO=`cat /etc/os-release | grep -w NAME | sed 's/NAME=//g' | sed 's/"//g' | sed 's/ GNU\/Linux//g'`
if [[ -f "/etc/opt/board.txt" ]]; then
	. /etc/opt/board.txt
else
	export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
	whiptail --msgbox "    Your board is not supported." 0 0
	exit 0
fi

# developer debug switch
VERBOSITY="0"

# functions
supported_list(){
DISCOVER=`echo $BOARD`
if [[ "$DISCOVER" == "$BOARD" ]]; then
	# overclocking
	if [[ "$FAMILY_EXT" == "bananapi" || "$BOARD" == "cubietruck" || "$BOARD" == "cuboxi" || "$FAMILY_EXT" == "odroid"  || "$FAMILY_EXT" == "rk3399" || "$FAMILY_EXT" == "rk3328" || "$BOARD" == "tinker" || "$BOARD" == "radxazero" ]]; then
		supported_oc=1
	else
		supported_oc=0
	fi
	# amlogic g12/sm1 series hdmi audio
	if [[ "$FAMILY_EXT" == "bananapi" || "$FAMILY_EXT" == "odroid" || "$BOARD" == "radxazero" || "$BOARD" == "x96air" ]]; then
		hdmi_audio=1
	else
		hdmi_audio=0
	fi
	# amlogic g12/sm1 series analog audio
	if [[ "$BOARD" == "odroidn2" || "$BOARD" == "odroidn2plus" || "$BOARD" == "bananapim5" || "$BOARD" == "x96air" ]]; then
		jack_audio=1
	else
		jack_audio=0
	fi
	# fan control
	if [[ "$BOARD" == "nanopct4" || "$BOARD" == "odroidxu4" || "$BOARD" == "odroidn2" || "$BOARD" == "odroidn2l" || "$BOARD" == "odroidn2plus" ]]; then
		fan_ctrl=1
	else
		fan_ctrl=0
	fi
	# home assistant
	if [[ "$FAMILY_EXT" == "bananapi" || "$FAMILY_EXT" == "odroid" || "$BOARD" == "raspi3" || "$BOARD" == "raspi4" ]]; then
		supported_ha=1
	else
		supported_ha=0
	fi
fi
}

amlogic_hdmi(){
sudo amixer -c 0 set 'TOHDMITX' 'on'
sudo amixer -c 0 set 'TOHDMITX I2S SRC' 'I2S B'
sudo amixer -c 0 set 'TDMOUT_B SRC SEL' 'IN 0'
sudo amixer -c 0 set 'FRDDR_A SRC 2 EN' 'on'
sudo amixer -c 0 set 'FRDDR_A SINK 1 SEL' 'OUT 0'
sudo amixer -c 0 set 'FRDDR_A SINK 2 SEL' 'OUT 1'
sudo amixer -c 0 set 'FRDDR_A SINK 3 SEL' 'OUT 2'
if [[ "$BOARD" == "odroidn2" || "$BOARD" == "odroidn2l" || "$BOARD" == "odroidn2plus" || "$BOARD" == "bananapim5" || "$BOARD" == "x96air" ]]; then
	sudo amixer -c 0 set 'ACODEC' '85%'
fi
# Save
sudo alsactl store
if [ $VERBOSITY -eq 1 ]; then
	echo ""
	read -p "Press enter to continue."
fi
}

amlogic_analog(){
sudo amixer -c 0 set 'TOACODEC OUT EN' 'on'
sudo amixer -c 0 set 'TOACODEC SRC' 'I2S B'
sudo amixer -c 0 set 'TDMOUT_B SRC SEL' 'IN 0'
sudo amixer -c 0 set 'FRDDR_A SRC 2 EN' 'on'
sudo amixer -c 0 set 'FRDDR_A SINK 1 SEL' 'OUT 0'
sudo amixer -c 0 set 'FRDDR_A SINK 2 SEL' 'OUT 1'
sudo amixer -c 0 set 'FRDDR_A SINK 3 SEL' 'OUT 2'
sudo amixer -c 0 set 'ACODEC' '85%'
# Save
sudo alsactl store
if [ $VERBOSITY -eq 1 ]; then
	echo ""
	read -p "Press enter to continue."
fi
}

amlogic_audio(){
while [ 1 ]
do
SOUND_MIXER=$(
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
whiptail --backtitle "AMLOGIC: Audio Output" --title "Choose" --menu "" --nocancel 0 0 0 \
	"1)" "HDMI                      HDMI Audio" \
	"2)" "Analog                    3.5mm Jack Audio" \
	"E)" "Exit .." 3>&2 2>&1 1>&3
)
case $SOUND_MIXER in
	"1)")
		supported_list
		if [ $hdmi_audio -eq 1 ]; then
			export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
			if (whiptail --backtitle "HDMI AUDIO" --title "Confirm" --yesno "    Apply HDMI Audio Settings?" 0 0); then
				amlogic_hdmi
				whiptail --backtitle "HDMI AUDIO" --title "Confirmation" --msgbox "    Applied successfully." 0 0;
			else
				whiptail --title "Cancelled" --msgbox "    Hit enter to return to menu." 0 0;
			fi
		else
			export NEWT_COLORS='root=,black'
			whiptail --msgbox "    Your board is not supported." 0 0
		fi
		;;
	"2)")
		supported_list
		if [ $jack_audio -eq 1 ]; then
			export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
			if (whiptail --backtitle "3.5MM JACK AUDIO" --title "Confirm" --yesno "    Apply Analog Audio Settings?" 0 0); then
				amlogic_analog
				whiptail --backtitle "3.5MM JACK AUDIO" --title "Confirmation" --msgbox "    Applied successfully." 0 0;
			else
				whiptail --title "Cancelled" --msgbox "    Hit enter to return to menu." 0 0;
			fi
		else
			export NEWT_COLORS='root=,black'
			whiptail --msgbox "    Your board is not supported." 0 0
		fi
		;;
	"E)")
		clear -x
		break
		;;
	esac
done
}

overclock(){
echo "overclock=1" | sudo tee /etc/opt/overclock.txt
sudo service tweaks restart
}

overclocking(){
if [ $supported_oc -eq 1 ] > /dev/null 2>&1; then
	if (whiptail --backtitle "Board: $DEFAULT_MOTD" --title "$DEFAULT_MOTD" --yesno "   Overclock?" 0 0); then
		echo ""
		echo -e "Overclocking: $DEFAULT_MOTD ";
		echo "";
		echo -en "Running service: "
		overclock > /dev/null 2>&1;
		sleep 1s;
		echo -e "[done]";
		echo "";
		echo -e "Cores:" $(sudo cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq);
		echo "";
		read -p "You may need to reboot for it to take effect";
		clear -x
	fi
else
	whiptail --msgbox "    Your board is not supported." 0 0;
fi
}

change_password(){
while true; do
	export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray';
	PASSWD1=$(whiptail --backtitle "Menu Interface: User Password" --title "User: $USER" --passwordbox "Enter new password" --nocancel 8 78 3>&1 1>&2 2>&3)
	PASSWD2=$(whiptail --backtitle "Menu Interface: User Password" --title "User: $USER" --passwordbox "Enter new password (again)" --nocancel 8 78 3>&1 1>&2 2>&3)
	if [ "$PASSWD1" = "$PASSWD2" ]; then
		PASSWORD="${PASSWD1}";
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		if (whiptail --backtitle "Menu Interface: User Password: Confirm" --title "Confirm" --yesno "    Set the new password?" 0 0); then
			echo "$PASSWORD" | sed 's/.*/\0\n\0/' | sudo passwd -q $USER 2> /dev/null;
			whiptail --backtitle "Menu Interface: User Password: Confirmation" --title "Confirmation" --msgbox "    Password changed successfully." 0 0;
		else
			whiptail --title "Cancelled" --msgbox "    Hit enter to return to menu." 0 0;
		fi
	else
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray';
		whiptail --backtitle "" --msgbox "    Passwords don't match? Try again." 0 0;
		continue;
	fi
	break
	clear -x
done
}

change_sudo(){
if [[ "$SUDOERS" == "true" ]]; then STATUS="enabled"; else STATUS="disabled"; fi
CONFIRM=`echo "${STATUS}" | sed -e "s/\b\(.\)/\u\1/g"`
US_QUESTION=`echo "${STATUS}" | sed -e "s/\b\(.\)/\u\1/g" | sed 's/d//g'`
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
if (whiptail --backtitle "Sudo: $US_QUESTION Security" --title "Confirm" --yesno "    $US_QUESTION require password?" 0 0); then
	if [[ $SUDOERS == "true" ]]; then
		sudo rm -f /etc/sudoers.d/010_${USER}-nopasswd
	else
		echo "$USER ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/010_${USER}-nopasswd
	fi
	whiptail --backtitle "Sudo: $CONFIRM Security" --title "Confirmation" --msgbox "    $CONFIRM successfully." 0 0;
else
	whiptail --title "Cancelled" --msgbox "    Hit enter to return to menu." 0 0;
fi
}

user_security(){
USERNAME=`echo "${USER}" | sed -e "s/\b\(.\)/\u\1/g"`
if [[ -f "/etc/sudoers.d/010_$USER-nopasswd" ]]; then
	SUDOERS="true"
	STATUS="disabled"
else
	SUDOERS="false"
	STATUS="enabled"
fi
while [ 1 ]
do
SECURITY=$(
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
whiptail --backtitle "Security Settings: $USERNAME" --title "Choose" --menu "" --nocancel 0 0 0 \
	"1)" "Password          Change user password" \
	"2)" "Sudo              Require password (${STATUS})" \
	"E)" "Exit .." 3>&2 2>&1 1>&3
)
case $SECURITY in
	"1)")
		change_password
		;;
	"2)")
		change_sudo
		break
		;;
	"E)")
		clear -x
		break
		;;
	esac
done
}

change_hostname(){
CURRENT=`hostname`
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
NEWHOST=$(whiptail --backtitle "Menu Interface: Hostname" --title "Current: $CURRENT" --inputbox "Enter new hostname" --nocancel 8 78 3>&1 1>&2 2>&3)
HOSTNAME="${NEWHOST}"
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
if (whiptail --backtitle "Hostname: Confirm" --title "Confirm" --yesno "    Apply new hostname? ${HOSTNAME}" 0 0); then
	sudo sh -c "echo '$HOSTNAME' > /etc/hostname";
	sudo sed -i "2s/.*/127.0.1.1	$HOSTNAME/" /etc/hosts
	if [[ `grep -w "Devuan" "/etc/os-release"` ]]; then
		sudo service hostname.sh --full-restart;
		sudo service avahi-daemon restart;
	else
		sudo hostnamectl set-hostname $HOSTNAME;
		sudo systemctl restart avahi-daemon;
	fi
	whiptail --backtitle "Hostname: Confirmation" --title "Confirmation" --msgbox "    ${HOSTNAME} applied successfully." 0 0;
else
	whiptail --title "Cancelled" --msgbox "    Hit enter to return to menu." 0 0;
fi
clear -x
}

install_fanctrl(){
if [[ `command -v fan-ctrl` ]]; then
	:;
else
	sudo wget https://raw.githubusercontent.com/pyavitz/scripts/master/fan-ctrl -P /usr/local/bin;
	sudo chmod +x $(command -v fan-ctrl);
fi
}

systemd_fanctrl(){
if [[ -f "/etc/systemd/system/fan-ctrl.service" ]]; then
	:;
else
	sudo tee /etc/systemd/system/fan-ctrl.service <<EOF
[Unit]
Description=Fan Control
ConditionPathExists=/usr/local/bin/fan-ctrl

[Service]
ExecStart=/usr/local/bin/fan-ctrl -r &>/dev/null
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
	sudo systemctl enable fan-ctrl;
fi
}

sysvinit_fanctrl(){
if [[ -f "/etc/init.d/fan-ctrl" ]]; then
	:;
else
	sudo wget -cq https://raw.githubusercontent.com/pyavitz/scripts/master/fan-ctrl.init -P /etc/init.d -O /etc/init.d/fan-ctrl;
	sudo chmod +x /etc/init.d/fan-ctrl;
	sudo update-rc.d fan-ctrl defaults 2;
fi
}

HA_NOTES="The following install has been tested on the Odroid N2+ and Raspberry Pi 4B. \
An individual also reported success on Banana Pi M5 by selecting odroid N2 in response \
to the actual HA supervisor install script. I do not use audio out of my smart home \
controller, so I have not vailidated that the HA audio container works correctly. Other \
than that, this will give you a good platform for HA. If you use this install on the \
Raspberry Pi, I'd recommend using an "A1" SDCARD. On the Odroid N2+ I recommend \
using an eMMC. The OS is arm64, which matters when the final HA install script \
runs and you are asked to select the platform."

homeAssistant(){
clear -x
echo "Installing Home Assistant ..."

if [ $VERBOSITY -eq 1 ]; then
	set -x
fi

if [ $hdmi_audio -eq 1 ]; then
	amlogic_hdmi
fi

#if [[ "$FAMILY" == "amlogic" ]]; then
#	# Make sure sound is enabled on N2+
#	sudo amixer sset 'FRDDR_A SINK 1 SEL' 'OUT 1'
#	sudo amixer sset 'FRDDR_A SRC 1 EN' 'on'
#	sudo amixer sset 'TDMOUT_B SRC SEL' 'IN 0'
#	sudo amixer sset 'TOHDMITX I2S SRC' 'I2S B'
#	sudo amixer sset 'TOHDMITX' 'on'
#	sudo amixer sset 'FRDDR_B SINK 1 SEL' 'OUT 2'
#	sudo amixer sset 'FRDDR_B SRC 1 EN' 'on'
#	sudo amixer sset 'FRDDR_C SINK 1 SEL' 'OUT 3'
#	sudo amixer sset 'FRDDR_C SRC 1 EN' 'on'
#	sudo alsactl store
#fi

# install docker
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
 "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]\
 https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update; sudo apt-get -y upgrade
sudo apt-get -y install docker-ce docker-ce-cli containerd.io

# install HA required packages
sudo apt -y install jq libglib2.0-bin udisks2 network-manager network-manager-config-connectivity-debian

# install agent required by ha
wget -cq --show-progress \
https://github.com/home-assistant/os-agent/releases/download/1.2.2/os-agent_1.2.2_linux_aarch64.deb
sudo dpkg -i os-agent_1.2.2_linux_aarch64.deb

# enabed service required by HA
sudo systemctl enable systemd-resolved.service
sudo systemctl start systemd-resolved.service

# need to fake grub so HA will install
sudo touch /etc/default/grub
echo '#!/bin/bash' | sudo tee /usr/bin/update-grub
echo 'echo got it' | sudo tee -a /usr/bin/update-grub
sudo chmod 755 /usr/bin/update-grub

# enable use of GPIO pins
sudo apt install -y gpiod python3-libgpiod
echo 'KERNEL=="gpiochip0", MODE="0666"' | sudo tee -a /etc/udev/rules.d/99-perm.rules 
echo 'KERNEL=="gpiochip1", MODE="0666"' | sudo tee -a /etc/udev/rules.d/99-perm.rules 

# install tools useful for sensor scripts that communicate with HA mosquitto broker
sudo apt -y install netcat mosquitto-clients

# install tools that allow for using usb nic for backup communication path
sudo apt -y install networkd-dispatcher ifmetric

# remove avahi-daemon as it's not required
sudo apt -y remove --purge avahi-daemon

# add some kernel arguments, some that are required, some that look to make system more stable
if [[ -f "/boot/extlinux/extlinux.conf" ]]; then
	sudo sed -i '/append / s/$/ systemd.unified_cgroup_hierarchy=false systemd.legacy_systemd_cgroup_controller=false usbcore.autosuspend=-1 usbcore.autosuspend=-1 clk_ignore_unused cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory apparmor=1 security=apparmor/' /boot/extlinux/extlinux.conf;
fi
if [[ -f "/boot/${FAMILY}/extlinux/extlinux.conf" ]]; then
	sudo sed -i '/append / s/$/ systemd.unified_cgroup_hierarchy=false systemd.legacy_systemd_cgroup_controller=false usbcore.autosuspend=-1 usbcore.autosuspend=-1 clk_ignore_unused cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory apparmor=1 security=apparmor/' /boot/${FAMILY}/extlinux/extlinux.conf;
fi

# grab the HA supervisor package which will install HA
sudo apt install -y systemd-journal-remote
wget -cq --show-progress https://github.com/home-assistant/supervised-installer/releases/latest/download/homeassistant-supervised.deb
sudo dpkg -i homeassistant-supervised.deb

# clean
sleep 2s
sudo apt autoremove -y
if [ -f os-agent_1.2.2_linux_aarch64.deb ]; then rm -f os-agent_1.2.2_linux_aarch64.deb; fi
if [ -f homeassistant-supervised.deb ]; then rm -f homeassistant-supervised.deb; fi

# finish
echo ""
if [[ "$PETITBOOT" == "true" ]]; then
	echo -e "You need to add the following kernel params to: /boot/config.ini"
	echo -e ""
	echo -e "systemd.unified_cgroup_hierarchy=false systemd.legacy_systemd_cgroup_controller=false usbcore.autosuspend=-1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory apparmor=1 security=apparmor"
	echo -e ""
fi
read -p "Press enter to continue."
}

tinker_rtc_ds1307(){
if [[ `apt list fake-hwclock | grep "[installed]"` ]] &> /dev/null; then
	if [[ "$DISTRO" == "Debian" || "$DISTRO" == "Kali" || "$DISTRO" == "Ubuntu" || "$DISTRO" == "Raspbian" ]]; then
		sudo systemctl stop fake-hwclock
		sudo systemctl disable fake-hwclock
	fi
	if [[ "$DISTRO" == "Devuan" ]]; then
		sudo service fake-hwclock stop
		sudo update-rc.d -f fake-hwclock remove
	fi
fi
if [[ `grep -w "rtc-ds1307" "/etc/modules"` ]]; then
	if [[ `lsmod | grep -w rtc_ds1307` || `lsmod | grep -w rtc-ds1307` ]]; then
		:;
	else
		sudo modprobe rtc-ds1307
	fi
else
	echo "rtc-ds1307" | sudo tee -a /etc/modules
	if [[ `lsmod | grep -w rtc_ds1307` || `lsmod | grep -w rtc-ds1307` ]]; then
		:;
	else
		sudo modprobe rtc-ds1307
	fi
fi
if [[ -f "/lib/udev/rules.d/50-udev-default.rules" ]]; then
	sudo sed -i 's/rtc0/rtc1/' /lib/udev/rules.d/50-udev-default.rules
fi
if [[ -f "/lib/udev/rules.d/85-hwclock.rules" ]]; then
	sudo sed -i 's/rtc0/rtc1/' /lib/udev/rules.d/85-hwclock.rules
fi
if [[ -f "/etc/default/hwclock" ]]; then
	sudo sed -i 's/rtc0/rtc1/' /etc/default/hwclock
fi
if [[ -f "/lib/udev/hwclock-set" ]]; then
	sudo sed -i 's/rtc0/rtc1/' /lib/udev/hwclock-set
fi
if [[ -f "/usr/local/sbin/rtc-ds1307" ]]; then
	sudo chmod +x /usr/local/sbin/rtc-ds1307
else
	sudo wget -cq https://raw.githubusercontent.com/pyavitz/debian-image-builder/feature/files/scripts/rtc-ds1307 -P /usr/local/sbin
	sudo chmod +x /usr/local/sbin/rtc-ds1307
fi
if [[ "$DISTRO" == "Debian" || "$DISTRO" == "Kali" || "$DISTRO" == "Ubuntu" || "$DISTRO" == "Raspbian" ]]; then
	if [[ -f "/etc/systemd/system/rtc-ds1307.service" ]]; then
		:;
	else
		sudo tee /etc/systemd/system/rtc-ds1307.service <<EOF
[Unit]
Description=RTC DS1307
Before=cloud-init-local.service
Requires=systemd-modules-load.service
After=systemd-modules-load.service

[Service]
Type=oneshot
ExecStart=/usr/local/sbin/rtc-ds1307

[Install]
WantedBy=multi-user.target
EOF
	fi
fi
if [[ "$DISTRO" == "Devuan" ]]; then
	if [[ -f "/etc/init.d/rtc-ds1307" ]]; then
		:;
	else
		sudo tee /etc/init.d/rtc-ds1307 <<'EOF'
#!/bin/bash
### BEGIN INIT INFO
# Provides: RTC DS1307
# Required-Start: $all
# Required-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 6
# Short-Description: Starts RTC DS1307
# Description:
### END INIT INFO

# chmod +x /etc/init.d/rtc-ds1307
# update-rc.d rtc-ds1307 defaults 5

. /lib/lsb/init-functions

case "$1" in
	start)
	if [ -f /usr/local/sbin/rtc-ds1307 ]; then
		/usr/local/sbin/rtc-ds1307;
	fi
	exit 0
	;;
	*)
	echo "Usage: $0 start" >&2
	exit 3
	;;
esac
EOF
	fi
	if [[ -f "/etc/init.d/rtc-ds1307" ]]; then
		#sudo sed -i 's/# Required-Start:/# Required-Start: $all/g' /etc/init.d/rtc-ds1307
		#sudo sed -i 's/case "" in/case "$1" in/g' /etc/init.d/rtc-ds1307
		sleep .25
		sudo chmod +x /etc/init.d/rtc-ds1307
		sleep .25
		sudo update-rc.d rtc-ds1307 defaults 5
		sudo service rtc-ds1307 start
	fi
	if [[ -f "/etc/init.d/hwclock.sh" ]]; then
		sudo sed -i 's/rtc0/rtc1/g' /etc/init.d/hwclock.sh
		sleep .25
		sudo update-rc.d hwclock.sh defaults S
		sudo service hwclock.sh start
	fi
fi
}

# main menu
while [ 1 ]
do
CHOICE=$(
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
whiptail --backtitle "${DISTRO}: System Settings" --title "Menu Config" --menu "" --nocancel 0 25 0 \
	"W)" "Wireless          Configure wireless network interface" \
	"" "" \
	"1)" "Security          User security management" \
	"2)" "Hostname          Change system hostname" \
	"3)" "Keyboard          Change keyboard layout" \
	"4)" "Locales           Change language settings" \
	"5)" "Timezone          Change regional settings" \
	"" "" \
	"6)" "Governor          Dynamic frequency scaling" \
	"7)" "Overclock         CPU operating speed" \
	"" "" \
	"8)" "Software          Third-party software installers" \
	"9)" "Miscellaneous     System settings" \
	"" "" \
	"U)" "Update            Menu interface configuration tool" \
	"Q)" "Quit .." 3>&2 2>&1 1>&3
)

case $CHOICE in
	"W)")
		clear -x
		if [[ `command -v nmtui` ]]; then
			sudo nmtui
		else
			swh -m
		fi
		;;
	"")
		;;
	"1)")
		user_security
		;;
	"2)")
		change_hostname
		;;
	"3)")
		clear -x
		sudo dpkg-reconfigure keyboard-configuration
		;;
	"4)")
		clear -x
		sudo dpkg-reconfigure locales
		;;
	"5)")
		clear -x
		sudo dpkg-reconfigure tzdata
		;;
	"")
		;;
	"6)")
		governor -m
		;;
	"7)")
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		supported_list
		overclocking
		;;
	"")
		;;
	"8)")
		while [ 1 ]
		do
		SOFTWARE=$(
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		whiptail --backtitle "Third-party: Applications" --title "Install" --menu "" --nocancel 0 0 0 \
			"HA)" "Home Assistant           Home automation software" \
			"E)" "Exit .." 3>&2 2>&1 1>&3
		)
		case $SOFTWARE in
			"HA)")
				export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
				supported_list
				if [[ $supported_ha -ne 1 ]]; then
					whiptail --msgbox "    HA install not currently supported on this platform." 0 0;
				elif (whiptail --backtitle "Third-party: Home Assistant" --title "Install" --yesno "$HA_NOTES" 0 0); then
					homeAssistant
				else
					whiptail --msgbox "    Hit enter to return to menu." 0 0
				fi
				;;
			"E)")
				clear -x
				break
				;;
			esac
		done
		;;
	"9)")
		while [ 1 ]
		do
		MISC=$(
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		whiptail --backtitle "Miscellaneous Options" --title "Miscellaneous" --menu "" --nocancel 0 0 0 \
			"AA)" "Amlogic Audio            Amlogic audio mixer settings" \
			"FC)" "Fan Control              Set trip point" \
			"DC)" "Debconf                  Reconfigure ${DISTRO} configuration system" \
			"RZ)" "Radxa Zero Rev 1.5       Wifi (cap SDIO speed)" \
			"TB)" "Tinkerboard R2.0         Enable DS1307 RTC" \
			"E)" "Exit .." 3>&2 2>&1 1>&3
		)
		case $MISC in
			"AA)")
				clear -x
				supported_list
				amlogic_audio
				;;
			"FC)")
				if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
					clear -x
					supported_list
					if [ $fan_ctrl -eq 1 ] > /dev/null 2>&1; then
						if [[ "$DISTRO" == "Debian" || "$DISTRO" == "Kali" || "$DISTRO" == "Ubuntu" || "$DISTRO" == "Raspbian" ]]; then
							systemd_fanctrl > /dev/null 2>&1
							install_fanctrl > /dev/null 2>&1
							fan-ctrl -m
						fi
						if [[ "$DISTRO" == "Devuan" ]]; then
							sysvinit_fanctrl > /dev/null 2>&1
							install_fanctrl > /dev/null 2>&1
							fan-ctrl -m
						fi
					else
						export NEWT_COLORS='root=,black'
						whiptail --msgbox "    Your board is not supported." 0 0
					fi
				else
					export NEWT_COLORS='root=,black'
					whiptail --msgbox "    This requires a internet connection." 0 0
				fi
				;;
			"DC)")
				if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
					clear -x
					echo -e "Reconfiguring ...";
					if [[ `command -v tasksel` ]]; then
						:;
					else
						sudo apt update
						sudo apt install -y tasksel
					fi
					sleep .75
					sudo apt-get update
					sudo apt-get install --reinstall debconf
					sudo dpkg-reconfigure tasksel
					echo ""
					echo -e "To use tasksel, run 'sudo tasksel --new-install' in a terminal"
					echo ""
					read -p "Press enter to continue."
					clear -x
				else
					export NEWT_COLORS='root=,black'
					whiptail --msgbox "    This requires a internet connection." 0 0
				fi
				;;
			"RZ)")
				if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
					clear -x
					if [[ "$BOARD" == "radxazero" ]]; then
						if [[ `command -v dtc` ]]; then
							:;
						else
							sudo apt update;
							sudo apt install -y u-boot-tools;
						fi
						if [ -f /etc/initramfs/post-update.d/99-sdio-speed ]; then
							sudo rm -f /etc/initramfs/post-update.d/99-sdio-speed;
						fi
						echo -e "Running setup ...";
						sleep 1s;
						GHURL="https://raw.githubusercontent.com/pyavitz/debian-image-builder/feature/files/boot"
						sudo mkdir -p /etc/initramfs/post-update.d/
						sudo wget -cq $GHURL/99-sdio-speed -P /etc/initramfs/post-update.d/
						if [ -f /etc/initramfs/post-update.d/99-sdio-speed ]; then
							sudo chmod +x /etc/initramfs/post-update.d/99-sdio-speed;
							sudo chown root:root /etc/initramfs/post-update.d/99-sdio-speed;
							sudo /etc/initramfs/post-update.d/99-sdio-speed;
						fi
						echo ""
						read -p "Press enter to continue.";
						clear -x;
					else
						export NEWT_COLORS='root=,black'
						whiptail --msgbox "    Your board is not supported." 0 0;
					fi
				else
					export NEWT_COLORS='root=,black'
					whiptail --msgbox "    This requires a internet connection." 0 0;
				fi
				;;
			"TB)")
				if [[ -f "/etc/systemd/system/rtc-ds1307.service" ]] || [[ -f "/etc/init.d/rtc-ds1307" ]]; then
					export NEWT_COLORS='root=,black'
					whiptail --msgbox "    Service already installed." 0 0
					break
				fi
				if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
					if [[ "$BOARD" == "tinker" ]]; then
						tinker_rtc_ds1307
						while true; do
							export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
								if (whiptail --backtitle "Menu Interface: Sync Clock: Confirm" --title "Confirm" --yesno "    Keep System Time and RTC in sync?" 0 0); then
									sudo sed -i 's/SYNC_CLK="false"/SYNC_CLK="true"/g' /usr/local/sbin/rtc-ds1307
									sleep .50
									sudo systemctl enable rtc-ds1307.service
									sudo systemctl start rtc-ds1307.service
									sudo systemctl set-default multi-user.target
									whiptail --backtitle "Menu Interface: Sync Clock: Confirmation" --title "Confirmation" --msgbox "    Enabled." 0 0;
								else
									sleep .50
									sudo systemctl enable rtc-ds1307.service
									sudo systemctl start rtc-ds1307.service
									sudo systemctl set-default multi-user.target
									whiptail --title "Clock Not Synced" --msgbox "    Hit enter to return to menu." 0 0;
								fi
							break
						done
					else
						export NEWT_COLORS='root=,black'
						whiptail --msgbox "    Your board is not supported." 0 0;
					fi
				else
					export NEWT_COLORS='root=,black'
					whiptail --msgbox "    This requires a internet connection." 0 0;
				fi
				;;
			"E)")
				clear -x
				break
				;;
			esac
		done
		;;
	"")
		;;
	"U)")
		MENUDIR="/usr/local/bin/"
		MCU="${MENUDIR}menu-config-update"
		if [[ -f "$MCU" ]]; then
			sudo mv -f $MCU $MCU.orig
		fi
		sudo wget -cq https://raw.githubusercontent.com/pyavitz/debian-image-builder/feature/files/scripts/menu-config-update -P $MENUDIR
		sleep .75
		sudo chmod +x $(command -v menu-config-update)
		if [[ -f "$MCU" ]]; then
			sudo rm -f $MCU.orig
		else
			sudo mv -f $MCU.orig $MCU > /dev/null 2>&1
		fi
		menu-config-update
		exec menu-config
		exit 0
		;;
	"Q)")
		clear -x
		/etc/update-motd.d/00-header
		/etc/update-motd.d/15-brand
		/etc/update-motd.d/20-sysinfo
		echo ""
		exit 0
		;;
	esac
done
