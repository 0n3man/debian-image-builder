#!/bin/bash
# Bind root device activity to Linux kernel LED trigger
# Stop status LED from blinking
# Set R5S eth port LEDs to activity

GREEN_LED="/sys/class/leds/nanopi:green:pwr/trigger"
if [[ -f "$GREEN_LED" ]]; then
	ROOT_DEVICE=`findmnt -v -n -o SOURCE /`
	ROOT_DEVICE=${ROOT_DEVICE/\/dev\//}
	ROOT_DEVICE=${ROOT_DEVICE/mmcblk/mmc}
	ROOT_DEVICE=${ROOT_DEVICE/p[0-9]/}
	echo -n "$ROOT_DEVICE" > $GREEN_LED
fi

RED_LED="/sys/class/leds/nanopi:red:status/brightness"
if [[ -f "$RED_LED" ]]; then
	echo "0" > $RED_LED
fi

BLUE_LED="/sys/class/leds/nanopi:blue:status/brightness"
if [[ -f "$BLUE_LED" ]]; then
	echo "0" > $BLUE_LED
fi

# NanoPi R5S eth ports
WAN_LED="/sys/class/leds/green:wan/trigger"
LAN1_LED="/sys/class/leds/green:lan1/trigger"
LAN2_LED="/sys/class/leds/green:lan2/trigger"
if [[ -f "$WAN_LED" ]]; then
	echo "default-on" > $WAN_LED
	sleep .75
	echo "netdev" > $WAN_LED
fi
if [[ -f "$LAN1_LED" ]]; then
	echo "default-on" > $LAN1_LED
	sleep .75
	echo "netdev" > $LAN1_LED
fi
if [[ -f "$LAN2_LED" ]]; then
	echo "default-on" > $LAN2_LED
	sleep .75
	echo "netdev" > $LAN2_LED
fi
