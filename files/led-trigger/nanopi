#!/bin/bash
# Bind root device activity to Linux kernel LED trigger
# Stop status LED from blinking
# Set R5S eth port LEDs to activity

GREEN_LED="/sys/class/leds/nanopi:green:pwr/trigger"
if [ -f $GREEN_LED ]; then
	ROOT_DEVICE=`findmnt -v -n -o SOURCE /`
	ROOT_DEVICE=${ROOT_DEVICE/\/dev\//}
	ROOT_DEVICE=${ROOT_DEVICE/mmcblk/mmc}
	ROOT_DEVICE=${ROOT_DEVICE/p[0-9]/}
	echo -n "$ROOT_DEVICE" > $GREEN_LED
fi

RED_LED="/sys/class/leds/nanopi:red:status/brightness"
if [ -f $RED_LED ]; then
	echo "0" > $RED_LED
fi

BLUE_LED="/sys/class/leds/nanopi:blue:status/brightness"
if [ -f $BLUE_LED ]; then
	echo "0" > $BLUE_LED
fi

# NanoPi R5S eth ports
if [[ -f "/sys/class/leds/green:wan/trigger" ]]; then
	echo "default-on" > /sys/class/leds/green:wan/trigger
	sleep 1s
	echo "activity" > /sys/class/leds/green:wan/trigger
fi
if [[ -f "/sys/class/leds/green:lan1/trigger" ]]; then
	echo "default-on" > /sys/class/leds/green:lan1/trigger
	sleep 1s
	echo "activity" > /sys/class/leds/green:lan1/trigger
fi
if [[ -f "/sys/class/leds/green:lan2/trigger" ]]; then
	echo "default-on" > /sys/class/leds/green:lan2/trigger
	sleep 1s
	echo "activity" > /sys/class/leds/green:lan2/trigger
fi
