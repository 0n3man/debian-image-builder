#!/bin/bash
source lib/function/staging
source lib/function/release
source lib/function/shrink
source lib/function/echoes
source lib/source
source board.txt > /dev/null 2>&1
if [[ ! -z $FAMILY ]]; then
	source lib/function/${FAMILY};
fi
source userdata.txt > /dev/null 2>&1
UD=userdata.txt > /dev/null 2>&1

userdata(){
echo ""
echo "Please create a userdata.txt file"
while [ true ]; do
read -t 10 -n 1
if [ $? = 0 ]; then
	exit;
else
	echo "run make config";
fi
done
}

if [ -f "$UD" ]; then
	echo ""
else 
	userdata;
fi
validation
bclean
if [ $verbose -eq 1 ]; then
	set -eux -o pipefail;
else
	set -eu -o pipefail;
fi
echo ""
if [[ ! -z $DISTRO ]]; then
	${DISTRO}_banner;
fi
echo ""
RAM=0
PROXY=""
IMAGE_FOLDER="img/"
DEVICE_SOC="${DTB}"
IMAGE_DATE="$(date +%F)"
IMAGE_FILE_NAME="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
if [ $RAM -ne 0 ]; then
	IMAGE_FOLDER="ram/"
fi
mkdir -p "$IMAGE_FOLDER"
if [ $RAM -ne 0 ]; then
	mount -t tmpfs -o size=3G tmpfs $IMAGE_FOLDER
fi
if [[ ! -z $P_VALUE ]]; then
	RELEASE="${P_VALUE}/etc/apt/sources.list"
	${P_VALUE}_setup;
fi
# setup stage2
if [[ ! -z $FAMILY ]]; then
	cp scripts/stage2 ${P_VALUE}/root;
	cp lib/function/${FAMILY} ${P_VALUE}/root/${FAMILY}.txt;
	${P_VALUE}_files;
fi
# place led_trigger file in place for stage2
if [ -f files/led-trigger/${BOARD} ]; then 
	cp files/led-trigger/${BOARD} ${P_VALUE}/root/led-trigger;
fi
# place u-boot and kernel files in place for stage2
if [ -e ${OUTPUT}/*.itb ]; then
	cp -f ${OUTPUT}/{*.itb,*.bin,*.deb} ${P_VALUE}/root;
else
	cp -f ${OUTPUT}/{*.bin,*.deb} ${P_VALUE}/root
fi

echo -e "${WHT}Starting chroot${FIN} ..."
# mount and chroot p1
if [[ `grep -w 'P_VALUE="p1"' "board.txt"` ]]; then
	mount -o bind /dev p1/dev;
	mount -o bind /dev/pts p1/dev/pts;
	chroot p1 /root/stage2;
	# unmount
	umount p1/dev/pts;
	umount p1/dev;
	if [ -e p1/usr/bin/qemu-arm-static ]; then
		rm -f p1/usr/bin/qemu-arm-static;
	fi
	if [ -e p1/usr/bin/qemu-aarch64-static ]; then
		rm -f p1/usr/bin/qemu-aarch64-static;
	fi
	cp -f p1/root/kernel.txt .;
	rm p1/root/stage2;
	rm -f p1/root/*.txt;
	rm -f p1/var/cache/debconf/*;
	if [ -n "$PROXY" ]; then
		rm p1/etc/apt/apt.conf.d/30proxy;
	fi
	rm p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io;
	umount p1;
	# finish
	losetup -d "${IMAGE_LOOP_DEV}";
	mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}";
	if [ $RAM -ne 0 ]; then
		umount "${IMAGE_FOLDER}";
	fi
	rmdir "${IMAGE_FOLDER}";
	rmdir p1;
	shrink;
	if [[ `grep -w "compress_img=1" "userdata.txt"` ]]; then
		echo_compress;
		compress_image;
		echo_done;
	else
		rename_image;
	fi
	rm -f {part-uuid.txt,board.txt,kernel.txt};
	echo "";
	exit 0;
fi

# mount and chroot p2
if [[ `grep -w 'P_VALUE="p2"' "board.txt"` ]]; then
	mount -o bind p1 p2/boot;
	mount -o bind /dev p2/dev;
	mount -o bind /dev/pts p2/dev/pts;
	chroot p2 /root/stage2;
	# unmount
	umount p2/dev/pts;
	umount p2/dev;
	umount p2/boot;
	if [ -e p2/usr/bin/qemu-arm-static ]; then
		rm -f p2/usr/bin/qemu-arm-static;
	fi
	if [ -e p2/usr/bin/qemu-aarch64-static ]; then
		rm -f p2/usr/bin/qemu-aarch64-static;
	fi
	cp -f p2/root/kernel.txt .;
	rm p2/root/stage2;
	rm -f p2/root/*.txt;
	rm -f p2/var/cache/debconf/*;
	if [ -n "$PROXY" ]; then
		rm p2/etc/apt/apt.conf.d/30proxy;
	fi
	rm p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io;
	e4defrag -c p2;
	umount p2;
	umount p1;
	# finish
	losetup -d "${IMAGE_LOOP_DEV}";
	mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}";
	if [ $RAM -ne 0 ]; then
		umount "${IMAGE_FOLDER}";
	fi
	rmdir "${IMAGE_FOLDER}";
	rmdir p1 p2;
	shrink;
	if [[ `grep -w "compress_img=1" "userdata.txt"` ]]; then
		echo_compress;
		compress_image;
		echo_done;
	else
		rename_image;
	fi
	rm -f {part-uuid.txt,board.txt,kernel.txt};
	echo "";
	exit 0;
fi
