#!/bin/bash
source lib/function/echoes
source lib/source
validation
source lib/function/staging
source lib/function/release
source lib/function/shrink
source userdata.txt > /dev/null 2>&1
# hack board-txt
if [[ `grep -w 'FAMILY_EXT="odroid"' "board.txt"` ]]; then
	if [ $petitboot -eq 1 ]; then
		sed -i 's/P_VALUE="p1"/P_VALUE="p2"/g' board.txt;
	fi
fi
# user scripts pre-stage1
if [ $uscripts -eq 1 ]; then
	uscripts_pre-stage1;
fi
source board.txt > /dev/null 2>&1
if [[ ! -z $FAMILY ]]; then
	source lib/function/${FAMILY};
fi
# clean area if found
if [ -e p1 ]; then
	make cleanup > /dev/null 2>&1;
	clear -x;
fi
# check verbosity
if [ $verbose -eq 1 ]; then
	set -eux -o pipefail;
else
	set -eu -o pipefail;
fi
# start
CAP_DISTRO=`echo "${DISTRO}" | sed -e "s/\b\(.\)/\u\1/g"`
CAP_RELEASE=`echo "${DISTRO_VERSION}" | sed -e "s/\b\(.\)/\u\1/g"`
echo -e "${WHT}Distribution${FIN} ${PNK}[${FIN}${GRN}${CAP_DISTRO} ${CAP_RELEASE}${FIN}${PNK}]${FIN}"
RAM=0
PROXY=""
IMAGE_FOLDER="img/"
DEVICE_SOC="${DTB}"
IMAGE_DATE="$(date +%F)"
IMAGE_FILE_NAME="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
if [ $RAM -ne 0 ]; then
	IMAGE_FOLDER="ram/"
fi
mkdir -p "$IMAGE_FOLDER"
if [ $RAM -ne 0 ]; then
	mount -t tmpfs -o size=3G tmpfs $IMAGE_FOLDER
fi
if [[ ! -z $P_VALUE ]]; then
	RELEASE="${P_VALUE}/etc/apt/sources.list"
	${P_VALUE}_setup;
fi
# setup stage2
if [[ ! -z $FAMILY ]]; then
	cp scripts/stage2 ${P_VALUE}/root;
	cp lib/function/${FAMILY} ${P_VALUE}/root/${FAMILY}.txt;
	${P_VALUE}_files;
fi
# place led_trigger file in place for stage2
if [[ -f "files/led-trigger/${BOARD}" ]]; then 
	cp files/led-trigger/${BOARD} ${P_VALUE}/root/led-trigger;
fi
# place u-boot and kernel files in place for stage2
if [[ "$FAMILY" == "allwinner" ]]; then
	cp -f ${OUTPUT}/{*.bin,*.deb} ${P_VALUE}/root;
fi
if [[ "$FAMILY" == "amlogic" ]]; then
	if [ $petitboot -eq 1 ]; then
		cp -f ${OUTPUT}/*.deb ${P_VALUE}/root;
	else
		cp -f ${OUTPUT}/{*.bin,*.deb} ${P_VALUE}/root;
	fi
fi
if [[ "$FAMILY" == "broadcom" ]]; then
	cp -f ${OUTPUT}/{*.bin,*.deb} ${P_VALUE}/root;
fi
if [[ "$FAMILY" == "freescale" ]]; then
	cp -f ${OUTPUT}/{*.bin,*.deb} ${P_VALUE}/root;
	if [[ "$BOARD" == "cuboxi" ]]; then
		mkdir -p ${P_VALUE}/lib/firmware/{qcom,vpu}
		cp -r files/firmware/qcom/* ${P_VALUE}/lib/firmware/qcom;
		cp -r files/firmware/vpu/* ${P_VALUE}/lib/firmware/vpu;
	fi
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	cp -f ${OUTPUT}/{*.itb,*.bin,*.deb} ${P_VALUE}/root;
fi
if [[ "$FAMILY" == "samsung" ]]; then
	cp -f ${OUTPUT}/{*.bin,*.deb} ${P_VALUE}/root;
fi
if [ $useracct -eq 1 ]; then
	mkdir -p ${P_VALUE}/root/useracct;
	cp -r files/useracct/* ${P_VALUE}/root/useracct;
fi
# user scripts stage1
if [ $uscripts -eq 1 ]; then
	uscripts_stage1;
fi
echo ""
echo -e "${WHT}Starting chroot${FIN} ..."
# mount and chroot p1
if [[ "$P_VALUE" == "p1" ]]; then
	mount -o bind /dev p1/dev;
	mount -o bind /dev/pts p1/dev/pts;
	chroot p1 /root/stage2;
	# unmount
	umount p1/dev/pts;
	umount p1/dev;
	if [[ -f "p1/usr/bin/qemu-arm-static" ]]; then
		rm -f p1/usr/bin/qemu-arm-static;
	fi
	if [[ -f "p1/usr/bin/qemu-aarch64-static" ]]; then
		rm -f p1/usr/bin/qemu-aarch64-static;
	fi
	cp -f p1/root/kernel.txt .;
	rm p1/root/stage2;
	rm -f p1/root/*.txt;
	rm -f p1/var/cache/debconf/*;
	if [ -n "$PROXY" ]; then
		rm p1/etc/apt/apt.conf.d/30proxy;
	fi
	rm p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io;
	e4defrag -c p1;
	umount p1;
	echo ""
	# finish
	losetup -d "${IMAGE_LOOP_DEV}";
	mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}";
	if [ $RAM -ne 0 ]; then
		umount "${IMAGE_FOLDER}";
	fi
	rmdir "${IMAGE_FOLDER}";
	rmdir p1;
	if [[ "$GPT" == "true" ]]; then :; else shrink; fi
	if [ $compress_img -eq 1 ]; then
		echo_compress;
		compress_image;
		echo_done;
	else
		rename_image;
	fi
	rm -f {part-uuid.txt,board.txt,kernel.txt};
	exit 0;
fi

# mount and chroot p2
if [[ "$P_VALUE" == "p2" ]]; then
	if [[ "$EFI" == "true" ]]; then
		mkdir -p p2/boot/efi;
		mount -o bind p1 p2/boot/efi;
	else
		mount -o bind p1 p2/boot;
	fi
	mount -o bind /dev p2/dev;
	mount -o bind /dev/pts p2/dev/pts;
	chroot p2 /root/stage2;
	# unmount
	umount p2/dev/pts;
	umount p2/dev;
	if [[ "$EFI" == "true" ]]; then
		umount p2/boot/efi;
	else
		umount p2/boot;
	fi
	if [[ -f "p2/usr/bin/qemu-arm-static" ]]; then
		rm -f p2/usr/bin/qemu-arm-static;
	fi
	if [[ -f "p2/usr/bin/qemu-aarch64-static" ]]; then
		rm -f p2/usr/bin/qemu-aarch64-static;
	fi
	cp -f p2/root/kernel.txt .;
	rm p2/root/stage2;
	rm -f p2/root/*.txt;
	rm -f p2/var/cache/debconf/*;
	if [ -n "$PROXY" ]; then
		rm p2/etc/apt/apt.conf.d/30proxy;
	fi
	rm p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io;
	e4defrag -c p2;
	umount p2;
	umount p1;
	echo ""
	# finish
	losetup -d "${IMAGE_LOOP_DEV}";
	mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}";
	if [ $RAM -ne 0 ]; then
		umount "${IMAGE_FOLDER}";
	fi
	rmdir "${IMAGE_FOLDER}";
	rmdir p1 p2;
	if [[ "$GPT" == "true" ]]; then :; else shrink; fi
	if [ $compress_img -eq 1 ]; then
		echo_compress;
		compress_image;
		echo_done;
	else
		rename_image;
	fi
	rm -f {part-uuid.txt,board.txt,kernel.txt};
	exit 0;
fi
