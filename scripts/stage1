#!/bin/bash
source lib/function/echoes
source lib/source
validation
if [[ -f "custom.txt" ]]; then
	. custom.txt
else
	FSTYPE="ext4"
	ENABLE_EFI="false"
fi
if [[ -f "board.txt" ]] && [[ `grep -w 'PETITBOOT="true"' "board.txt"` ]]; then
	sed -i 's/petitboot=0/petitboot=1/g' userdata.txt
fi
source lib/function/staging
source lib/function/release
source lib/function/shrink
source userdata.txt
# check user data file
if [ $useracct -eq 0 ]; then
	if [ -z $NAME ] && [ -z $USERNAME ] && [ -z $PASSWORD ]; then
		echo -e ""
		echo -e "Name, Username and Password fields are empty?"
		echo -e "Enable the user account service or input your"
		echo -e "information into the userdata.txt file."
		echo -e ""
		read -p "Press enter to continue."
		exit 0
	fi
fi
# customize image
customize_image > /dev/null 2>&1
# user scripts pre-stage1
if [ $uscripts -eq 1 ]; then uscripts_pre-stage1; fi
# source board and family
source board.txt
source lib/function/${FAMILY}
# clean area if found
if [[ -d "p1" ]]; then make cleanup; clear -x; fi
# check output
if [[ -d "output/${BOARD}" ]] && [[ `ls output/${BOARD}/{*linux-*.deb,u-boot-*.deb}` ]]; then
	:;
else
	echo -e "Missing u-boot and linux deb packages"
	exit 0;
fi
# check verbosity
if [ $verbose -eq 1 ]; then
	set -eux -o pipefail;
else
	set -eu -o pipefail;
fi
if [[ "$P_VALUE" == "p1" ]] && [[ "$FSTYPE" == "btrfs" || "$FSTYPE" == "xfs" ]]; then
	echo "The $FSTYPE filesystem requires a boot partition."
	exit 0
fi
# start
CAP_DISTRO=`echo "${DISTRO}" | sed -e "s/\b\(.\)/\u\1/g"`
CAP_RELEASE=`echo "${DISTRO_VERSION}" | sed -e "s/\b\(.\)/\u\1/g"`
echo -e "${WHT}Distribution${FIN} ${PNK}[${FIN}${GRN}${CAP_DISTRO} ${CAP_RELEASE}${FIN}${PNK}]${FIN}"
RAM=0
PROXY=""
IMAGE_FOLDER="img/"
DEVICE_SOC="${DTB}"
IMAGE_DATE="$(date +%F)"
IMAGE_FILE_NAME="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
if [ $RAM -ne 0 ]; then
	IMAGE_FOLDER="ram/"
fi
mkdir -p "$IMAGE_FOLDER"
if [ $RAM -ne 0 ]; then
	mount -t tmpfs -o size=3G tmpfs $IMAGE_FOLDER
fi
if [[ ! -z $P_VALUE ]]; then
	SOURCES_LIST="${P_VALUE}/etc/apt/sources.list"
	setup;
fi
# setup stage2
if [[ ! -z $FAMILY ]]; then
	cp scripts/stage2 ${P_VALUE}/root;
	cp lib/function/${FAMILY} ${P_VALUE}/root/${FAMILY}.txt;
	files;
	cp -r ${OUTPUT}/*.deb ${P_VALUE}/root;
	if [[ "$BOARD" == "cuboxi" ]]; then
		mkdir -p ${P_VALUE}/lib/firmware/{qcom,vpu}
		cp -r files/firmware/qcom/* ${P_VALUE}/lib/firmware/qcom;
		cp -r files/firmware/vpu/* ${P_VALUE}/lib/firmware/vpu;
	fi
fi
# find alsa.state for stage2
if [[ -f "files/asound/${BOARD}.state" ]]; then
	cp files/asound/${BOARD}.state ${P_VALUE}/root/asound.state;
fi
if [[ -f "files/asound/${BOARD}.conf" ]]; then
	cp files/asound/${BOARD}.conf ${P_VALUE}/root/asound.conf;
fi
# find led_trigger for stage2
if [[ -f "files/led-trigger/${BOARD}" ]]; then
	cp files/led-trigger/${BOARD} ${P_VALUE}/root/led-trigger;
fi
if [[ "$BOARD" == "x96air" ]]; then
	mkdir -p ${P_VALUE}/usr/local/bin
	cp files/openvfd/vfdservice ${P_VALUE}/usr/local/bin/
fi
# user account service
if [ $useracct -eq 1 ]; then
	mkdir -p ${P_VALUE}/root/useracct;
	cp -r files/useracct/* ${P_VALUE}/root/useracct;
fi
# user scripts stage1
if [ $uscripts -eq 1 ]; then
	uscripts_stage1;
fi
echo ""
echo -e "${WHT}Starting chroot${FIN} ..."
# mount and chroot p1
if [[ "$P_VALUE" == "p1" ]]; then
	mount -o bind /dev p1/dev;
	mount -o bind /dev/pts p1/dev/pts;
	chroot p1 /root/stage2;
	# unmount
	umount p1/dev/pts;
	umount p1/dev;
	if [[ -f "p1/usr/bin/qemu-arm-static" ]]; then
		rm -f p1/usr/bin/qemu-arm-static;
	fi
	if [[ -f "p1/usr/bin/qemu-aarch64-static" ]]; then
		rm -f p1/usr/bin/qemu-aarch64-static;
	fi
	cp -f p1/root/kernel.txt .;
	rm p1/root/stage2;
	rm -f p1/root/*.txt;
	rm -f p1/var/cache/debconf/*;
	if [ -n "$PROXY" ]; then
		rm p1/etc/apt/apt.conf.d/30proxy;
	fi
	rm p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io;
	if [[ -f "kernel.txt" ]]; then source kernel.txt; fi
	if [[ "$FSTYPE" == "ext4" ]]; then e4defrag -c ${P_VALUE}; fi
	if [[ "$EXTLINUX" == "true" ]] && [[ "$EFI" == "false" ]]; then
		extlinux > /dev/null 2>&1
	fi
	umount p1;
	echo ""
	# finish
	losetup -d "${IMAGE_LOOP_DEV}";
	mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}";
	if [ $RAM -ne 0 ]; then
		umount "${IMAGE_FOLDER}";
	fi
	rmdir "${IMAGE_FOLDER}";
	rmdir p1;
	if [[ "$GPT" == "false" ]] && [[ "$FSTYPE" == "ext4" ]]; then shrink; fi
	finish_image;
	rm -f {part-uuid.txt,board.txt,kernel.txt};
	exit 0;
fi

# mount and chroot p2
if [[ "$P_VALUE" == "p2" ]]; then
	if [[ "$EFI" == "true" ]]; then
		if [[ "$FAMILY" == "broadcom" ]]; then
			P_EFI="p2/boot/${FAMILY}"
		else
			P_EFI="p2/boot/efi"
		fi
		mkdir -p ${P_EFI};
		mount -o bind p1 ${P_EFI};
	else
		if [[ "$FAMILY" == "broadcom" ]]; then
			P_NORM="p2/boot/${FAMILY}"
		else
			P_NORM="p2/boot"
		fi
		mkdir -p ${P_NORM};
		mount -o bind p1 ${P_NORM};
	fi
	mount -o bind /dev p2/dev;
	mount -o bind /dev/pts p2/dev/pts;
	chroot p2 /root/stage2;
	# unmount
	umount p2/dev/pts;
	umount p2/dev;
	if [[ "$EFI" == "true" ]]; then
		umount ${P_EFI};
	else
		umount ${P_NORM};
	fi
	if [[ -f "p2/usr/bin/qemu-arm-static" ]]; then
		rm -f p2/usr/bin/qemu-arm-static;
	fi
	if [[ -f "p2/usr/bin/qemu-aarch64-static" ]]; then
		rm -f p2/usr/bin/qemu-aarch64-static;
	fi
	cp -f p2/root/kernel.txt .;
	rm p2/root/stage2;
	rm -f p2/root/*.txt;
	rm -f p2/var/cache/debconf/*;
	if [ -n "$PROXY" ]; then
		rm p2/etc/apt/apt.conf.d/30proxy;
	fi
	rm p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io;
	if [[ -f "kernel.txt" ]]; then source kernel.txt; fi
	if [[ "$FSTYPE" == "ext4" ]]; then e4defrag -c ${P_VALUE}; fi
	if [[ "$FSTYPE" == "btrfs" ]]; then btrfs filesystem defragment -f -r ${P_VALUE}; fi
	if [[ "$FSTYPE" == "xfs" ]]; then xfs_fsr ${P_VALUE}; fi
	if [[ "$EXTLINUX" == "true" ]] && [[ "$EFI" == "false" ]]; then
		if [[ "$FAMILY" == "broadcom" ]]; then
			brcm_extlinux > /dev/null 2>&1
		else
			extlinux > /dev/null 2>&1
		fi
	fi
	if [[ "$FAMILY" == "broadcom" ]]; then
		brcm_config > /dev/null 2>&1
	fi
	if [[ "$PETITBOOT" == "true" ]]; then
		odroid_bootcmd > /dev/null 2>&1
	fi
	if [[ "$BOOTINI" == "true" ]] && [[ "$BOARD" == "odroidc1" ]]; then
		odroid_bootini > /dev/null 2>&1
	fi
	#if [[ "$BOARD" == "x96air" ]]; then
	#	cp -fr files/boot/uboot/${BOARD}/{aml_autoscript.cmd,s905_autoscript.cmd,chainload.bin} p1/
	#	mkimage -C none -A arm -T script -d p1/aml_autoscript.cmd p1/aml_autoscript > /dev/null 2>&1
	#	mkimage -C none -A arm -T script -d p1/s905_autoscript.cmd p1/s905_autoscript > /dev/null 2>&1
	#fi
	umount p2;
	umount p1;
	echo ""
	# finish
	losetup -d "${IMAGE_LOOP_DEV}";
	mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}";
	if [ $RAM -ne 0 ]; then
		umount "${IMAGE_FOLDER}";
	fi
	rmdir "${IMAGE_FOLDER}";
	rmdir p1 p2;
	if [[ "$GPT" == "false" ]] && [[ "$FSTYPE" == "ext4" ]]; then shrink; fi
	finish_image;
	rm -f {part-uuid.txt,board.txt,kernel.txt};
	exit 0;
fi

exit 0
