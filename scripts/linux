#!/bin/bash
source lib/function/echoes
source lib/source
validation
source packaging/pkgvars
source lib/function/linux
source lib/function/git
source lib/function/patching
source lib/function/wireless
source lib/function/compilers
# override the board file
if [[ -f "board.txt" ]] && [[ -f "override.txt" ]]; then . override.txt; override_board; fi
# create dtc list
if [[ -f "board.txt" ]]; then :; else noboard; fi
if [[ -f "dtclist.txt" ]]; then rm -f dtclist.txt; fi
for f in lib/boards/*; do
	. $f
	if [[ "$COMMON_PKG" == "true" ]]; then
		FIND=`cat board.txt | grep -w COMMON_PKGNAME= | sed 's/COMMON_PKGNAME=//g' | sed 's/"//g'`
		if [[ "$COMMON_PKGNAME" == "$FIND" ]]; then echo -e ${DEVICETREE} | tr ' ' '\n' | tee -a dtclist.txt > /dev/null 2>&1; fi
	else
		FIND=`cat board.txt | grep -w SERIES= | sed 's/SERIES=//g' | sed 's/"//g'`
		if [[ "$SERIES" == "$FIND" ]]; then echo -e ${DEVICETREE} | tr ' ' '\n' | tee -a dtclist.txt > /dev/null 2>&1; fi
	fi
done
source board.txt
source lib/function/${FAMILY}
if [[ -f "kernel.txt" ]]; then . kernel.txt; fi
source userdata.txt
# debug switch
if [ $VERBOSE -eq 1 ]; then set -x; fi
# compile native or cross
if [[ "$HOST_ARCH" == "aarch64" ]] && [[ "$ARCH" == "arm64" ]]; then CROSSCOMPILE="0"; fi
if [[ "$HOST_ARCH" == "aarch64" ]] && [[ "$ARCH" == "arm" ]]; then CROSSCOMPILE="1"; fi
if [[ "$HOST_ARCH" == "x86_64"  ]] && [[ "$ARCH" == "arm" || "$ARCH" == "arm64" ]]; then CROSSCOMPILE="1"; fi
# override userdata file
if [[ "$FORCE_VERSION" == "true" ]]; then
	if [ -z $FORCE_LINUX_VERSION ]; then :; else VERSION="${FORCE_LINUX_VERSION}"; fi
fi
LINUX_VERSION=`echo "$VERSION" | sed -e 's/^\(.\{4\}\).*/\1/' | sed 's/-//g' | sed -r 's/\.$//'`
# compiler
linux_compilers
# sources directory
sources_dir
# download source
if [[ "$VERSION" =~ ^(lts1|lts2|lts3|stable|rc)$ ]]; then linux_prng; fi
if [[ "$FORCE_GIT" == "true" ]]; then git_download; else download; fi
# setup
if [[ "$FORCE_GIT" == "true" ]]; then git_setup; else setup; fi
# patching
if [[ ! -z $FAMILY ]]; then linux_patching; fi
# defconfig
if [ $CUSTOM_DEFCONFIG -eq 1 ]; then cconfig; else bconfig; fi
# menuconfig
if [ $MENUCONFIG -eq 1 ]; then menuconfig; fi
# builddeb
builddeb
echo ""
# finish
cd ..
rm -f {*linux-image-dbg*.deb,linux-libc-dev*.deb,*.buildinfo,*.changes}
if [[ `ls *linux*.deb` ]] > /dev/null 2>&1; then
	if [[ `ls ../${OUTPUT}/*linux*.deb` ]] > /dev/null 2>&1; then
		mkdir -p ../${OUTPUT}/tmp
		mv -f ../${OUTPUT}/{*linux-image*.deb,*linux-headers*.deb} ../${OUTPUT}/tmp
	fi
	mkdir -p ../${OUTPUT}
	mv -f *.deb ../${OUTPUT}/
	rm -f ../dtclist.txt
	echo_done
	exit 0
else
	rm -f ../dtclist.txt
	echo ""
	if [[ "$FORCE_GIT" == "true" ]]; then echo -e "${GIT_REPO} ${GIT_BRANCH} [FAILED]"; else echo -e "${KERNEL} ${VERSION} [FAILED]"; fi
	read -p "Press enter to continue."
	exit 1
fi

exit 0
