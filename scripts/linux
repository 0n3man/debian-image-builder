#!/bin/bash
source lib/source
source lib/function/echoes
source lib/function/linux
source lib/function/patches
source lib/function/compiler
source lib/function/wireless
source board.txt > /dev/null 2>&1
source userdata.txt > /dev/null 2>&1
UD=userdata.txt > /dev/null 2>&1

userdata(){
echo ""
echo "Please create a userdata.txt file"
while [ true ]; do
read -t 10 -n 1
if [ $? = 0 ]; then
	exit;
else
	echo "run make config";
fi
done
}

if [ -f "$UD" ]; then
	:;
else 
	userdata;
fi
validation
if [[ `grep -w "ccache=1" "userdata.txt"` ]]; then
	if [ -e /usr/bin/ccache ]; then
		rm -f ccache.txt gcc.txt
		ccache_version
	else
		sudo apt update
		sudo apt upgrade -y
		sudo apt install -y ccache
		sleep 1s
		rm -f ccache.txt gcc.txt
		ccache_version;
	fi
fi

if [[ `grep -w "ccache=0" "userdata.txt"` ]]; then
	rm -f ccache.txt gcc.txt
	gcc_version;
fi

kernel-source
if [ -e ${KERNEL}-${VERSION} ]; then
	echo "" && echo -e "${PNK}Cleaning${FIN} ..."
	rm -fdr ${KERNEL}-${VERSION};
fi
# Download kernel and extract
case `grep -Fx "rc=1" "../userdata.txt" >/dev/null; echo $?` in
  0)
if [[ `wget -S --spider ${MLURL}${KERNEL}-${VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	mainline_download;
	mainline_extract;
else
	echo "";
	echo -e "${WHT}It appears the kernel you selected is not available${FIN}?";
	exit;
fi
    ;;
  1)
check_stable
    ;;
esac

# Setup
setup

# Patching
### AMLOGIC
if [[ `grep -w "lepotato" "../../board.txt"` ]]; then
	potato_patch;
fi
if [[ `grep -w "odroidn2" "../../board.txt"` ]]; then
	odroidn2_patch;
fi
if [[ `grep -w "odroidn2plus" "../../board.txt"` ]]; then
	odroidn2_patch;
fi
if [[ `grep -w "odroidc4" "../../board.txt"` ]]; then
	odroidc4_patch;
fi
if [[ `grep -w "radxazero" "../../board.txt"` ]]; then
	radxazero_patch;
fi
### ALLWINNER
if [[ `grep -w "tritium" "../../board.txt"` ]]; then
	tritium_patch;
fi
if [[ `grep -w "pine64" "../../board.txt"` ]]; then
	pine64_patch;
fi
if [[ `grep -w "nanopi" "../../board.txt"` ]]; then
	nanopi_patch;
fi
if [[ `grep -w "nanopineo" "../../board.txt"` ]]; then
	sun8i_patch;
fi
if [[ `grep -w "nanopim1" "../../board.txt"` ]]; then
	sun8i_patch;
fi
if [[ `grep -w "opione" "../../board.txt"` ]]; then
	sun8i_patch;
fi
if [[ `grep -w "opipc" "../../board.txt"` ]]; then
	sun8i_patch;
fi
### ROCKCHIP
if [[ `grep -w "renegade" "../../board.txt"` ]]; then
	rk3328_patch;
fi
if [[ `grep -w "rock64" "../../board.txt"` ]]; then
	rk3328_patch;
fi
if [[ `grep -w "rockpro64" "../../board.txt"` ]]; then
	rk3399_patch;
fi
if [[ `grep -w "nanopc" "../../board.txt"` ]]; then
	rk3399_patch;
fi

### BROADCOM
if [[ `grep -w "bcm2711" "../../board.txt"` ]]; then
	raspberrypi_patch;
fi

# DEFCONFIG
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	bconfig;
fi

# Menuconfig
if [[ `grep -w "menuconfig=1" "../../userdata.txt"` ]]; then
	menuconfig;
fi

# Builddeb
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	ccompile;
else
	ncompile;
fi
echo

# Finish
cd ..
rm -f linux-libc-dev*.deb
rm -f *.buildinfo
rm -f *.changes
allwinner_output
amlogic_output
rockchip_output
broadcom_output
echo_done
