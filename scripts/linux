#!/bin/bash
source lib/function/echoes
source lib/source
validation
source packaging/pkgvars
source lib/function/linux
source lib/function/git
source lib/function/patching
source lib/function/compilers
source userdata.txt
if [[ -f "board.txt" ]]; then :; else noboard; fi
# override the board file
if [[ -f "board.txt" ]] && [[ -f "override.txt" ]]; then . override.txt; override_board; fi
# debug switch
if [ $VERBOSE -eq 1 ]; then set -x; fi
source board.txt
source lib/function/${FAMILY}
source lib/function/wireless
if [[ -f "kernel.txt" ]]; then . kernel.txt; fi
# override userdata file
if [[ "$FORCE_VERSION" == "true" ]]; then
	if [ -z $FORCE_LINUX_VERSION ]; then :; else VERSION="${FORCE_LINUX_VERSION}"; fi
fi
if [[ "$FORCE_GIT" == "false" ]]; then
	if [[ "$VERSION" =~ ^([0-9].[0-9].y|[0-9].[0-9][0-9].y|stable|rc)$ ]]; then linux_prng; fi
fi
if [[ `type ${FAMILY}_bsp` ]] &>/dev/null; then ${FAMILY}_bsp; fi
# compile native or cross
compile
LINUX_VERSION=`echo "$VERSION" | sed -e 's/^\(.\{4\}\).*/\1/' | sed 's/-//g' | sed -r 's/\.$//'`
# compiler
linux_compilers
# sources directory
sources_dir
# download source
if [[ "$FORCE_GIT" == "true" ]]; then git_download; else download; extra_wireless; fi
# setup
if [[ "$FORCE_GIT" == "true" ]]; then git_setup; else setup; fi
# extra wireless
if [[ "$FORCE_GIT" == "false" ]]; then add_extra_wireless; fi
# patching
if [[ ! -z $FAMILY ]]; then linux_patching; fi
# firmware
if [[ -v "LINUX_EXTRA_FIRMWARE" ]] && [[ ! -z "$LINUX_EXTRA_FIRMWARE" ]]; then mkdir -p firmware; cp -fr ../../${LINUX_EXTRA_FIRMWARE} firmware/; fi
# defconfig
if [ $CUSTOM_DEFCONFIG -eq 1 ]; then cconfig; else bconfig; fi
# menuconfig
if [ $MENUCONFIG -eq 1 ]; then menuconfig; fi
# builddeb
builddeb
echo ""
# finish
cd ..
rm -f {*linux-image-dbg*.deb,linux-libc-dev*.deb,*.buildinfo,*.changes}
if [[ `ls *linux*.deb` ]] > /dev/null 2>&1; then
	if [[ `ls ../${OUTPUT}/*linux*.deb` ]] > /dev/null 2>&1; then
		mkdir -p ../${OUTPUT}/tmp
		mv -f ../${OUTPUT}/{*linux-image*.deb,*linux-headers*.deb} ../${OUTPUT}/tmp
	fi
	mkdir -p ../${OUTPUT}
	mv -f *.deb ../${OUTPUT}/
	rm -f ../dtclist.txt
	echo_done
	exit 0
else
	rm -f ../dtclist.txt
	echo ""
	if [[ "$FORCE_GIT" == "true" ]]; then echo -e "${GIT_REPO} ${GIT_BRANCH} [FAILED]"; else echo -e "${KERNEL} ${VERSION} [FAILED]"; fi
	read -p "Press enter to continue."
	exit 1
fi

exit 0
