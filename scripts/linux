#!/bin/bash
source lib/function/echoes
source lib/source
validation
source packaging/pkgvars
source lib/function/linux
source lib/function/github
source lib/function/patching
source lib/function/wireless
source lib/function/modconfig
source lib/function/compilers
# override the board file
if [[ -f "override.txt" ]]; then
	. override.txt
	override_board
fi
# create dtc list
FIND=`cat board.txt | grep -w SERIES= | sed 's/SERIES=//g' | sed 's/"//g'`
rm -f dtclist.txt
for f in lib/boards/*; do
	. $f
	echo -e ${DEVICETREE} | grep "$FIND" | tr ' ' '\n' | tee -a dtclist.txt > /dev/null 2>&1
done
source board.txt
source userdata.txt
# debug switch
if [ $VERBOSE -eq 1 ]; then set -x; fi
# compile native or cross
if [[ "$HOST_ARCH" == "aarch64" ]] && [[ "$ARCH" == "arm64" ]]; then CROSSCOMPILE="0"; fi
if [[ "$HOST_ARCH" == "aarch64" ]] && [[ "$ARCH" == "arm" ]]; then CROSSCOMPILE="1"; fi
if [[ "$HOST_ARCH" == "x86_64"  ]] && [[ "$ARCH" == "arm" || "$ARCH" == "arm64" ]]; then CROSSCOMPILE="1"; fi
# github
if [[ "$FORCE_GITHUB" == "true" ]]; then
	VERSION="${GITHUB_BRANCH_VERSION}"
	echo "${GITHUB}" > github.txt
	echo "${GITHUB_REPO}" >> github.txt
	echo "${GITHUB_BRANCH}" >> github.txt
fi
# override userdata file
if [[ "$FORCE_VERSION" == "true" ]]; then
	if [ -z $FORCE_LINUX_VERSION ]; then :; else VERSION="${FORCE_LINUX_VERSION}"; fi
fi
LINUX_VERSION=`echo "$VERSION" | sed -e 's/^\(.\{4\}\).*/\1/' | sed 's/-//g' | sed -r 's/\.$//'`
# compiler
linux_compilers
# sources directory
sources_dir
if [[ -d "${KERNEL}-${VERSION}" ]]; then
	echo -en "${KERNEL}-${VERSION}"
	echo -en " ${PNK}[${FIN}${YLW}removing${FIN}${PNK}]${FIN}"
	rm -fdr ${KERNEL}-${VERSION}
	echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
fi
# download and extract
downloading
# setup
if [[ -v SETUP ]] && [[ "$SETUP" == "vendor" ]]; then vendor_setup; else setup; fi
# patching
if [[ ! -z $FAMILY ]]; then linux_patching; fi
# defconfig
if [[ -v SETUP ]] && [[ "$SETUP" == "vendor" ]]; then
	if [ $CUSTOM_DEFCONFIG -eq 1 ]; then cconfig; else vendor_config; fi
else
	if [ $CUSTOM_DEFCONFIG -eq 1 ]; then cconfig; else bconfig; fi
fi
# menuconfig
if [ $MENUCONFIG -eq 1 ]; then menuconfig; fi
# builddeb
builddeb
echo ""
# finish
cd ..
rm -f {*linux-image-dbg*.deb,linux-libc-dev*.deb,*.buildinfo,*.changes}
if [[ `ls *linux*.deb` ]] > /dev/null 2>&1; then
	if [[ `ls ../${OUTPUT}/*linux*.deb` ]] > /dev/null 2>&1; then
		mkdir -p ../${OUTPUT}/tmp
		mv -f ../${OUTPUT}/{*linux-image*.deb,*linux-headers*.deb} ../${OUTPUT}/tmp
	fi
	mkdir -p ../${OUTPUT}
	mv -f *.deb ../${OUTPUT}/
	if [[ -f "../github.txt" ]]; then
		rm -f ../github.txt
	fi
	echo_done
	exit 0
else
	rm -f ../{github.txt,dtc.txt}
	echo ""
	echo -e "${KERNEL} ${VERSION} [FAILED]"
	read -p "Press enter to continue."
	exit 1
fi

exit 0
