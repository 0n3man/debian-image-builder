#!/bin/bash
source lib/function/echoes
source lib/source
validation
source packaging/pkgvars
source lib/function/linux
source lib/function/github
source lib/function/patching
source lib/function/wireless
source board.txt
source userdata.txt

if [ $VERBOSE -eq 1 ]; then
	set -x;
fi
HOST_ARCH=`uname -m`
if [[ "$HOST_ARCH" == "aarch64" ]] && [[ "$ARCH" == "arm64" ]]; then
	CROSSCOMPILE="0"
fi
if [[ "$HOST_ARCH" == "aarch64" ]] && [[ "$ARCH" == "arm" ]]; then
	CROSSCOMPILE="1"
fi
if [[ "$HOST_ARCH" == "x86_64"  ]] && [[ "$ARCH" == "arm" || "$ARCH" == "arm64" ]]; then
	CROSSCOMPILE="1"
fi
# override the userdata.txt file for best user experience
if [[ "$FORCE_GITHUB" == "true" ]]; then
	VERSION="${GITHUB_BRANCH_VERSION}"
	echo "${GITHUB}" > github.txt
	echo "${GITHUB_REPO}" >> github.txt
	echo "${GITHUB_BRANCH}" >> github.txt
fi
if [[ "$FORCE_VERSION" == "true" ]]; then
	if [ -z $FORCE_LINUX_VERSION ]; then :; else VERSION="${FORCE_LINUX_VERSION}"; fi
fi
if [[ "$BOARD" == "nanopir5c" || "$BOARD" == "nanopir5s" || "$BOARD" == "odroidm1" ]] && [[ "$FORCE_GITHUB" == "false" ]]; then
	JSON_FILE="https://kernel.org/releases.json"
	if [[ `curl -Ls $JSON_FILE | grep -w "version" | sed -n 3p | grep -w 6.1` ]]; then
		LTS2_L="3p";
	else
		LTS2_L="4p";
	fi
	LTS2=$(curl -Ls $JSON_FILE | grep -w "version" | sed -n $LTS2_L | sed -r 's/"version"://g' | sed -r '1s/\s+//g' | sed 's/,//g' | sed 's/\"//g')
	if [[ "$FORCE_VERSION" == "true" ]]; then
		VERSION="${LTS2}"
	fi
fi
# end override
LINUX_VERSION=`echo "$VERSION" | sed -e 's/^\(.\{4\}\).*/\1/' | sed 's/-//g' | sed -r 's/\.$//'`
if [ $CCACHE -eq 1 ]; then
	if [[ `command -v ccache` ]]; then
		:;
	else
		apt install -y ccache
	fi
fi
if [ $CCACHE -eq 1 ]; then
	DEST="/usr/lib/ccache"
else
	DEST="/usr/bin"
fi
NATIVE="${DEST}/${COMPILER}"
CROSS="${DEST}/${CROSS_COMPILE}${COMPILER}"
# sources directory
kernel_source
if [[ -d "${KERNEL}-${VERSION}" ]]; then
	CAP_KERNEL=`echo "${KERNEL}" | sed -e "s/\b\(.\)/\u\1/g"`
	echo -en "${WHT}${CAP_KERNEL}-${VERSION}${FIN}";
	echo -en " ${PNK}[${FIN}${YLW}removing${FIN}${PNK}]${FIN} ";
	rm -fdr ${KERNEL}-${VERSION};
	echo -e "${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}";
fi
# download and extract
download
# setup
if [[ -v SETUP ]] && [[ "$SETUP" == "vendor" ]]; then
	vendor_setup
else
	setup
fi
# patching
if [[ ! -z $FAMILY ]]; then
	linux_patching;
fi
# defconfig
if [[ -v SETUP ]] && [[ "$SETUP" == "vendor" ]]; then
	if [ $CUSTOM_DEFCONFIG -eq 1 ]; then
		cconfig;
	else
		vendor_config;
	fi
else
	if [ $CUSTOM_DEFCONFIG -eq 1 ]; then
		cconfig;
	else
		bconfig;
	fi
fi
# menuconfig
if [ $MENUCONFIG -eq 1 ]; then
	menuconfig;
fi
# builddeb
if [ $CROSSCOMPILE -eq 1 ]; then
	ccompile;
else
	ncompile;
fi
echo ""
# finish
cd ..
rm -f {*linux-image-dbg*.deb,linux-libc-dev*.deb,*.buildinfo,*.changes}
if [[ `ls ../${OUTPUT}/*linux*.deb` ]] > /dev/null 2>&1; then
	mkdir -p ../${OUTPUT}/tmp;
	mv -f ../${OUTPUT}/{*linux-image*.deb,*linux-headers*.deb} ../${OUTPUT}/tmp;
fi
mkdir -p ../${OUTPUT}
mv -f *.deb ../${OUTPUT}/
if [[ -f "../github.txt" ]]; then
	rm -f ../github.txt;
fi
echo_done

exit 0
