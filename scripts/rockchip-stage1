#!/bin/bash
source lib/function/rockchip
source lib/function/release
source lib/function/shrink
source lib/function/echoes
source lib/source
source userdata.txt > /dev/null 2>&1
UD=userdata.txt > /dev/null 2>&1

userdata(){
echo ""
echo "Please create a userdata.txt file"
while [ true ] ; do
read -t 10 -n 1
if [ $? = 0 ] ; then
exit ;
else
echo "run make config"
fi
done
}

if [ -f "$UD" ]; then
    echo ""
    echo "$UD file found." > /dev/null 2>&1
else 
    userdata
fi
validation
if `grep -Fx "verbose=1" "userdata.txt" >/dev/null;`
	then set -eux -o pipefail;
	else set -eu -o pipefail;
fi
echo
if `grep -Fx 'DISTRO="debian"' "userdata.txt" >/dev/null;`
	then debian_banner;
fi
if `grep -Fx 'DISTRO="devuan"' "userdata.txt" >/dev/null;`
	then devuan_banner;
fi
if `grep -Fx 'DISTRO="kali"' "userdata.txt" >/dev/null;`
	then kali_banner;
fi
if `grep -Fx 'DISTRO="ubuntu"' "userdata.txt" >/dev/null;`
	then ubuntu_banner;
fi
echo
RAM=0
PROXY=""
IMAGE_FOLDER="img/"
if `grep -Fx "renegade" "board.txt" >/dev/null;`
	then DEVICE_SOC="rk3328-roc-cc";
fi
if `grep -Fx "rock64" "board.txt" >/dev/null;`
	then DEVICE_SOC="rk3328-rock64";
fi
if `grep -Fx "nanopc" "board.txt" >/dev/null;`
	then DEVICE_SOC="rk3399-nanopct4";
fi
IMAGE_DATE="$(date +%F)"
IMAGE_FILE_NAME="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
if [ $RAM -ne 0 ]; then
	IMAGE_FOLDER="ram/"
fi
mkdir -p "$IMAGE_FOLDER"
if [ $RAM -ne 0 ]; then
	mount -t tmpfs -o size=3G tmpfs $IMAGE_FOLDER
fi

if `grep -Fx "verbose=1" "userdata.txt" >/dev/null;`
	then partition;
	else partition > /dev/null 2>&1;
fi
if `grep -Fx "verbose=1" "userdata.txt" >/dev/null;`
	then partition_uuid;
	else partition_uuid > /dev/null 2>&1;
fi

if [ -e ${DISTRO}-${DISTRO_VERSION}-rootfs-aarch64.tar.xz ];
	then tar -xf ${DISTRO}-${DISTRO_VERSION}-rootfs-aarch64.tar.xz -C p1/
	else echo -e "${YLW}Missing rootfs tarball!${FIN}" && make cleanup && exit;
fi

mkdir -p p1/etc/apt/apt.conf.d p1/etc/dpkg/dpkg.cfg.d
echo "force-unsafe-io" > "p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io"

mkdir -p p1/usr/bin
cp $(which "qemu-aarch64-static") p1/usr/bin

if `grep -Fx "verbose=1" "userdata.txt" >/dev/null;`
	then choose_release;
	else choose_release > /dev/null 2>&1;
fi
if `grep -Fx "verbose=1" "userdata.txt" >/dev/null;`
	then create_fstab;
	else create_fstab > /dev/null 2>&1;
fi

if [ -n "$PROXY" ] ; then
	tee "p1/etc/apt/apt.conf.d/30proxy" <<EOF
Acquire::http::proxy "http://127.0.0.1:3142";
EOF
fi

# setup stage2
cp scripts/rockchip-stage2 p1/root
cp lib/function/rockchip p1/root/rockchip.txt
cp lib/source p1/root/source.txt
cp userdata.txt p1/root
cp part-uuid.txt p1/root
cp board.txt p1/root
cp files/misc/* p1/root
cp files/scripts/* p1/root
cp files/users/* p1/root
cp firmware/{fw-0a5c_21e8.hcd,UPDATE.mem} p1/root
if `grep -Fx "renegade" "board.txt" >/dev/null;`
    then cp output/renegade/{*.itb,*.bin,*.deb} p1/root;
fi
if `grep -Fx "rock64" "board.txt" >/dev/null;`
    then cp output/rock64/{*.itb,*.bin,*.deb} p1/root;
fi
if `grep -Fx "nanopc" "board.txt" >/dev/null;`
    then cp output/nanopc/{*.itb,*.bin,*.deb} p1/root && cp files/led-trigger/nanopc p1/root;
fi
echo -e "${WHT}Starting chroot${FIN} ..."
# mount and chroot
mount -o bind /dev p1/dev
mount -o bind /dev/pts p1/dev/pts
chroot p1 /root/rockchip-stage2
# unmount
umount p1/dev/pts
umount p1/dev
rm p1/usr/bin/qemu-aarch64-static
cp -f p1/root/kernel.txt .
rm p1/root/rockchip-stage2
rm -f p1/root/*.txt
rm -f p1/var/cache/debconf/*

if [ -n "$PROXY" ] ; then
	rm p1/etc/apt/apt.conf.d/30proxy
fi
rm p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io

### Finish
umount p1

losetup -d "${IMAGE_LOOP_DEV}"
mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}"
if [ $RAM -ne 0 ]; then
	umount "${IMAGE_FOLDER}"
fi
rmdir "${IMAGE_FOLDER}"
rmdir p1
shrink
if `grep -Fx "auto=1" "userdata.txt" >/dev/null;`
	then echo && echo_compress && compress_image && echo_done;
	else rename_image;
fi
rm -f part-uuid.txt board.txt kernel.txt
echo
if ls *.img > /dev/null 2>&1;
	then ls -l *.img;
fi
if ls *.img.xz > /dev/null 2>&1;
	then ls -l *.img.xz;
fi
echo
