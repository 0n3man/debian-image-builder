#!/bin/bash
source lib/function/amlogic
source lib/function/release
source lib/function/shrink
source lib/function/echoes
source lib/source
source userdata.txt > /dev/null 2>&1
UD=userdata.txt > /dev/null 2>&1

userdata(){
echo ""
echo "Please create a userdata.txt file"
while [ true ] ; do
read -t 10 -n 1
if [ $? = 0 ] ; then
exit ;
else
echo "run make config"
fi
done
}

if [ -f "$UD" ]; then
    echo ""
    echo "$UD file found." > /dev/null 2>&1
else 
    userdata
fi
validation
if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	set -eux -o pipefail;
else
	set -eu -o pipefail;
fi
echo
if [[ `grep -w 'DISTRO="debian"' "userdata.txt"` ]]; then
	debian_banner;
fi
if [[ `grep -w 'DISTRO="devuan"' "userdata.txt"` ]]; then
	devuan_banner;
fi
if [[ `grep -w 'DISTRO="kali"' "userdata.txt"` ]]; then
	kali_banner;
fi
if [[ `grep -w 'DISTRO="ubuntu"' "userdata.txt"` ]]; then
	ubuntu_banner;
fi
echo
RAM=0
PROXY=""
IMAGE_FOLDER="img/"
if [[ `grep -w "lepotato" "board.txt"` ]]; then
	DEVICE_SOC="s905x-libretech-cc";
fi
if [[ `grep -w "odroidc4" "board.txt"` ]]; then
	DEVICE_SOC="sm1-odroid-c4";
fi
if [[ `grep -w "odroidhc4" "board.txt"` ]]; then
	DEVICE_SOC="sm1-odroid-hc4";
fi
if [[ `grep -w "odroidn2" "board.txt"` ]]; then
	DEVICE_SOC="g12b-odroid-n2";
fi
if [[ `grep -w "odroidn2plus" "board.txt"` ]]; then
	DEVICE_SOC="g12b-odroid-n2-plus";
fi
IMAGE_DATE="$(date +%F)"
IMAGE_FILE_NAME="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
if [ $RAM -ne 0 ]; then
	IMAGE_FOLDER="ram/"
fi
mkdir -p "$IMAGE_FOLDER"
if [ $RAM -ne 0 ]; then
	mount -t tmpfs -o size=3G tmpfs $IMAGE_FOLDER
fi

if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	partition;
else
	partition > /dev/null 2>&1;
fi
if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	partition_uuid;
else
	partition_uuid > /dev/null 2>&1;
fi

if [ -e ${DISTRO}-${DISTRO_VERSION}-rootfs-aarch64.tar.xz ]; then
	tar -xf ${DISTRO}-${DISTRO_VERSION}-rootfs-aarch64.tar.xz -C p1/;
else
	echo -e "${YLW}Missing rootfs tarball!${FIN}"
	make cleanup
	exit;
fi

mkdir -p p1/etc/apt/apt.conf.d p1/etc/dpkg/dpkg.cfg.d
echo "force-unsafe-io" > "p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io"

mkdir -p p1/usr/bin
cp $(which "qemu-aarch64-static") p1/usr/bin

if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	choose_release;
else
	choose_release > /dev/null 2>&1;
fi
if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	create_fstab;
else
	create_fstab > /dev/null 2>&1;
fi

if [ -n "$PROXY" ] ; then
	tee "p1/etc/apt/apt.conf.d/30proxy" <<EOF
Acquire::http::proxy "http://127.0.0.1:3142";
EOF
fi

# setup stage2
cp scripts/amlogic-stage2 p1/root
cp lib/function/amlogic p1/root/amlogic.txt
cp lib/function/services p1/root/services.txt
cp lib/source p1/root/source.txt
cp userdata.txt p1/root
cp part-uuid.txt p1/root
cp board.txt p1/root
cp files/misc/* p1/root
cp files/scripts/* p1/root
cp files/users/* p1/root
cp firmware/{fw-0a5c_21e8.hcd,UPDATE.mem} p1/root
if [[ `grep -w 'DISTRO="devuan"' "userdata.txt"` ]]; then
	cp files/inits/*.init p1/root;
fi
if [[ `grep -w "lepotato" "board.txt"` ]]; then
	cp output/lepotato/{u-boot.bin,*.deb} p1/root
	cp files/led-trigger/lepotato p1/root;
fi
if [[ `grep -w "odroidc4" "board.txt"` ]]; then
	cp output/odroidc4/{u-boot.bin,*.deb} p1/root
	cp files/led-trigger/odroidc4 p1/root;
fi
if [[ `grep -w "odroidhc4" "board.txt"` ]]; then
	cp output/odroidc4/{u-boot.bin,*.deb} p1/root;
fi
if [[ `grep -w "odroidn2" "board.txt"` ]]; then
	cp output/odroidn2/{u-boot.bin,*.deb} p1/root
	cp files/led-trigger/odroidn2 p1/root;
fi
if [[ `grep -w "odroidn2plus" "board.txt"` ]]; then
	cp output/odroidn2plus/{u-boot.bin,*.deb} p1/root
	cp files/led-trigger/odroidn2 p1/root;
fi
echo -e "${WHT}Starting chroot${FIN} ..."
# mount and chroot
mount -o bind /dev p1/dev
mount -o bind /dev/pts p1/dev/pts
chroot p1 /root/amlogic-stage2
# unmount
umount p1/dev/pts
umount p1/dev

rm p1/usr/bin/qemu-aarch64-static
cp -f p1/root/kernel.txt .
rm p1/root/amlogic-stage2
rm -f p1/root/*.txt
rm -f p1/var/cache/debconf/*

if [ -n "$PROXY" ]; then
	rm p1/etc/apt/apt.conf.d/30proxy
fi
rm p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io

### Finish
umount p1

losetup -d "${IMAGE_LOOP_DEV}"
mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}"
if [ $RAM -ne 0 ]; then
	umount "${IMAGE_FOLDER}"
fi
rmdir "${IMAGE_FOLDER}"
rmdir p1
shrink
if [[ `grep -w "auto=1" "userdata.txt"` ]]; then
	echo_compress
	compress_image
	echo_done;
else
	rename_image;
fi
rm -f part-uuid.txt board.txt kernel.txt
echo
