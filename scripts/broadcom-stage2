#!/usr/bin/env bash
source /root/broadcom.txt
source /root/services.txt
source /root/source.txt
source /root/userdata.txt
SCRIPTS_URL="https://raw.githubusercontent.com/pyavitz/scripts/master/"

set -o errexit
set -o pipefail
set -o nounset

echo "nameserver ${NAMESERVER1}" > /etc/resolv.conf
echo "nameserver ${NAMESERVER2}" >> /etc/resolv.conf

mount -t proc proc proc/
mount -t sysfs sys sys/

export DEBIAN_FRONTEND="noninteractive"

apt-get update
apt-get install -y apt-utils

# Locales
set_locales

# Timezone
set_timezone

if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
	apt_preferences
	echo;
fi
apt upgrade -y
apt dist-upgrade -y
if [[ `grep -w 'DISTRO="debian"' "/root/userdata.txt"` ]]; then
	apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} ${RPI} resolvconf;
else
	if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
		apt install -y openssh-client openssh-server --no-install-recommends
		apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} ${RPI} openresolv ifupdown ifupdown-extra ntp;
	else
		if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
			apt install -y ${PKGS1} ${PKGS2} ${RPI} openresolv ifupdown;
		else
			if [[ `grep -w 'DISTRO="kali"' "/root/userdata.txt"` ]]; then
				apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} ${RPI} dbus-user-session libical3 resolvconf ntp;
			fi
		fi
	fi
fi
apt -y clean
apt -y autoclean

# Scripts
echo ""
echo "Moving scripts ..."
cd ~
mkdir -p /usr/local/bin
mkdir -p /usr/local/sbin
mkdir -p /usr/lib/u-boot
mv -f u-boot.bin /usr/lib/u-boot/
cp board.txt /etc/opt/
mv -f run-setup /usr/local/bin/
mv -f sysinfo /usr/local/bin/
mv -f smon /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}write2usb
mv -f write2usb /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}deb-eeprom
mv -f deb-eeprom /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}swh
mv -f swh /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}governor
mv -f governor /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}update-fw
mv -f update-fw /usr/local/bin/
mv -f growpart /usr/bin/
mv -f firstboot /usr/local/sbin/
mv -f raspi4 /usr/local/sbin/led-trigger
# Service
initrd_script > /dev/null 2>&1
uinitrd > /dev/null 2>&1
chmod +x /usr/bin/growpart
chmod +x /etc/initramfs/post-update.d/99-uboot
chown root:root /etc/initramfs/post-update.d/99-uboot
chmod +x /usr/local/bin/*
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/bin/
chown -R root:root /usr/local/sbin/
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	mkdir -p /etc/init.d
	mv -f firstboot.init /etc/init.d/firstboot
	mv -f credentials.init /etc/init.d/credentials
	mv -f governor.init /etc/init.d/governor
	mv -f network.init /etc/init.d/network
	mv -f zramswap.init /etc/init.d/zramswap
	mv -f leds.init /etc/init.d/leds
fi
echo "Done."

# MOTD
echo ""
mkdir -p /etc/update-motd.d
tee /etc/update-motd.d/15-brand <<EOF
#!/bin/bash
echo
toilet -f small --filter metal '${MOTD}'
echo 
EOF
if [ -e /etc/update-motd.d/10-help-text ];
	then rm -f /etc/update-motd.d/10-help-text;
fi
mv -f 20-sysinfo /etc/update-motd.d/20-sysinfo
chmod +x /etc/update-motd.d/*
chown root:root /etc/update-motd.d/15-brand
chown root:root /etc/update-motd.d/20-sysinfo

# Clean
rm -f {lepotato-tweaks,odroid-tweaks,nanopc-tweaks,rzero-tweaks,nanopi-bthelper,sysinfo,sysinfo.bl,20-sysinfo,20-sysinfo.bl,write2mmc,*.init}

# Adding firmware
rpi_firmware

# Udev Rules
mkdir -p /lib/udev/rules.d/
mv -f 99-com.rules /lib/udev/rules.d/99-com.rules

# Network Setup
network_setup > /dev/null 2>&1
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	:;
else
	credentials_service > /dev/null 2>&1;
fi

# ZSWAP
zramswap_config

# MOTD instructions
rm -f /etc/motd
mv -f motd /etc/motd
mv -f new.motd /etc/new.motd
chown root:root /etc/motd
chown root:root /etc/new.motd

# Regulatory db
wireless_regdb

# Adding sys-mods
echo ""
echo "Installing raspi-sys-mods ..."
sleep 1s
apt update
apt install -y debhelper d-shlibs rfkill
git clone https://github.com/RPi-Distro/raspberrypi-sys-mods.git
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	mv raspberrypi-sys-mods.patch raspberrypi-sys-mods/
	cd raspberrypi-sys-mods
	patch -p1 < raspberrypi-sys-mods.patch
	rm -f raspberrypi-sys-mods.patch;
else
	rm -f raspberrypi-sys-mods.patch
	cd raspberrypi-sys-mods;
fi
dpkg-buildpackage -us -uc
cd ~
dpkg -i raspberrypi-sys-mods*.deb
rm -fdR raspberrypi-sys-mods*
if [ -e /etc/apt/sources.list.d/vscode.list ];
	then rm -f /etc/apt/sources.list.d/vscode.list;
fi
if [ -e /etc/apt/trusted.gpg.d/microsoft.gpg ];
	then rm -f /etc/apt/trusted.gpg.d/microsoft.gpg;
fi
if [ -e /etc/apt/preferences.d/3rd_parties.pref ];
	then rm -f /etc/apt/preferences.d/3rd_parties.pref;
fi
echo "Done."

#  Raspi userland
armv8_userland

# Adding eeprom
bcm2711_eeprom

# User
echo ""
user_config

# Kernel
echo ""
echo "Installing kernel ..."
apt update
apt upgrade -y
apt -y clean
apt -y autoclean
sleep 1s
cd ~
dpkg -i *.deb
rm -f *.deb
echo "Done."
sleep 1s
fetch_version

# Modules
if [[ `grep -w "bcm2711" "/root/board.txt"` ]]; then
	bcm_modules > /dev/null 2>&1;
fi

# Clean misc files
rm -f *.patch
rm -f *led*
rm -f *eeprom*

# Vchiq permissions
echo 'SUBSYSTEM=="vchiq",GROUP="video",MODE="0660"' > /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vcio",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vc-mem",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules

if [[ `grep -w "bcm2711" "/root/board.txt"` ]]; then
	systemd_journald;
fi

# Services
echo ""
echo "Enabling Services ..."
if [[ `grep -w 'DISTRO="kali"' "/root/userdata.txt"` ]]; then
	kali_hack > /dev/null 2>&1;
fi
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	echo "== Sysvinit"
	enable_sysvinit > /dev/null 2>&1;
else
	firstboot_service > /dev/null 2>&1;
	governor_service > /dev/null 2>&1;
	led_service > /dev/null 2>&1;
	rc-local_service > /dev/null 2>&1;
	echo "== Systemd"
	enable_services > /dev/null 2>&1;
fi
echo "Done."

# Own it
chown -R ${user}:${user} /home/${user}
chmod +x /usr/local/bin/*
chown -R root:root /usr/local/bin/
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/

# Finish
echo ""
echo "Finalizing ..."
echo ""
sleep 1s

umount /proc /sys
