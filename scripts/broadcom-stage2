#!/usr/bin/env bash
source /root/broadcom.txt
source /root/source.txt
source /root/userdata.txt
SCRIPTS_URL="https://raw.githubusercontent.com/pyavitz/scripts/master/"

set -o errexit
set -o pipefail
set -o nounset

echo 'nameserver 8.8.8.8' > /etc/resolv.conf
echo 'nameserver 8.8.4.4' >> /etc/resolv.conf

mount -t proc proc proc/
mount -t sysfs sys sys/

export DEBIAN_FRONTEND="noninteractive"

apt-get update
apt-get install -y apt-utils

### Locales
set_locales

### Timezone
set_timezone

if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
	apt_preferences
	echo;
fi
apt upgrade -y
apt dist-upgrade -y
if [[ `grep -w 'DISTRO="debian"' "/root/userdata.txt"` ]]; then
	apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} ${RPI} resolvconf;
else
	if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
		apt install -y ${PKGS1} ${PKGS2} ${RPI} openresolv ifupdown;
	else
		if [[ `grep -w 'DISTRO="kali"' "/root/userdata.txt"` ]]; then
			apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} ${RPI} dbus-user-session libical3 resolvconf;
		fi
	fi
fi
apt -y clean
apt -y autoclean

### LED service
led_service

#### Scripts
echo
echo Moving scripts.
sleep 1s
cd ~
mkdir -p /usr/local/bin
mkdir -p /usr/local/sbin
mkdir -p /usr/lib/u-boot
mv -f u-boot.bin /usr/lib/u-boot/
cp board.txt /etc/opt/
# Scripts
mv -f run-setup /usr/local/bin/
mv -f sysinfo /usr/local/bin/
mv -f smon /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}write2usb
mv -f write2usb /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}deb-eeprom
mv -f deb-eeprom /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}swh
mv -f swh /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}governor
mv -f governor /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}update-fw
mv -f update-fw /usr/local/bin/
mv -f growpart /usr/bin/
mv -f firstboot /usr/local/sbin/
initrd_script
# Service
uinitrd
chmod +x /usr/local/sbin/firstboot
chmod +x /usr/bin/growpart
chmod +x /etc/initramfs/post-update.d/99-uboot
chown root:root /etc/initramfs/post-update.d/99-uboot
chmod +x /usr/local/bin/*
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/bin/
chown -R root:root /usr/local/sbin/
echo Done.

#### MOTD
echo
echo Adding motd.
sleep 1s
mkdir -p /etc/update-motd.d
tee /etc/update-motd.d/15-brand <<EOF
#!/bin/bash
echo
toilet -f small --filter metal '${MOTD}'
echo 
EOF
if [ -e /etc/update-motd.d/10-help-text ];
	then rm -f /etc/update-motd.d/10-help-text;
fi
mv -f 20-sysinfo /etc/update-motd.d/20-sysinfo
chmod +x /etc/update-motd.d/*
chown root:root /etc/update-motd.d/15-brand
chown root:root /etc/update-motd.d/20-sysinfo
echo Done.

### Clean
rm -f {lepotato-tweaks,odroid-tweaks,sysinfo,sysinfo.bl,20-sysinfo,20-sysinfo.bl,write2mmc}

#### Adding firmware
rpi_firmware

####
echo
echo Bluetooth udev rule.
sleep 1s
mkdir -p /lib/udev/rules.d/
mv -f 99-com.rules /lib/udev/rules.d/99-com.rules
echo Done.

### Network Setup
network_setup

### ZSWAP
echo
echo Adjusting zramswap config.
sleep 1s
zramswap_config
echo Done.

### MOTD instructions
echo
echo Adding motd first boot.
sleep 1s
rm -f /etc/motd
mv -f motd /etc/motd
mv -f new.motd /etc/new.motd
chown root:root /etc/motd
chown root:root /etc/new.motd
echo Done.

### Regulatory db
wireless_regdb

### Adding sys-mods
echo
echo Building raspi-sys-mods package.
sleep 1s
apt update
apt install -y debhelper d-shlibs rfkill
git clone https://github.com/RPi-Distro/raspberrypi-sys-mods.git
cd raspberrypi-sys-mods
dpkg-buildpackage -us -uc
cd ~
dpkg -i raspberrypi-sys-mods*.deb
rm -fdR raspberrypi-sys-mods*
echo Removing vscode repo...
if [ -e /etc/apt/sources.list.d/vscode.list ];
	then rm -f /etc/apt/sources.list.d/vscode.list;
fi
if [ -e /etc/apt/trusted.gpg.d/microsoft.gpg ];
	then rm -f /etc/apt/trusted.gpg.d/microsoft.gpg;
fi
if [ -e /etc/apt/preferences.d/3rd_parties.pref ];
	then rm -f /etc/apt/preferences.d/3rd_parties.pref;
fi
echo Done.

### Pi Bluetooth
if [[ `grep -w 'DISTRO="debian"' "/root/userdata.txt"` ]]; then
	pi_bluetooth_debian;
else
	if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
		pi_bluetooth_ubuntu;
	else
		if [[ `grep -w 'DISTRO="kali"' "/root/userdata.txt"` ]]; then
			pi_bluetooth_debian;
		fi
	fi
fi

###  Raspi userland
armv8_userland

### Adding eeprom
bcm2711_eeprom

### User
echo
user_config

#### Kernel
echo
echo Installing kernel.
apt update
apt upgrade -y
apt -y clean
apt -y autoclean
sleep 1s
cd ~
dpkg -i *.deb
rm -f *.deb
echo Done.
sleep 1s
fetch_version

### Modules
if [[ `grep -w "bcm2711" "/root/board.txt"` ]]; then
	bcm_modules;
fi

### Clean misc files
rm -f *.patch
rm -f *led*
rm -f *eeprom*

### Vchiq permissions
echo 'SUBSYSTEM=="vchiq",GROUP="video",MODE="0660"' > /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vcio",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vc-mem",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules

#### Create first boot
firstboot_service

if [[ `grep -w 'DISTRO="kali"' "/root/userdata.txt"` ]]; then
	kali_hack;
fi
####
echo
echo Creating governor service.
sleep 1s
tee /etc/systemd/system/governor.service <<EOF
[Unit]
Description=Set Governor
ConditionPathExists=/usr/local/bin/governor

[Service]
ExecStart=/usr/local/bin/governor -r &>/dev/null
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

#### Create RC.LOCAL
echo
echo Creating rc.local file.
sleep 1s
tee /etc/systemd/system/rc-local.service <<EOF
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
EOF
tee /etc/rc.local <<EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

exit 0
EOF
chmod +x /etc/rc.local
echo Done.
### Enable services
echo
echo Enabling Services.
enable_services > /dev/null 2>&1
echo Done.

###### Finish
echo
echo Moving out of stage2 and creating image.
echo
sleep 1s

umount /proc /sys
