#!/usr/bin/env bash
source /root/source.txt
source /root/board.txt > /dev/null 2>&1
source /root/userdata.txt > /dev/null 2>&1
if [ $verbose -eq 1 ]; then
	set -x;
fi
source /root/services.txt
source /root/${FAMILY}.txt
SCRIPTS_URL="https://raw.githubusercontent.com/pyavitz/scripts/master/"

set -o errexit
set -o pipefail
set -o nounset

echo "nameserver ${NAMESERVER1}" > /etc/resolv.conf
echo "nameserver ${NAMESERVER2}" >> /etc/resolv.conf

mount -t proc proc proc/
mount -t sysfs sys sys/

export DEBIAN_FRONTEND="noninteractive"

if [[ "$BOARD" == "raspi4" ]]; then
	if [[ "$DISTRO" == "ubuntu" ]]; then
		apt_preferences;
		echo "";
	fi
fi
apt-get update
apt-get install -y apt-utils

# Locales
set_locales

# Timezone
set_timezone

apt upgrade -y
apt dist-upgrade -y
apt autoremove -y
if [[ "$DISTRO" == "debian" ]]; then
	apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} resolvconf haveged;
fi
if [[ "$DISTRO" == "devuan" ]]; then
	apt install -y openssh-client openssh-server --no-install-recommends;
	apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} openresolv ifupdown ifupdown-extra ntp haveged;
fi
if [[ "$DISTRO" == "ubuntu" ]]; then
	apt install -y ${PKGS1} ${PKGS2} openresolv ifupdown rng-tools5;
fi
if [[ "$DISTRO" == "kali" ]]; then
	apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} dbus-user-session libical3 resolvconf ntp haveged;
fi
if [[ "$BOARD" == "raspi4" ]]; then
	apt install -y ${RPI};
fi
apt -y clean
apt -y autoclean
if [ $uscripts -eq 1 ]; then
	echo ""
	uscripts_stage2;
else
	echo "";
fi
if [[ "$HOSTNAME" == "default" ]]; then
	# default hostname
	echo -n "${BOARD}" > /etc/hostname;
	sed -i "1 a 127.0.1.1	${BOARD}" /etc/hosts;
else
	# custom hostname
	echo -n "${HOSTNAME}" > /etc/hostname;
	sed -i "1 a 127.0.1.1	${HOSTNAME}" /etc/hosts;
fi
adduser ${USERNAME} --gecos ${NAME} --disabled-password
echo "${USERNAME}:${PASSWORD}" | chpasswd
adduser ${USERNAME} sudo
adduser ${USERNAME} audio
adduser ${USERNAME} dialout
adduser ${USERNAME} video
adduser ${USERNAME} disk
adduser ${USERNAME} plugdev
adduser ${USERNAME} netdev
adduser ${USERNAME} bluetooth
adduser ${USERNAME} input
adduser ${USERNAME} tty
adduser ${USERNAME} i2c
groupadd gpio
groupadd spi
adduser ${USERNAME} gpio
adduser ${USERNAME} spi

# Initrd / uInitrd
cd ~
if [[ "$BOARD" == "raspi4" ]]; then
	initrd > /dev/null 2>&1;
else
	uinitrd > /dev/null 2>&1;
fi

# LED triggers
if [ -f "/root/led-trigger" ]; then 
	mv -f /root/led-trigger /usr/local/sbin/led-trigger;
	chmod +x /usr/local/sbin/led-trigger;
	chown -R root:root /usr/local/sbin/;
fi

# Bluetooth helper
if [[ "$BOARD" == "pine64" ]]; then
	pine64_bthelper > /dev/null 2>&1;
fi
if [[ "$BOARD" == "pine64" ]]; then
	if [[ "$DISTRO" == "devuan" ]]; then
		:;
	else
		pine64_bt_service > /dev/null 2>&1;
	fi
fi

# Brcm patchram
if [[ "$BOARD" == "nanopi" ]]; then
	echo ""
	echo "Installing brcm patchram plus ..."
	cd ~
	git clone https://github.com/pyavitz/brcm_patchram_plus.git patchram
	cd patchram
	make
	cp -f brcm_patchram_plus /usr/bin
	cd ~
	rm -fdr patchram
	echo "bluetooth" >> /etc/modules
	echo "hidp" >> /etc/modules
	echo "rfcomm" >> /etc/modules
	echo "bnep" >> /etc/modules
	echo "hci_uart" >> /etc/modules
	echo "Done.";
fi

# eMMC flash tools
mkdir -p /etc/opt
mkdir -p /usr/lib/u-boot
cp board.txt /etc/opt/
mv -f write2mmc /usr/local/bin/
# u-boot
if [[ "$FAMILY" == "rockchip" ]]; then
	if [[ "$BOARD" == "odroidm1" ]]; then
		:;
	else
		mv -f *.bin *.itb /usr/lib/u-boot/;
	fi
else
	mv -f *.bin /usr/lib/u-boot/;
fi
chmod +x /usr/local/bin/write2mmc
chown root:root /usr/local/bin/write2mmc

# Scripts
echo ""
echo "Moving scripts ..."
sleep 1s
cd ~
mkdir -p /usr/local/bin
mkdir -p /usr/local/sbin
mv -f setup /usr/local/bin/
mv -f sysinfo /usr/local/bin/
# amlogic
if [[ "$FAMILY" == "amlogic" ]]; then
	if [[ "$BOARD" == "lepotato" ]]; then
		tweaks_service > /dev/null 2>&1;
	fi
	if [[ "$BOARD" == "odroidn2" ]]; then
		tweaks_service > /dev/null 2>&1;
	fi
	if [[ "$BOARD" == "odroidn2plus" ]]; then
		tweaks_service > /dev/null 2>&1;
	fi
	if [[ "$BOARD" == "radxazero" ]]; then
		tweaks_service > /dev/null 2>&1;
	fi
fi
# rockchip
if [[ "$FAMILY" == "rockchip" ]]; then
	if [[ "$BOARD" == "rockpro64" ]]; then
		tweaks_service > /dev/null 2>&1;
	fi
	if [[ "$BOARD" == "nanopc" ]]; then
		tweaks_service > /dev/null 2>&1;
	fi
fi
mv -f smon /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}swh -P /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}governor -P /usr/local/bin/
if [[ "$BOARD" == "raspi4" ]]; then
	wget -cq --show-progress ${SCRIPTS_URL}deb-eeprom -P /usr/local/bin/;
	wget -cq --show-progress ${SCRIPTS_URL}write2usb -P /usr/local/bin/;
	wget -cq --show-progress ${SCRIPTS_URL}update-fw -P /usr/local/bin/;
fi
mv -f growpart /usr/bin/
mv -f firstboot /usr/local/sbin/
chmod +x /usr/local/sbin/firstboot
chmod +x /usr/bin/growpart
chmod +x /usr/local/bin/*
chown -R root:root /usr/local/bin/
chown -R root:root /usr/local/sbin/
if [[ "$BOARD" == "nanopi" ]]; then
	mv -f nanopi-bthelper /usr/local/sbin/
	chmod +x /usr/local/sbin/nanopi-bthelper;
fi
if [[ "$DISTRO" == "devuan" ]]; then
	mkdir -p /etc/init.d
	mv -f firstboot.init /etc/init.d/firstboot
	mv -f leds.init /etc/init.d/leds
	mv -f credentials.init /etc/init.d/credentials
	mv -f governor.init /etc/init.d/governor
	mv -f network.init /etc/init.d/network
	mv -f zramswap.init /etc/init.d/zramswap
	if [[ "$BOARD" == "pine64" ]]; then
		mv -f bthelper.init /etc/init.d/bthelper
		rm -f /etc/init.d/leds;
	fi
	if [[ "$BOARD" == "nanopi" ]]; then
		mv -f bthelper.init /etc/init.d/bthelper;
	fi
fi
echo "Done."

# MOTD
echo ""
mkdir -p /etc/update-motd.d
if [[ "$MOTD" == "default" ]]; then
	# use default motd
	tee /etc/update-motd.d/15-brand <<EOF
#!/bin/bash
echo
toilet -f small --filter metal '${DEFAULT_MOTD}'
echo 
EOF
else
	# use custom motd
	tee /etc/update-motd.d/15-brand <<EOF
#!/bin/bash
echo
toilet -f small --filter metal '${MOTD}'
echo 
EOF
fi
if [ -e /etc/update-motd.d/10-help-text ]; then
	rm -f /etc/update-motd.d/10-help-text;
fi
mv -f 20-sysinfo /etc/update-motd.d/20-sysinfo;
chmod +x /etc/update-motd.d/*
chown root:root /etc/update-motd.d/15-brand
chown root:root /etc/update-motd.d/20-sysinfo

# Clean
rm -f {lepotato-tweaks,odroid-tweaks,nanopc-tweaks,rk3399-tweaks,rzero-tweaks,nanopi-bthelper,sysinfo,20-sysinfo,write2mmc,*.init}

# Move mc skins
mkdir -p /usr/share/mc/skins
mv -f darkgreen.ini /usr/share/mc/skins/darkgreen.ini
mv -f darkred.ini /usr/share/mc/skins/darkred.ini
mkdir -p /root/.config/mc
mv -f root-ini /root/.config/mc/ini
mv -f nanorc-root /root/.nanorc
mkdir -p /home/${USERNAME}/.config/mc
mv -f user-ini /home/${USERNAME}/.config/mc/ini
mv -f nanorc-user /home/${USERNAME}/.nanorc
chown -R root:root /root
chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}

# Firmware
if [[ "$FAMILY" == "allwinner" ]]; then
	if [[ "$BOARD" == "nanopi" ]]; then
		nanopi_firmware;
	else
		extra_firmware;
	fi
fi
if [[ "$FAMILY" == "amlogic" ]]; then
	if [[ "$BOARD" == "radxazero" ]]; then
		radxazero_firmware;
	else
		extra_firmware;
	fi
fi
if [[ "$BOARD" == "raspi4" ]]; then
	rpi_firmware;
fi
if [[ "$FAMILY" == "rockchip" ]]; then
	extra_firmware;
fi

# Network Setup
network_setup > /dev/null 2>&1
if [[ "$DISTRO" == "devuan" ]]; then
	:;
else
	credentials_service > /dev/null 2>&1;
fi

# ZSWAP
zramswap_config

# MOTD instructions
rm -f /etc/motd
mv -f motd /etc/motd
mv -f new.motd /etc/new.motd
chown root:root /etc/motd
chown root:root /etc/new.motd

# Regulatory db
wireless_regdb

# Bluetooth helper install
if [[ "$BOARD" == "pine64" ]]; then
	pine64_bthelper2;
fi

# Raspberry Pi
if [[ "$BOARD" == "raspi4" ]]; then
	mkdir -p /lib/udev/rules.d/;
	mv -f 99-com.rules /lib/udev/rules.d/99-com.rules;
	# Sys-mods
	echo "";
	echo "Installing raspi-sys-mods ...";
	sleep 1s;
	apt update;
	apt install -y debhelper d-shlibs rfkill;
	git clone https://github.com/RPi-Distro/raspberrypi-sys-mods.git;
	if [[ "$DISTRO" == "devuan" ]]; then
		mv raspberrypi-sys-mods.patch raspberrypi-sys-mods/;
		cd raspberrypi-sys-mods;
		patch -p1 < raspberrypi-sys-mods.patch;
		rm -f raspberrypi-sys-mods.patch;
	else
		rm -f raspberrypi-sys-mods.patch;
		cd raspberrypi-sys-mods;
	fi
	dpkg-buildpackage -us -uc;
	cd ~;
	dpkg -i raspberrypi-sys-mods*.deb;
	rm -fdR raspberrypi-sys-mods*;
	if [ -e /etc/apt/sources.list.d/vscode.list ];
		then rm -f /etc/apt/sources.list.d/vscode.list;
	fi
	if [ -e /etc/apt/trusted.gpg.d/microsoft.gpg ];
		then rm -f /etc/apt/trusted.gpg.d/microsoft.gpg;
	fi
	if [ -e /etc/apt/preferences.d/3rd_parties.pref ];
		then rm -f /etc/apt/preferences.d/3rd_parties.pref;
	fi
	echo "Done.";
	# Userland
	armv8_userland;
	# Eeprom
	bcm2711_eeprom;
	# Modules
	bcm_modules > /dev/null 2>&1;
	# Clean misc files
	rm -f {*.patch,*led*,*eeprom*};
	# Vchiq permissions
	echo 'SUBSYSTEM=="vchiq",GROUP="video",MODE="0660"' > /etc/udev/rules.d/10-vchiq-permissions.rules
	echo 'SUBSYSTEM=="vcio",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules
	echo 'SUBSYSTEM=="vc-mem",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules
	systemd_journald;
fi

# Sudoers file
echo ""
if [ -e /etc/sudoers.d/010_pi-nopasswd ]; then
	rm -f /etc/sudoers.d/010_pi-nopasswd;
fi
tee /etc/sudoers.d/010_${USERNAME}-nopasswd <<EOF
${USERNAME} ALL=(ALL) NOPASSWD: ALL
EOF

# Kernel
echo ""
echo "Installing kernel ..."
apt update
apt upgrade -y
apt -y clean
apt -y autoclean
sleep 1s
cd ~
dpkg -i *.deb
rm -f *.deb
echo "Done."
sleep 1s
fetch_version

# Miscellaneous
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	odroid_udev_rules > /dev/null 2>&1;
	systemd_journald;
fi
if [[ "$BOARD" == "lepotato" ]]; then
	systemd_journald;
fi
if [[ "$BOARD" == "radxazero" ]]; then
	systemd_journald;
fi
if [[ "$ARCH" == "arm" ]]; then
	systemd_journald;
fi
if [[ "$BOARD" == "renegade" ]]; then
	systemd_journald;
fi
if [[ "$BOARD" == "rock64" ]]; then
	systemd_journald;
fi

# Services
if [[ "$FAMILY" == "rockchip" ]]; then
	if [ -e /etc/default/haveged ]; then
		sed -i 's/#DAEMON_ARGS=""/DAEMON_ARGS="-w 1024"/g' /etc/default/haveged;
	fi
fi
echo ""
echo "Enabling Services ..."
if [[ "$DISTRO" == "kali" ]]; then
	kali_hack > /dev/null 2>&1;
fi
if [[ "$BOARD" == "nanopi" ]]; then
	if [[ "$DISTRO" == "devuan" ]]; then
		:;
	else
		nanopi_bt_service > /dev/null 2>&1;
	fi
fi
if [[ "$DISTRO" == "devuan" ]]; then
	echo "== Sysvinit"
	enable_sysvinit > /dev/null 2>&1;
else
	firstboot_service > /dev/null 2>&1;
	governor_service > /dev/null 2>&1;
	led_service > /dev/null 2>&1;
	rc-local_service > /dev/null 2>&1;
	echo "== Systemd"
	enable_systemd > /dev/null 2>&1;
fi
if [[ "$BOARD" == "pine64" ]]; then
	if [[ "$DISTRO" == "devuan" ]]; then
		:;
	else
		systemctl disable leds;
	fi
fi	
echo "Done."

# Own it
chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}
chmod +x /usr/local/bin/*
chown -R root:root /usr/local/bin/
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/

# Finish
echo ""
echo "Finalizing ..."
echo ""
sleep 1s

umount /proc /sys
