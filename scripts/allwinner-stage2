#!/usr/bin/env bash
source /root/source.txt
source /root/userdata.txt
source /root/services.txt
source /root/allwinner.txt
source /root/part-uuid.txt
SCRIPTS_URL="https://raw.githubusercontent.com/pyavitz/scripts/master/"

set -o errexit
set -o pipefail
set -o nounset

echo "nameserver ${NAMESERVER1}" > /etc/resolv.conf
echo "nameserver ${NAMESERVER2}" >> /etc/resolv.conf

mount -t proc proc proc/
mount -t sysfs sys sys/

export DEBIAN_FRONTEND="noninteractive"

apt-get update
apt-get install -y apt-utils

### Locales
set_locales

### Timezone
set_timezone

apt upgrade -y
apt dist-upgrade -y
if [[ `grep -w 'DISTRO="debian"' "/root/userdata.txt"` ]]; then
	apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} resolvconf;
else
	if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
		apt install -y openssh-client openssh-server --no-install-recommends
		apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} openresolv ifupdown ifupdown-extra ntp;
	else
		if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
			apt install -y ${PKGS1} ${PKGS2} openresolv ifupdown;
		else
			if [[ `grep -w 'DISTRO="kali"' "/root/userdata.txt"` ]]; then
				apt install -y ${PKGS1} ${PKGS2} ${FIRMWARE} dbus-user-session libical3 resolvconf ntp;
			fi
		fi
	fi
fi
apt -y clean
apt -y autoclean
echo
echo -n "${HOSTNAME}" > /etc/hostname
sed -i "1 a 127.0.1.1	${HOSTNAME}" /etc/hosts
adduser ${user} --gecos ${NAME} --disabled-password
echo "${user}:${passwd}" | chpasswd
adduser ${user} sudo
adduser ${user} audio
adduser ${user} dialout
adduser ${user} video
adduser ${user} disk
adduser ${user} plugdev
adduser ${user} netdev
adduser ${user} bluetooth
adduser ${user} input
adduser ${user} tty
adduser ${user} i2c
echo Done.

### uInitrd
cd ~
if [[ `grep -w "pine64" "/root/board.txt"` ]]; then
	rm -f 99-uboot;
else
	uinitrd > /dev/null 2>&1;
fi

### Sudoers file 
echo
echo Create sudoers file.
sleep 1s
tee /etc/sudoers.d/010_${user}-nopasswd <<EOF
${user} ALL=(ALL) NOPASSWD: ALL
EOF

### LED triggers
if [[ `grep -w "tritium" "/root/board.txt"` ]]; then
	tritium_led_triggers > /dev/null 2>&1;
else
	if [[ `grep -w "nanopi" "/root/board.txt"` ]]; then
		nanopi_led_triggers > /dev/null 2>&1;
	fi
fi

### Bluetooth helper
if [[ `grep -w "pine64" "/root/board.txt"` ]]; then
	pine64_bthelper > /dev/null 2>&1;
fi
if [[ `grep -w "pine64" "/root/board.txt"` ]]; then
	if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
		:;
	else
		pine64_bt_service > /dev/null 2>&1;
	fi
fi

### eMMC flash tools
echo
echo Setting up eMMC tools
sleep 1s
mkdir -p /etc/opt
mkdir -p /usr/lib/u-boot
cp board.txt /etc/opt/
mv -f write2mmc /usr/local/bin/
mv -f *.bin /usr/lib/u-boot/
chmod +x /usr/local/bin/write2mmc
chown root:root /usr/local/bin/write2mmc
echo Done.

### Brcm patchram
if [[ `grep -w "nanopi" "/root/board.txt"` ]]; then
	echo
	echo Installing brcm patchram plus
	cd ~
	git clone https://github.com/pyavitz/brcm_patchram_plus.git patchram
	cd patchram
	make
	cp -f brcm_patchram_plus /usr/bin
	cd ~
	rm -fdr patchram
	echo "bluetooth" >> /etc/modules
	echo "hidp" >> /etc/modules
	echo "rfcomm" >> /etc/modules
	echo "bnep" >> /etc/modules
	echo "hci_uart" >> /etc/modules
	echo Done.;
fi

### Scripts
echo
echo Moving scripts.
sleep 1s
cd ~
mkdir -p /usr/local/bin
mkdir -p /usr/local/sbin
mv -f run-setup /usr/local/bin/
mv -f sysinfo /usr/local/bin/
mv -f smon /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}swh
mv -f swh /usr/local/bin/
wget -cq --show-progress ${SCRIPTS_URL}governor
mv -f governor /usr/local/bin/
mv -f growpart /usr/bin/
mv -f firstboot /usr/local/sbin/
chmod +x /usr/local/sbin/firstboot
chmod +x /usr/bin/growpart
chmod +x /usr/local/bin/*
chown -R root:root /usr/local/bin/
chown -R root:root /usr/local/sbin/
echo Done.
if [[ `grep -w "nanopi" "/root/board.txt"` ]]; then
	mv -f nanopi-bthelper /usr/local/sbin/
	chmod +x /usr/local/sbin/nanopi-bthelper;
fi
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	mkdir -p /etc/init.d
	mv -f firstboot.init /etc/init.d/firstboot
	mv -f leds.init /etc/init.d/leds
	mv -f credentials.init /etc/init.d/credentials
	mv -f governor.init /etc/init.d/governor
	mv -f network.init /etc/init.d/network
	mv -f zramswap.init /etc/init.d/zramswap
	if [[ `grep -w "pine64" "/root/board.txt"` ]]; then
		mv -f bthelper.init /etc/init.d/bthelper
		rm -f /etc/init.d/leds;
	fi
	if [[ `grep -w "nanopi" "/root/board.txt"` ]]; then
		mv -f bthelper.init /etc/init.d/bthelper;
	fi
fi

### MOTD
echo
echo Adding motd.
sleep 1s
mkdir -p /etc/update-motd.d
tee /etc/update-motd.d/15-brand <<EOF
#!/bin/bash
echo
toilet -f small --filter metal '${MOTD}'
echo 
EOF
if [ -e /etc/update-motd.d/10-help-text ]; then
	rm -f /etc/update-motd.d/10-help-text;
fi
mv -f 20-sysinfo /etc/update-motd.d/20-sysinfo
chmod +x /etc/update-motd.d/*
chown root:root /etc/update-motd.d/15-brand
chown root:root /etc/update-motd.d/20-sysinfo
echo Done.

### Clean
rm -f {lepotato-tweaks,odroid-tweaks,nanopc-tweaks,nanopi-bthelper,sysinfo,sysinfo.bl,20-sysinfo,20-sysinfo.bl,write2mmc,*.init}

### Move mc skins
echo
echo Adding mc skins.
sleep 1s
mkdir -p /usr/share/mc/skins
mv -f darkgreen.ini /usr/share/mc/skins/darkgreen.ini
mv -f darkred.ini /usr/share/mc/skins/darkred.ini
echo Done.
echo
echo Adding mc ini and nanorc.
sleep 1s
mkdir -p /root/.config/mc
mv -f root-ini /root/.config/mc/ini
mv -f nanorc-root /root/.nanorc
mkdir -p /home/${user}/.config/mc
mv -f user-ini /home/${user}/.config/mc/ini
mv -f nanorc-user /home/${user}/.nanorc
chown -R root:root /root
chown -R ${user}:${user} /home/${user}
echo Done.

### Extra firmware
if [[ `grep -w "nanopi" "/root/board.txt"` ]]; then
	nanopi_firmware;
else
	extra_firmware;
fi

### Network Setup
network_setup > /dev/null 2>&1
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	:;
else
	credentials_service > /dev/null 2>&1;
fi

### ZSWAP
echo
echo Adjusting zramswap config.
sleep 1s
zramswap_config
echo Done.

### MOTD instructions
echo
echo Adding motd first boot.
sleep 1s
rm -f /etc/motd
mv -f motd /etc/motd
mv -f new.motd /etc/new.motd
chown root:root /etc/motd
chown root:root /etc/new.motd
echo Done.

### Regulatory db
wireless_regdb

### Bluetooth helper install
if [[ `grep -w "pine64" "/root/board.txt"` ]]; then
	pine64_bthelper2;
fi

### Kernel
echo
echo Installing kernel.
apt update
apt upgrade -y
apt -y clean
apt -y autoclean
sleep 1s
cd ~
dpkg -i *.deb
rm -f *.deb
echo Done.
sleep 1s
fetch_version

### Services
echo
echo Enabling Services.
if [[ `grep -w 'DISTRO="kali"' "/root/userdata.txt"` ]]; then
	kali_hack > /dev/null 2>&1;
fi
if [[ `grep -w "tritium" "/root/board.txt"` ]]; then
	if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
		:;
	else
		led_service > /dev/null 2>&1;
	fi
fi
if [[ `grep -w "nanopi" "/root/board.txt"` ]]; then
	if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
		:;
	else
		led_service > /dev/null 2>&1;
		nanopi_bt_service > /dev/null 2>&1;
	fi
fi
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	echo "== Sysvinit"
	enable_sysvinit > /dev/null 2>&1;
else
	firstboot_service > /dev/null 2>&1;
	governor_service > /dev/null 2>&1;
	rc-local_service > /dev/null 2>&1;
	echo "== Systemd"
	enable_services > /dev/null 2>&1;
fi
echo Done.

### Own it
chown -R ${user}:${user} /home/${user}
chmod +x /usr/local/bin/*
chown -R root:root /usr/local/bin/
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/

### Finish
echo
echo Moving out of stage2 and creating image.
echo
sleep 2s

umount /proc /sys
