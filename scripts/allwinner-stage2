#!/usr/bin/env bash
source /root/source.txt
source /root/userdata.txt
source /root/allwinner.txt
source /root/part-uuid.txt

set -o errexit
set -o pipefail
set -o nounset

echo 'nameserver 8.8.8.8' > /etc/resolv.conf
echo 'nameserver 8.8.4.4' >> /etc/resolv.conf

mount -t proc proc proc/
mount -t sysfs sys sys/

export DEBIAN_FRONTEND="noninteractive"

apt-get update
apt-get install -y apt-utils

### Locales
set_locales

### Timezone
set_timezone

apt upgrade -y
apt dist-upgrade -y
if `grep -Fx 'DISTRO="debian"' "/root/userdata.txt" >/dev/null;`
	then apt install -y ${PKGS1} resolvconf;
fi
if `grep -Fx 'DISTRO="ubuntu"' "/root/userdata.txt" >/dev/null;`
	then apt install -y ${PKGS1} openresolv ifupdown;
fi
if `grep -Fx 'DISTRO="kali"' "/root/userdata.txt" >/dev/null;`
	then apt install -y ${PKGS1} resolvconf;
fi
echo
echo -n "${HOSTNAME}" > /etc/hostname
sed -i "1 a 127.0.1.1	${HOSTNAME}" /etc/hosts
adduser ${user} --gecos ${NAME} --disabled-password
echo "${user}:${passwd}" | chpasswd
adduser ${user} sudo
adduser ${user} audio
adduser ${user} dialout
adduser ${user} video
adduser ${user} disk
echo Done.

#### uInitrd
cd ~
if `grep -Fx "pine64" "/root/board.txt" >/dev/null;`
    then rm -f 99-uboot;
    else uinitrd;
fi

#### Sudoers file 
echo
echo Create sudoers file.
sleep 1s
tee /etc/sudoers.d/010_${user}-nopasswd <<EOF
${user} ALL=(ALL) NOPASSWD: ALL
EOF

#### Firstboot
if `grep -Fx "opir1" "/root/board.txt" >/dev/null;`
    then orangepir1_firstboot;
    else allwinner_firstboot;
fi

#### LED triggers
if `grep -Fx "tritium" "/root/board.txt" >/dev/null;`
    then tritium_led_triggers
fi
if `grep -Fx "nanopi" "/root/board.txt" >/dev/null;`
    then nanopi_led_triggers
fi

### Bluetooth helper
if `grep -Fx "pine64" "/root/board.txt" >/dev/null;`
    then pine64_bt_helper
fi

#### eMMC flash tools
echo
echo Setting up eMMC tools
sleep 1s
mkdir -p /etc/opt
mkdir -p /usr/lib/u-boot
cp board.txt /etc/opt/
mv -f write2mmc /usr/local/bin/
mv -f *.bin /usr/lib/u-boot/
chmod +x /usr/local/bin/write2mmc
chown root:root /usr/local/bin/write2mmc
echo Done.

#### Scripts
echo
echo Moving scripts.
sleep 1s
cd ~
mkdir -p /usr/local/bin
mv -f firstboot.init /etc/init.d/firstboot
mv -f run-setup /usr/local/bin/
mv -f sysinfo /usr/local/bin/
rm -f sysinfo.bl
mv -f smon /usr/local/bin/
wget -cq --show-progress https://raw.githubusercontent.com/pyavitz/scripts/master/swh
mv -f swh /usr/local/bin/
wget -cq --show-progress https://raw.githubusercontent.com/pyavitz/scripts/master/wifidrv
mv -f wifidrv /usr/local/bin/
wget -cq --show-progress https://raw.githubusercontent.com/pyavitz/scripts/master/governor
mv -f governor /usr/local/bin/
mv -f growpart /usr/bin/
chmod +x /usr/bin/growpart
chmod +x /etc/init.d/firstboot
chown root:root /etc/init.d/firstboot
chmod +x /usr/local/bin/*
chown -R root:root /usr/local/bin/
echo Done.

#### MOTD
echo
echo Adding motd.
sleep 1s
mkdir -p /etc/update-motd.d
tee /etc/update-motd.d/15-brand <<EOF
#!/bin/bash
echo
toilet -f small --filter metal '${MOTD}'
echo 
EOF
if ls /etc/update-motd.d/10-help-text > /dev/null 2>&1
	then rm -f /etc/update-motd.d/10-help-text;
fi
mv -f 20-sysinfo /etc/update-motd.d/20-sysinfo
rm -f 20-sysinfo.bl
chmod +x /etc/update-motd.d/*
chown root:root /etc/update-motd.d/15-brand
chown root:root /etc/update-motd.d/20-sysinfo
echo Done.

### Move mc skins
echo
echo Adding mc skins.
sleep 1s
mkdir -p /usr/share/mc/skins
mv -f darkgreen.ini /usr/share/mc/skins/darkgreen.ini
mv -f darkred.ini /usr/share/mc/skins/darkred.ini
echo Done.
echo
echo Adding mc ini and nanorc.
sleep 1s
mkdir -p /root/.config/mc
mv -f root-ini /root/.config/mc/ini
mv -f nanorc-root /root/.nanorc
mkdir -p /home/${user}/.config/mc
mv -f user-ini /home/${user}/.config/mc/ini
mv -f nanorc-user /home/${user}/.nanorc
chown -R root:root /root
chown -R ${user}:${user} /home/${user}
echo Done.

#### Extra firmware
extra_firmware

#### Software
echo
echo Installing firmware and needed packages.
sleep 1s
apt update
if `grep -Fx 'DISTRO="debian"' "/root/userdata.txt" >/dev/null;`
	then apt install -y ${PKGS2} ${FIRMWARE};
fi
if `grep -Fx 'DISTRO="ubuntu"' "/root/userdata.txt" >/dev/null;`
	then apt install -y ${PKGS2};
fi
if `grep -Fx 'DISTRO="kali"' "/root/userdata.txt" >/dev/null;`
	then apt install -y ${PKGS2} ${FIRMWARE} dbus-user-session libical3;
fi
echo Done.

### Network Setup
network_setup

### ZSWAP
echo
echo Adjusting zramswap config.
sleep 1s
zramswap_config
echo Done.

### MOTD instructions
echo
echo Adding motd first boot.
sleep 1s
rm -f /etc/motd
mv -f motd /etc/motd
mv -f new.motd /etc/new.motd
chown root:root /etc/motd
chown root:root /etc/new.motd
echo Done.

### Regulatory db
echo
echo Adding regdb.
sleep 1s
apt install -y crda
git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/sforshee/wireless-regdb
echo
echo Moving db files.
sleep 1s
cd wireless-regdb
cp -f regulatory.db /lib/firmware/regulatory.db
cp -f regulatory.db.p7s /lib/firmware/regulatory.db.p7s
cd ~
rm -fdr wireless-regdb
echo Done.

### Cypress wifi firmware
case `grep -Fx "nanopi" "/root/board.txt" >/dev/null; echo $?` in
  0)
    cypress_firmware
    ;;
esac

### Certificates
echo
update-ca-certificates -f

### Adding groups
echo
echo Adding user to more groups.
sleep 1s
adduser ${user} plugdev
adduser ${user} netdev
adduser ${user} bluetooth
adduser ${user} input
adduser ${user} tty
echo Done.

### Bluetooth and wifi helper install
case `grep -Fx "pine64" "/root/board.txt" >/dev/null; echo $?` in
  0)
    pine64_bt_install
    pine64_wifi_bt
    pine64_bt_service
    ;;
esac

#### Kernel
echo
echo Installing kernel.
apt update
apt upgrade -y
apt -y clean
apt -y autoclean
sleep 1s
cd ~
dpkg -i *.deb
rm -f *.deb
echo Done.
sleep 1s
fetch_version

#### Service
firstboot_service

if `grep -Fx 'DISTRO="kali"' "/root/userdata.txt" >/dev/null;`
	then kali_hack;
fi
####
echo
echo Creating governor service.
sleep 1s
tee /etc/systemd/system/governor.service <<EOF
[Unit]
Description=Set Governor
ConditionPathExists=/usr/local/bin/governor

[Service]
ExecStart=/usr/local/bin/governor -r &>/dev/null
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

####
if `grep -Fx "tritium" "/root/board.txt" >/dev/null;`
    then tritium_led_service
fi
if `grep -Fx "nanopi" "/root/board.txt" >/dev/null;`
    then nanopi_led_service
fi
####
echo
echo Creating rc-local.
sleep 1s
tee /etc/systemd/system/rc-local.service <<EOF
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
EOF
tee /etc/rc.local <<EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

exit 0
EOF
chmod +x /etc/rc.local
echo Done.
### Enable services
enable_services > /dev/null 2>&1

#### Own it
chown -R ${user}:${user} /home/${user}
chmod +x /usr/local/bin/*
chown -R root:root /usr/local/bin/
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/

#### Finish
echo
echo Moving out of stage2 and creating image.
echo
sleep 2s

umount /proc /sys
