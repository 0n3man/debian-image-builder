#!/bin/bash
source lib/function/broadcom
source lib/function/rpi-release
source lib/function/echoes
source lib/source
source userdata.txt > /dev/null 2>&1
UD=userdata.txt > /dev/null 2>&1

userdata(){
echo ""
echo "Please create a userdata.txt file"
while [ true ] ; do
read -t 10 -n 1
if [ $? = 0 ] ; then
exit ;
else
echo "run make config"
fi
done
}

if [ -f "$UD" ]; then
    echo ""
    echo "$UD file found." > /dev/null 2>&1
else 
    userdata
fi
validation
if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	set -eux -o pipefail;
else
	set -eu -o pipefail;
fi
if [[ `grep -w 'DISTRO="debian"' "userdata.txt"` ]]; then
	debian_banner;
fi
if [[ `grep -w 'DISTRO="devuan"' "userdata.txt"` ]]; then
	devuan_banner;
fi
if [[ `grep -w 'DISTRO="kali"' "userdata.txt"` ]]; then
	kali_banner;
fi
if [[ `grep -w 'DISTRO="ubuntu"' "userdata.txt"` ]]; then
	ubuntu_banner;
fi
RAM=0
PROXY=""
IMAGE_FOLDER="img/"
DEVICE_SOC="bcm2711"
IMAGE_DATE="$(date +%F)"
IMAGE_FILE_NAME="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
if [ $RAM -ne 0 ]; then
	IMAGE_FOLDER="ram/"
fi
mkdir -p "$IMAGE_FOLDER"
if [ $RAM -ne 0 ]; then
	mount -t tmpfs -o size=3G tmpfs $IMAGE_FOLDER
fi

if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	partitions;
else
	partitions > /dev/null 2>&1;
fi
if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	partition_uuid;
else
	partition_uuid > /dev/null 2>&1;
fi
### cmdline
echo
echo -e -n "${RED}Setting up boot directory${FIN}."
if [[ `grep -w "bcm2711" "board.txt"` ]]; then
	create_extlinux;
fi
### config.txt
if [[ `grep -w "bcm2711" "board.txt"` ]]; then
	bcm2711_config > /dev/null 2>&1;
fi
if [ -e p1/config.txt ]; then
	echo && echo -n "config.txt        "
	sleep 1s
	echo_nok;
else
	echo
	echo -n "config.txt        "
	sleep 1s
	echo_fail
	exit;
fi
### Fetching boot bits
if [[ `grep -w "bcm2711" "board.txt"` ]]; then
	bcm2711_boot;
fi

### extract rootfs
if [[ `grep -w "bcm2711" "board.txt"` ]]; then
	aarch64_rootfs;
fi

mkdir -p p2/etc/apt/apt.conf.d p2/etc/dpkg/dpkg.cfg.d
echo "force-unsafe-io" > "p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io"

mkdir -p p2/usr/bin
cp $(command -v "qemu-aarch64-static") p2/usr/bin

create_fstab(){
tee p2/etc/fstab <<EOF
UUID=${BOOT_UUID}	/boot		vfat    defaults 0 2
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs	/tmp		tmpfs	defaults,nosuid 0 0
EOF
}

if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	choose_release;
else
	choose_release > /dev/null 2>&1;
fi
if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	create_fstab;
else
	create_fstab > /dev/null 2>&1;
fi

if [ -n "$PROXY" ]; then
	tee "p2/etc/apt/apt.conf.d/30proxy" <<EOF
Acquire::http::proxy "http://127.0.0.1:3142";
EOF
fi

# setup stage2
cp scripts/broadcom-stage2 p2/root
cp lib/function/broadcom p2/root/broadcom.txt
cp lib/function/services p2/root/services.txt
cp lib/source p2/root/source.txt
cp userdata.txt p2/root
cp board.txt p2/root
if [[ `grep -w "bcm2711" "board.txt"` ]]; then
	cp output/raspi4/{*.deb,u-boot.bin} p2/root
	cp files/led-trigger/raspi4 p2/root;
fi
cp files/misc/* p2/root
cp files/scripts/* p2/root
cp files/users/* p2/root
cp files/raspi4/* p2/root
cp firmware/{fw-0a5c_21e8.hcd,UPDATE.mem} p2/root
if [[ `grep -w 'DISTRO="devuan"' "userdata.txt"` ]]; then
	cp files/inits/*.init p2/root;
fi
echo -e "${RED}Starting chroot${FIN} ..."
# Mount and chroot
mount -o bind p1 p2/boot
mount -o bind /dev p2/dev
mount -o bind /dev/pts p2/dev/pts
chroot p2 /root/broadcom-stage2
# unmount
umount p2/dev/pts
umount p2/dev
umount p2/boot

rm p2/usr/bin/qemu-aarch64-static
cp -f p2/root/kernel.txt .
rm p2/root/broadcom-stage2
rm -f p2/root/*.txt
rm -f p2/var/cache/debconf/*

if [ -n "$PROXY" ]; then
	rm p2/etc/apt/apt.conf.d/30proxy
fi
rm p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io

### Finish
e4defrag -c p2

umount p2
umount p1

losetup -d "${IMAGE_LOOP_DEV}"
mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}"
if [ $RAM -ne 0 ]; then
	umount "${IMAGE_FOLDER}"
fi
rmdir "${IMAGE_FOLDER}"
rmdir p1 p2
shrink
if [[ `grep -w "auto=1" "userdata.txt"` ]]; then
	echo_compress
	compress_image
	echo_done;
else
	rename_image;
fi
rm -f part-uuid.txt board.txt kernel.txt
echo
